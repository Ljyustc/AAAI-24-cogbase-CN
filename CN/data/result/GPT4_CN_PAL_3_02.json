{"d097ed99c7c748bfb21ad2deb7a1fff7": "1344", "0146b601d4ef402fbc7c17ffcca37792": "32.0", "f9758f01dd2e4bdf8650b6190773fbfa": "55", "286d21247c22468d9fb64184d3b978ba": "768", "80751eb3427a4025b93d11bf23251a3a": "1440", "54c5519778d747a3a7dc45f0e3ba1cad": "12345678901234", "e81f7fed58ec434f8c11fad0030c45af": "6.00000000000000", "cbd5bd69c71848e68fc0104983b94047": "36.0", "1a7dfa86ae484dc8ab2bf9f7b1dac9bc": "-4", "cb81044d8bfa4563a2260ec5302f3ebd": "27.0", "8748642f4d6b4c1d811e352470b99837": "72.5000000000000", "ea2430b8a3344ddda9321287c31a7a0b": "15", "c1fe7624ed144bbaa947f343b6ade9b7": "Error in executing code: list indices must be integers or slices, not Symbol", "85d2e335e425446386ad6e4b8162a85f": "58", "16cc60d487cc485a853720e7d77f8e37": "7", "de7527bfce6645baa747e8a1600732fa": "16.0000000000000", "d36e8ceba9294ee8ac5049d4004c2a53": "13", "1acdf75a55884a019b2073f5ec5261bf": "10", "c3ee4b75f6e64e128dbaf47bbf6cc750": "-753.171318083439", "2cb6884e1f9a4a018af4b5f60d82124f": "Error in executing code: factorial() not defined for negative values", "dd7fa8e2a0884831b7f83debef223e50": "Execution time exceeded the limit", "bdb8f0c97ad541ebacdb3f83d1658d4f": "Error in executing code: integer division result too large for a float", "e36b54766a3643679368d56caa3ad18c": "38.0", "0162928f37104f94be53210964de0e48": "39", "6d7fb5eb89e84e609b160d91f58f1f69": "146", "bf3c0b4e99d9494aa2cb8d83eba6ea00": "160.0", "6e239e42981546eeb7bdf7766473d89c": "37", "a3f5baf6ee9a4aa0a54678f0000b27ce": "Error in executing code: 'list' object has no attribute 'replace'", "7cd5b461e6154fef9c0dc104255aeac1": "200", "eea630cb5df34fb7803dad8c822e10fd": "55.2", "6ac023ffbc9b4ed7bf1a4cca7f7d648a": "Error in executing code: equal function with more than 1 argument", "861c5e82b7964646a8c596e6f7601f9f": "2", "bf86aea819c3411cb0a18fc544b5b5d3": "-15.880416845858617", "605b512ebbc14176bdd6bdf0642de409": "None", "653359c504644fdf84890dca6d28b7c4": "390", "33f5838a37454002ade835f019181d57": "None", "57b246366b5841f6bc9b8bdf61f7d741": "Error in executing code: invalid character 'ï¼Œ' (U+FF0C) (<string>, line 1)", "d878891b66e94bbc8c04276e097857fd": "2000", "8344d46c52414b9396b3e8145e103354": "2", "c927e2b0116b423bb800fc560f04355c": "Error in executing code: list indices must be integers or slices, not Symbol", "861de77ed8474665b580af7393968e0d": "4335/2936", "fbc5479cb0dd468cabd911e1a9898a56": "763", "f8cbafbf823340b1801c7835778a1e3f": "98", "7a53f1c85601416b9543b0fad14cab3a": "3064.285714285714", "68c7d47ff86b413ba2ad8f79eacb4746": "2", "d0bc22a1d5884d28854fd558bfb9849a": "0", "6c2db7be6ce84520bffba6d6e46235aa": "36.0000000000000", "0622094debe3484caeb2bbabd13e5ca7": "354", "0c7499d791e14f4a8e5135166b990390": "6", "d41e36f88d4a4637a14db52012349375": "16", "ad475461a7464bee83d80d95db96aa30": "0.9", "66375f25a52b4723aed68a03135a378b": "19", "6fbbbb55e3094d2b86aad0c253190ee1": "341", "d4f1a8060e9d4c9fabc83f69cc6a9a79": "Error in executing code: list indices must be integers or slices, not Symbol", "c23f69890ec849359a509222dc4087e1": "70", "353423c2de6f4906b7c840ff22c5cd21": "20.0", "fa4ff9a71c9742888e3efca0996e9592": "2", "2d6fbe3ab3d841fabb51a204e6eddf50": "None", "dcebfbf0f8374ebaa92c82071b03179a": "0", "c779580a112041a4a6816ea2f469e55f": "15", "7f82748419c44472b028b7be6f3b5b68": "35", "1343a211a5cd42eebb8f55e9800129e4": "6", "ff808081488801c601488c227f940df5": "72.0", "c5d5cfd998034e438dee320311aea4a7": "('fewer', 4018)", "66d47fd1d25c46d7855d43880fd0c8a0": "Error in executing code: list indices must be integers or slices, not Symbol", "5129b6c32ce04123ace92caa1e2330f0": "57", "50cf5669ccf64192ac6949dd7cacbb62": "5", "0b0c1bbcaf504d10811b315bc8a3b606": "2", "475fa692d4124a1393df7f937d94c90b": "Execution time exceeded the limit", "314ff54d35c440a2b47a9b8899e28e87": "32", "573ae2abfb114dc6a9058ebb4c34a133": "27864", "ccf4740b2b9343b1b91d0c2bfba6ee7b": "Error in executing code: not enough values to unpack (expected 6, got 5)", "42904a582829468ea357a2f7193810ba": "Error in executing code: name 'symbols' is not defined", "7c10604679634ab9b257c351b2705d6c": "Error in executing code: 'Float' object has no attribute 'norm'", "e2aad86f8b294e5a889f3ef7838b685e": "210", "a9ba8ad3aeab4e6db4a1b3f41d3ffcbb": "0.25", "e52067d5d2cf41f6b5e30149e44177aa": "84", "7e78be0a21f44438aa75f687f13054a6": "6", "e4be0196a4f949a7b395458253f67c52": "Error in executing code: list index out of range", "42f2d951374e4e09a207cf3a1a6d7652": "341", "8d2213b908c543f386dae80d1d1cacd2": "380.0", "785f1d7cb65242b1a2225a84930bf4cd": "-2", "96da791d25724730b79e1503f933c9c6": "105", "dfd8db8de3e24982bd02c66e9987935e": "10.0", "403acc8568d24d2baa70bc910ab62de6": "Error in executing code: list indices must be integers or slices, not Symbol", "905d6191571e44a28612682096f19de9": "20", "e42c0cdd6e9e4fb29cf68ee16d93f63b": "617", "871e497b294342fb95b9be21c5b661f0": "90.0", "57e3c3be1c0c4ad9a942295c68a9e660": "Error in executing code: list indices must be integers or slices, not Symbol", "9c7488df329047038b59490fa35ce978": "11110", "5edfa99e8d204af8910c7c0fee843db4": "4422", "5e91b2c963c943c69de635148c5cd482": "3", "0131d12c1ca24e5a8eb0503c888c1261": "44", "ff80808145644e1a014564b59e4300ac": "192", "20aff6e02cb246b1afd30f4928e30c1a": "2000.0", "ff80808145deb5870145e6dd3b41164e": "20", "56760464f03f47ddb59a6fc2d3f3151b": "No solution found", "17b346e38eb14225bb571fde56ca832f": "8", "78ba055846c14a50ab1fdf064a372c59": "-sqrt(re(i)**2 + 225*im(i)**2)/(-3*re(i)**2 + im(i)**2) + 26*re(i)/(-3*re(i)**2 + im(i)**2)", "2fbc6d35c0bc4d5ea6ef8f1cef646f65": "1015101", "ba2afec5bbf4495183789c4bc81087c1": "-1.7999999999999998", "3d8bf6545313457ebeb4834d16288a67": "8", "4907add3ecd746148b19db2bd2ae25e1": "Error in executing code: list indices must be integers or slices, not Symbol", "0cbdd6a0005d435da39a9b6474ace059": "78.0", "a5d46d62145e4338a1642dc94bb041db": "120", "809b313e4c644bc3a605c1916b611c5e": "125.35714285714286", "7c323794dbd14611a6dbf47f5a637922": "27", "a77a2c28eaf04df3972e361d671463fd": "37", "704132b8c6b54d7abacd64f321913df7": "2", "c13879a7ffe048ca920a5e88333fb7ac": "14", "8e94a9d9a70a43fcba65965989dec360": "83", "94baa8e52baf4ebf85284552a16fdc38": "(5, 7)", "da2fa06d07cf439bb5df69445edc1d11": "Error in executing code: invalid decimal literal (<string>, line 1)", "f5201141a17d4f40bd6eeff1fde360d6": "32", "3c88bd82bb824284a4104a84293efc2c": "13", "9496ea88d58a42169ff40cb3d3255ddb": "21.0", "4916cdae9ce84e0bb7d449002fac0099": "3.822222222222222", "6ca64ea6733d49ab9ae108b0820b41e4": "160.0", "614ef032dff24a4f9b9f2bdb8b688e37": "53", "dac69af19d5c479fbc39153f568d7e2c": "Error in executing code: name 'a' is not defined", "0b54a712fd584475818a4f8b83ad4520": "66", "610e0a6f06194f0290803a5d14fb21f2": "157.4999999999999", "a636e7210ca84d00a308f03f1a9a1e8a": "(2, 9)", "e12cc60c981346c88beb42b376e477fc": "22140.0", "8874f28f75e04855b09bef21ad72eacb": "71", "7396b07be76f41f5a1d738b52362b790": "19", "f6b667ca863e46c88ca1dd15b0d7077e": "347", "a08290fbb1324c4d806025cdfeda4f0d": "Error in executing code: list index out of range", "8f2059d4c5c841fe97876fe5e5b7dbff": "3", "f2a76d25d62a4c41be613d4c8ca38838": "29", "1776545761a848d697c97f309ae2fe5e": "2114", "a758ad6c52e4436eb590841a3e0699b9": "40", "fb856ee18f7d41b4b7162aac1773fe6e": "1999", "9712075774304676b24635d5254b4680": "22828.0", "25c1f5f0169d409dab102b55440c0429": "14", "c5fc17b3340e40448d1e5ec277d9a66e": "17", "d15282871e4346fba86c82ee4fcb1ba8": "22110", "da0606d6697343e7853f5297fd5def45": "15625", "29606c23b0744e2591d7d11cdcc65f40": "48", "ff80808147248448014724de3a410144": "Error in executing code: invalid literal for int() with base 10: '.'", "e3b7525012de4e45ad44a651807a2d7f": "89.99999999999999", "36d3c2f3dc6644a3b995d6c678c23bb6": "Execution time exceeded the limit", "2ca6dce72d2245f889ea91e6ad9a69de": "104", "ff808081488801c601488c2238150daa": "336", "ff80808145a7cf080145cae9d7552b2a": "-112.500000000000", "0cedc8744fe5467383968346eb96a46d": "45", "a828e1425e444ec8ac937268f53192b9": "Error in executing code: list indices must be integers or slices, not Symbol", "2a98687ad19e4f20bd557980499b078b": "540", "a5e47a4cfc2a41feaac263ae2adea535": "2", "90ae8c43698e4898963eea7b57aa1b16": "66", "7d2ebf8db4f54de08945c27762b6db83": "Error in executing code: division by zero", "e0188bd268914b0abb47d9161b8131eb": "9", "8b76d30c8af94f27bad4fc3c639d58a4": "8.333333333333334", "80612307bb6a4d6cabe8512a214c0700": "13", "757a57f897f34485be663da87131a596": "18.0", "0cf7302886a3454f945734bbab093111": "10", "5e85f5807442417c8a7b57dd6a1c0777": "(10, 5)", "f9d4a1fcb19e4ad49f35799383d89e20": "(10, 5)", "be5f515f6040450cbdc78f5bc0bea8e1": "67", "a26b919b0b354f50a0789f92f7e18e6a": "13", "c96c39a17b764662b5780fd6866ea093": "150", "660d84cd3bdf4d84b07c33724a7d47a1": "50", "0119f90a473445ad8116d92407eeb4aa": "Error in executing code: 'Symbol' object is not subscriptable", "5d070e2dee4646748160b503c92969cd": "20.0", "37557518eef14e5d93d2b93347d5cd15": "200", "b667398d277e44ed88387e51464ddf9a": "-3", "0c9b1a4f60ee4a5d970b53a24ad8daa9": "2", "9d37a5925ccc4070b7a6cb6e2857cd17": "Error in executing code: int too large to convert to float", "82c9f9c7b9704d8a9be7e89645feecf5": "8.00000000000000", "2aaea5d2e11b4477b312a863ef083f15": "0.04", "d2467a807f4a4669b0663171e0da7d74": "200", "23f8c41d739e472e870a3d952e5efc02": "60.0", "84f5567f73e0497fa11c9e6502482c7b": "0.025252525252525252", "a793826f4f364ae7a34e60efdb20074d": "5.1468", "1d8a7a4d6ac74344a5b8262e11a28df8": "Error in executing code: solving Abs(a - b + c) when the argument is not real or imaginary.", "a532a9bb1e4d4b1abc649b77b60df333": "49", "2f91551a177341498eba13a09f14cfc2": "-1", "2468120ef40842a88591000352cfa00c": "3", "5bba3b8cc05b47d483eca9472b0b3b1e": "16.0", "e224869e7b8345c9b7e23b4b4f29ff0d": "Error in executing code: division by zero", "898a457ba9b94b38bc5e4f8ea71cdf9c": "43.759999999999984", "5278a1d7ed75496f859495f4140e611f": "1.32000000000000", "854a55064dcb490da1913e7217e732a2": "18", "801946a24ddd4c738f56032b852155b0": "5", "ab88e0a3e2cf491180a9cb2a1e442049": "None", "f92208f927354261806adc7ce5590b92": "8", "35995605b7d344fdbaf816473a97652a": "16", "40008ce36f7744ba870ad718299e1b6d": "None", "e02c59625c2f45c3bf8fac0ef95a51a7": "11", "f1d519f2851c4b72a85a7980b24881f4": "481.98", "94031dcaa3b44cb19ee28fe7ce7c2325": "216", "7713bcc7f8c04a4c97722365a2389e4a": "300", "5e024754a6264cccb98d8144416cac1d": "72.0000000000000", "61e8851aa96f481783168e7edd2d3ee1": "4", "4d96eac8356743a29021620c9acbc936": "56", "9c05c4c4a53644ddbe05ff2f91db6a20": "21", "c6f15f10b7c54f8aa7039fba761cf261": "7.1863342894618585", "ff808081488801c601488c22129d0d99": "250.0", "cff131d3b98340fe96eb99b136ec4f38": "750.0", "114bc968e02244f48bde9531f639ff2a": "Error in executing code: tuple indices must be integers or slices, not Symbol", "552757f1f81f471bb9ed563e4ea58eaa": "7.00000000000000", "dfe298e1cea345ef85572f4125aaa0b6": "63.0000000000000", "a1322016701a410c96eb9254d392dbf1": "A1/85 + A2/100 + 2", "61afb818b3c74fefb8931bd1e151c7c2": "12100", "a7560ea627ab49228b2e31c0a869b625": "21.4285714285714", "e4c0320f526344ad914227930ad866c1": "-0.0753778361444409*x", "6cb45d75ab5e488287fc74299aa279c8": "1980", "11a8848224924647bf2f49e1d3a0a029": "Execution time exceeded the limit", "ff808081481c1eb501482cfd68c60fc6": "202", "9ab783ddc780421986d7c203ee16189f": "65", "d01e2c7d62e949db838448539fa002db": "0", "62de32b1537e44178f6d5029b676ca68": "12.8", "913d77ccb69a4ab08386d873fbeb7a6b": "Error in executing code: list indices must be integers or slices, not Symbol", "c1e22cdcd92947fca270d77992842021": "11100.0", "0132c09551a3421f8ecdba0c5fa2cbfb": "1593", "f78edaa62a2648ef877adfbe8152a203": "6972", "610f8c27a97d42eebeadb165058bb2df": "34", "77a085e925b14b58a38c31759a2171eb": "88", "75e225e834554be7bb71535ecf767cbe": "Error in executing code: 'Line2D' object has no attribute 'angle_bisector'", "21ea5cb51908480ebd7fefd843127a81": "13", "947b6ab672a94b4eabf400fccef590aa": "711.111111111111", "372fa7dafb8c4dbda088a80381522058": "513.5", "d5428da4ab0f49af8e75b670114d71e6": "7", "ad75acb620fa4156af2a44c8664b3589": "11", "827663ea653e4387a44b037107d337be": "4.0", "a2387af8065d4e8ea258b358605e8cf9": "None", "9208d17a4b3b49ccafe215bac6468a54": "11", "311eefb8e0694e00a2d6f753c6547cff": "10", "075bcbb20b55406d8d38c9d7d8cb1280": "20", "2fa5ae215f704bb8b21426cfed77c973": "Execution time exceeded the limit", "71545efaf14949d98499cc1eeb7320b2": "51", "77a72b9d99b1414f9a2cfe1839e513f3": "3369600", "157ab1bae2e4402f956a832a737441a8": "1448", "ff80808145644e1a014564b51b030098": "660.000000000000", "41c7e66a98ba44b9841aa22bcdd18b1b": "Error in executing code: tuple indices must be integers or slices, not Symbol", "98d622e32726483296cba4bcda9c564b": "1.1999999999999997", "d5ffc93c23574d069e38d043cc6ed343": "7", "3d7dbdf318ef470f87df414ccdbc2cf4": "5", "447160c652714ac48282f58fdae64d78": "9023", "87caa2b7a0694c639f75022f3894e06b": "19", "ecf301fb38bb48f59814a66b5f9e3341": "150.000000000000", "6710e5c441694d16868154fa81da8cb2": "98.5000000000000", "759f356e1e38425d9a0ac34b3d0fde8a": "112112.0", "8a4ecd5b7a374e81b02e308841efb75f": "22", "338d480f1bde4e16ac468acec40c421a": "2", "ff80808146dc2afe0146dc51a5e701f3": "5", "6af0b61ba99a4f258937e9f268118499": "41", "ef0d78153e5048a18230b541f0b05ea0": "8", "67a42062d28b49039f9cf73688911d14": "120", "1ccb29c1ec1b4e378bb273f560a63a5a": "0.75", "54abff8b957d46b9913695f0118f2256": "100.0", "1bbfc5d1bc4e41ea974f3635bb0500d0": "6.0", "e24a8e087a1949449eed558e42002008": "615", "6dbf19e13f4b492d9ba6d626e387d0fd": "750", "6c46014202014270b7d4cee157af370d": "Error in executing code: 'float' object has no attribute 'is_square'", "790241482fd9488ea1784de387b02cf0": "5000", "ff80808145deb5870145df865be201ed": "16", "628602fd0fae4b1c80dec364213ce614": "855", "833f68d96322440797a1b1e4110ed83d": "45", "7b0fcae192a94665817f410dc43e6c7c": "1.0000000000000027", "e16a22759e754c989e5926e558048c80": "12.0000000000000", "3133115628ee4b06a97d1a7fb16fa25c": "214", "ff808081456fc18b01457930541a1a8b": "436.8", "258e580236674598b6bd8ad5194b4567": "Error in executing code: name 'd' is not defined", "fe2b5898e8b54c13b9aafde343e4cb23": "Error in executing code: b", "e1dc96c648b4492f9a0276c4f0a56d79": "1002", "ff4b840dcdc34e0598201f9d2ff54750": "81.0", "5fb5a33f89ea402f88ee3765d65368d6": "19", "14b0f15c49f64b70bf727a432da03b32": "750", "a5cfc4bd20524d96bba763863e0d89c1": "1200.0", "8aac49074e023206014e43936df37077": "3/2", "b53a91ee4a2f43cfa64b6e02e271f170": "392.0", "2eab5247f4db48f8805c4a67c8ed4b6d": "None", "12aa4bec07ad48609df5caba81c8cd2c": "0", "504e609f067941938b67b5aacbcd239f": "288", "e6b1ca9998844ddab5c524ae3e610d64": "500", "64d8a7df0267412d949e59169cc2030e": "183.229017566688", "5db7e2accc464b1fadb59760790965ac": "32", "fb669826f0df4a37a57a9e3970906d21": "1", "6dd352a3c72a4adda2f2cbe8d1736b40": "-7", "4bfedaf2d08c49ccbfe365d4b8b1045d": "33", "4cc75097acd448c49bc03549ae0e5de2": "757", "d99e5c73e3d54a5facf53413ce13e043": "1000.0", "ff80808149990d5e0149b3c3adef324c": "140.0", "28df9618a39f4b4d8e39eab5dd80b793": "0.33999999999999997", "beaa742393024a57a02cc835178f45d2": "0", "0b42d35bd1ec4809b24d7b46bcc8a7c1": "320", "2ca04008834743a68273ef8195c134c4": "85", "ff8080814526d2f401452794157f03d6": "-1", "82168f90d1b34108bbe343cb058a7f71": "1234567890123.0", "474e0f7ad2de41aa9f212dbd563ed8e0": "120", "112b79d5bc83483e887a10e422d0a66b": "100", "bce686d18044423c9e2a6023f86faef2": "10", "ec6145933c5d45d6ab2cc8db930233cf": "2296", "6ec5ba0500d54c178d950a2ef0e19175": "1960", "5061933305434f228e8daac81de934e8": "43", "0e8d048373194ab29237230f5446ed4f": "690.0", "4f1daf2aff0d4b7fb0609624afb22959": "Error in executing code: string index out of range", "5666bb372a0142a68596847f6e3c60c0": "180075", "6af11d1cb30840bd8acc9c509c194d82": "sqrt(-1/(-5/2 + sqrt(21)/2))*(-5/2 - sqrt(21)/2)*sqrt(sqrt(21)/2 + 5/2) + sqrt(-1/(-5/2 - sqrt(21)/2))*(-5/2 + sqrt(21)/2)*sqrt(5/2 - sqrt(21)/2)", "229edbe6866041278736ad8e947b19ec": "7", "a4029a163dd04bb3847caeade423d12a": "1280", "76041090395e47aabe65e613a59f938a": "Error in executing code: name 'Eq' is not defined", "58a50953e4764431a4c7bf13b72181fc": "0", "d3fba8ee9a6343e2889868212a0e7ec9": "6", "c9643db2a6104d4c8d138e047b80c073": "20", "2c5bc8e0b83347a488a32922815063da": "23.0", "efdc70bc69294655916a8426d1ba06bb": "94", "01d3b2c0cceb4c91a7442b89357f5b91": "Execution time exceeded the limit", "dec63ddfb54147ac9e97d1ff2e77711d": "1200", "dc3016ba40ca49bf9fb79650a808b702": "(81.2500000000001, 81.2500000000001)", "dadabd9a7bac4ee189cf5f9b61b8565f": "53", "8e2e2de5515148a9aa9124ffaf2b09ee": "28", "a3da5e6ca67d40d0bb545ed787f030c2": "12", "ba67cc0bd9674661a45036f00931de8a": "Execution time exceeded the limit", "747b98e0e8f74122bcb098d4693a2f4b": "1506", "759a75b2c8564f92b850637b0185fc20": "20.0000000000000", "636f3b1f959d4628b31004521cba36d9": "25", "ed78e87752884dfc9b38bf935a033f18": "34.0", "186b3e1e44134f5a86921f1e4ba7194a": "Execution time exceeded the limit", "e99a8b7bd66c44cbba6e78c3b5acb330": "2", "a4dc0c4c484b44f3be26222009dbe007": "10", "68b2abf544354224a550e47ea0a0a3a7": "6", "1acb596b89dc4033a14a6277effe3441": "10000", "47405808566a4710ade0f98615f64405": "1120", "300abfb6b8f843dd8bbab93d7a18c5b9": "1.0000000000000027", "ff808081462cb44401462ce0c5010068": "1232616", "4bb8852fbead4e8da12428f1c694d1b2": "Thursday", "ff808081477bd88b01479417a3132e84": "Execution time exceeded the limit", "14612c5dee6344ab8d5a0b237f47d704": "Error in executing code: tuple indices must be integers or slices, not Symbol", "c374070f31fb42f28faa64af2991f382": "Error in executing code: could not solve Mod(x, 3) - 2", "87c413c5163b44e0be5fff4b49881ec4": "500.0", "bcdde5035cd04001ad75ea007bfb0de0": "82", "c0a38a54aab24cab8b9af0d126080729": "71", "079c5ef12c944ba0b0d942c3926b17cc": "-1500.0 + 201600.0/v", "691504143a014e9cbff59e47c1b05d8d": "Error in executing code: name 'symbols' is not defined", "85225dfa48aa4ad59091b1b76b14ad70": "Error in executing code: pow expected 2 arguments, got 3", "1ef3d0d3eab749658ced6db6032b61ea": "96", "44ac013b7b424f7697d6ab68b74608b9": "[624936]", "d520f5f2f9ad46cc8b6151c7b02dd594": "111105", "e74ecf4692c44480826a9584ab2b30b6": "19", "fb3fccf506534c1c8d565204d5bf297b": "2", "b53b25c91a10477b86742b2630d87b58": "2", "0c38ea77e3b44a40ba819d39dacc2498": "15.0", "3f31d09f03bc4f79b372ac71bb636341": "80.65863337187866", "57000be715b340948c29118e16629893": "15.0000000000000", "c17cce95d08649578e5e6234c7f9b5f1": "63", "cf6de2102608448da481f6a0dff07636": "Error in executing code: name 'symbols' is not defined", "96ea38dcfbfd4f9a914440eae0f43f95": "Error in executing code: \nThe inequality, 4*k - x**2 > 0, cannot be solved using\nsolve_univariate_inequality.", "f553cf65df504bb996b531a174ea222a": "724", "ca676168747144e4a4b54bd537807d19": "1002", "a2c918ed666a46fbb1b4436b2e4a32a0": "17", "683c99309e8e46db8e881c7355f84744": "9", "6a1361aa6ba3403c91fbdaf310244f75": "18", "c17805c33ba146d9908647880cc6f575": "Error in executing code: name 'symbols' is not defined", "b12a9157b1b744f788bfe40a0de59916": "30", "5bf9ac270ba04c58b76f29605e594614": "42", "6a7551822494473ba8c51afcaba6b6fe": "7.2727272727272725", "f652391fe4e34a65875c27765ee5463e": "96175", "ab28960e862942a7834037afd6d976db": "Error in executing code: No module named 'scipy'", "859cefa2936845978b1ca32dd9eeba8e": "3.0", "757b167411464112b6ca20fc24504f63": "68", "f60b476e99ad446b842cfe81eaf5ce65": "Error in executing code: name 'symbols' is not defined", "f36b7d69d9204a90b14ebeaa292a0ec6": "7", "a5315482ffba4114a69279cfc24489eb": "1506", "7790372eee4f499eb425d0c64b8d8912": "0", "ec83936d07954c9e9db0f2f9a5709c0a": "1.5", "715eec14008f4f5dabdc32ee2fc4a1e2": "59.999999999999986", "d346a8f3a6794442a99769344b99c445": "483.0", "977b8bf60f7d48a6bb5df68df00e587b": "3.0", "a0e32faec670463cbee838ab456cf959": "5", "ff8080814950cf7f014956f1a85208f1": "11.0000000000000", "1addd4cba6ce41ca98ff264afe342111": "24.0000000000000", "ff80808148c43ff50148c971722c060e": "52.5", "05cfd113d7744559a016da01323b283d": "Error in executing code: rate_B", "32ed5c72624b45bd85dd943825d3f081": "2700", "86731c94682e48f8a1546a10b206e994": "3", "ea97774ed18d4e7593c9c73447dcd843": "2.18750000000000", "b0de7d2b9ee84e60b68c847969ee4952": "340", "44b32b7692304c7895053e4d0a940863": "1", "6d383e3854794d73b8d8386a335fb396": "-12.5", "1d9d94dca49042a7a21903ee13c600e5": "0", "578bda3b9d6541f89bbcbf13604fa3e0": "1", "031b8bba9cc14145bbba955e1f033a79": "46", "fec47f891ee84d4f81886f9db0570932": "720", "577a5d0e15a74bbd990456113b8488d7": "6498", "14e3fc4407084a0f8f61d7c122ffec5b": "Execution time exceeded the limit", "838b26a692e54d3aa08c1e12db3b7e01": "28", "00dda92f86764b099cddb4dbea181dc1": "1", "726a0dc1a7cd4bffbd385fd4b5cde112": "171", "6a41477b5d094a78bd72d90cd8a27829": "6", "ab5d94da95144670a1dcd03e0f483d56": "6", "a2f079114d0c42e9b6d106a7a61def79": "36", "c1c7d6acb8214fd7bbdb12bdde72192f": "50.0", "70141e0d6917436a94b7a8a69c915644": "1929", "4c92363d83db453084f7403610789bd5": "Error in executing code: pow expected 2 arguments, got 3", "5e1184c1aef141a8afae9c8355c15917": "166650", "a1ff4f6c448540f9ad1bb52f7e4e6bac": "69", "35c1d0b0697f4e9dab0b436925d06834": "1970", "0b137ee2e1a448c0b2e810f38a15e073": "3", "fb35125cc10b4bd79121f3a6f155d668": "14", "51c4f141dcab4bc882ad67d198bedd24": "Error in executing code: list index out of range", "c0c0c103f97f4f0f85bf0bfad073b684": "400*x - 2000", "2e58efdf42f94a3b86d51aaef739eff7": "Error in executing code: list indices must be integers or slices, not Symbol", "35607fae1db043a284613f532220c485": "17", "ff8080814526d2f4014527946a9803ed": "37", "b09c03a270604b369f2e26b22fdda2ce": "4", "0453ff5cccda4c0484a2e7306f7bb628": "5.0", "7c9e3b1bed6e4dcf8262ed3a66098956": "350000", "9f7471867c09428d9f160569022aa47e": "1021080", "24cf3cd6d18c426f9d7bccf1dafbb597": "Error in executing code: list indices must be integers or slices, not Symbol", "c7234f410ead4ec0b2daa334882ed011": "Not divisible by 9, so not divisible by 36.", "23c0e7fac6fd418a8a95926b9ca8dad7": "4", "9df7ea123d364badb8ac11957c4a8bd7": "200", "ff8080814670afec014676d33a280b6e": "126", "ca8a326609c64a929aed9dc78f7a64d0": "-87", "51bb2c3075f3468e96b4819588dc23a9": "93.0", "d2b372cdc1fe47fd968f8b50be99994f": "-300", "fce1f99c9b164dde8f1b74d3c771d695": "3*med/2 - 6", "bd7ff9507a5140aa82663053e238dccd": "83.33333333333333", "f7500fed6f41464aa0655d728acb54e3": "218", "3d3ca2e72c92455c96d5fcae04efde60": "259980", "5cd7e99f5d9c44f3ac02be6bf6c5908d": "Error in executing code: name 'magenta' is not defined", "5d2486982d3c4ad8812d1b9f89ca5171": "49", "6b48c36705ff482aa2e5d5b5c82f56db": "75", "040891bfb4214798abdb85cbd7a7fec3": "Error in executing code: name 'Eq' is not defined", "42d53fc750e54b02933879299d82ad9e": "180", "70f1f1bdb89c48ae8ed78c357c6a7e28": "69.0", "99a92f0898a34107b66f589853a59886": "Error in executing code: could not solve -10*floor(x/200) - 10*floor(z/320) + 10*floor(x/200 + z/320) - 13", "e31d770a11be45ef8fc6e69531eeb5fc": "4", "2168a91e362a4eecbc6df365d6fbe77c": "None", "5ec2871ff929441eae871d71ab0005f3": "33", "55dece10135748c588948cff16f02020": "4.0", "a66876af8e66403f96ebb8ad85d7bb78": "83", "0cf7f4411be14c4ea98821e6c33e02dc": "630.000000000000", "0f1d730dc6974b9ca3ad2cc60bc58f16": "14", "13c773294ef1486684a38e6e003cae0e": "1634", "114c17e646ea4746b3807188ddb45a67": "24.0", "9cfc3167e84d49d8bb01a722467a66a7": "0", "39b1433cda92421bb3e5c1115958cc3e": "59", "83f767e1ce604d3993dc4e3b58470972": "Error in executing code: name 'Eq' is not defined", "ff808081454b2565014550c130e30a07": "Error in executing code: list indices must be integers or slices, not Symbol", "7d9eea8e4f384070ac3fdb59f942c186": "Error in executing code: 'tuple' object has no attribute 'values'", "d4d7f321a82a4ef6beb18798aed61931": "24", "f0bc121010924bfcadb5b39ec379afc6": "4.28571428571429", "d5647e6956134dfd8f1d82d11890bac1": "1024", "3331b4b0699044a29710a442c9850663": "76.0000000000000", "e9b6efc9de6142728d3aa3fbb769d3b3": "2.6500000000000004", "f343c9ba6694470da25da1bb4294f31e": "325/2", "f6782f356f524c95a397d216fcfa3067": "8", "ad20929f3fc447f0a2d3be925354ae89": "168.000000000000", "436dcd0733de431b879753abc10b821d": "96", "5ce225467cd24664b887babab797f949": "1", "3cdac59773ce468ab6802f1609d5ef89": "48", "5d185ff465404b0e8f701d8a6cbf17a9": "4072.0", "ff8080814638e133014656ae857f3273": "54", "8ab37cc3f7044ee295f785fa123d716c": "45", "3dce76e64c574ddcb211db2b2254aa32": "124.0", "8903b78d2ab8450b802d9260c4bf204e": "7", "be294da68d51450e8b7fd6e5badc7f27": "40500", "764f31a8d11441c9b669b06b4e911d81": "25", "40c287984fd04ec2b6959fd49615c697": "(1/2 - sqrt(5)/2)**3 + sqrt(5)", "fa152ae312f74acaac0a88290c5a5dd8": "72.0", "6c3740e0422741c7aa227379f6dc3630": "Execution time exceeded the limit", "5a7f12329413415386b3c939bbea43e0": "Error in executing code: unsupported operand type(s) for +=: 'int' and 'generator'", "955320bc078f4282bfac916ccaff947f": "(168.0, 312.0, 480)", "8a2f25beb24d496794c6387cf3048180": "Error in executing code: list indices must be integers or slices, not Symbol", "e8b24c38ceff4caba0b0879dea9b9cd1": "22", "978eee39e8d141cfbf0be03dcf4a95b8": "2047", "74324230b7f648ecad15559430cd7dd4": "36", "59c32d2d39eb480e8e97198de6113b4f": "0", "316d6feba1484f45800437a4db9b7f3b": "909", "2307b51b1ad34fefaef341ca46cbac75": "48", "947e9054ffc046a09d0c78e9d019eeb9": "('W', 0)", "19f4b6ba37fb40de81146f2c4324a002": "2", "b488fa99d13542dfb580d86d7ec90ab7": "sum_of_numbers", "790b7b7af0614cc78136a65af7387791": "6.5", "9ee276e1dbb6469b8a65591b6456f568": "8748", "b38a670c338e4ce39027a8ef784fa936": "290", "de842591c36c4a3d84d9136abb75a87e": "10", "bef2270674cd466daa11b1dc3fa774b0": "1980", "d47a882fb9544f508f80834f82902059": "25.0", "adf670dd06754de3b2158c2471803725": "48", "ee37a79756fb41db8aad82ccacf4a90a": "-500.000000000000", "76ed2d34655842b4af5281ced6102f7f": "-396.0", "d833aecaa2a74d8d891ae1d7b85e3905": "345", "8ef74bfedfa44b03934f65344f310679": "32", "607323daf7e64c6fa3cb3de9538578b3": "1200.00000000000", "0b835316b7ef40a7bee0b3d78fb18e1a": "2867.0", "cb9b0f385cf24c74a79ffb9c0dfd5644": "335", "d773ef8eabc3410da16f20f09d49d154": "6610", "f7080b54f4054064b45aeb096d55ffd7": "10000", "95cbf2ed859245d4adb7913e422c8612": "37", "b87212b9fa784753a4601c267a72326d": "11961222", "4f56af5b0e1a41338f4dfeabec0ad542": "7", "924af3919b5744d99900c7165c3ed056": "5.0", "16bc717f1ad9461287493ce6a5ebd3ce": "2017", "d09d48a47ece4ff29db7ab4c9681996a": "49", "ff808081488801c601488c2238ee0dac": "-18.0", "414623a190de4c999dc43a5e23c83584": "6", "bcdab0e582834d0f91032dddaca8ea02": "9", "af8eba2f0a404169a5aede087c9bc47d": "None", "ff8080814583feb30145876ea1da0282": "110", "359a865e6379452198905e1cb975873e": "-1", "6f5978c7d99d4245a43c6d07e9d6688c": "38", "964e263779d94e78b16c3c84a9bbba1d": "330", "eb0ee41daefb4042bd74a8a7819b2f2a": "6.4", "10ad0924a1e343129bb9207eb7e7abf8": "598", "d56a7df7a14b43e9be3805b0c22c5b59": "30.0", "3076ffc869aa47128a30a907f3168f34": "18", "80f7c21eada344209e1298bcd78ae2aa": "420.0", "4033edf10ee04bab9b26b67cac863a42": "4", "437a31af76274f08b549a564baa2fa86": "48.0", "88b20194f9024b66b20c802403242219": "7", "fd73f1c1ccc34af98ad80e3a3a571cd0": "119", "3070854b41524dae85e5b6cab61d5852": "108", "d77e52095f2241d3ad9216b2765afcdd": "36", "be6bf227125f4b07b1fba85f76188534": "9", "ff0c36dffe184b838331ba8fb872009b": "7", "aa56cea5df004ff78341b8e4c8997609": "Error in executing code: name 'symbols' is not defined", "0d9e50dbaec9495095e7e8946695c25b": "20", "ff8080814974ee3b01497e770ec80a64": "321", "498de68d0a1d46778923a9cc898c6c99": "41", "96e91848cbda44e9ae1cf8e01e13bdec": "168.000000000000", "bdcac15f89de4492adcfa7c768124b61": "1229276", "401a15a85bc848ed898675c70aac4b2d": "2", "d968ab136ecc48b5b88baa303a0bd23d": "132.0", "f38c671c55f94f87aab2bbb6c8b6047d": "1", "b84ba25392004d9f88b03713399f61a8": "11", "5a81562505e742de9e7c953d32f628d4": "98.0", "8faacd3a37f74ef5a2e0fdfc47851fcc": "100", "76cd674b0bd8497ebc0f0d7b45271b6b": "752.0833333333333", "d088c95a0db84ddca26beccd55bf04f3": "1488", "15416cee739b4c30bede3d41321d4e4e": "84", "e1d0d254e4b64295994c9b3885cac795": "2", "023a7a05ad6b47c7977931e9410ac8d4": "180", "2d12f060e5074532a05449bbd7cd5eb5": "19", "91cacefc7bf4421c8e0935adef0fd852": "21", "c6aa957f0f5348788e7138eb3a9b5c96": "21", "895f449611dd4d7a8730b596bb19c3be": "1200", "cdfd357d5c194a6180cf27434a6f566a": "231", "9eec88a3f07c43f38c442932498e12b1": "6.0", "15dc74b2ba89471b98b873286a6c953f": "22.500000000000007", "8a3a531a95c44e5bb86b80306425722a": "2", "9d85c6d42a454331ab595e8533737afe": "Error in executing code: name 'a' is not defined", "c6d8e6b78d8e48eb80e190908bb12bc4": "5", "de70e9e9377640e6b197580117f1ed2a": "45", "4ac19c33310b4a2e9ea053fb60dd0049": "33", "c52b74b1377c4259962193287bf9fdc3": "19", "dfb0daa6a2414aeaac29c3b0ab035d38": "1", "88fe508b4a5b42048fee8e43e35a342a": "0", "1ec58380308c4f358bf990812877de30": "241", "6de9b53073ca46458e25d900d8f1bd67": "66", "7c1faceaaa014a8e8304680534b003d9": "17", "4b955ccbb4fb448382f0634e637025db": "90", "ff80808146cd510f0146db4282620c85": "6.0", "277204f1d33c4f88a1e30b050fa28503": "5", "82a9784f1c1a423c83bfa071f9305f79": "620.0", "e160bd70967948ec9287e79182fb9ce9": "7", "66b8ab2bf01c4ec58b9a64b60b22e777": "1", "ee7670be33304f7d849a7bb99a02d0c1": "16", "4d4777122bff4180811dd0ef2ff0cb1f": "Error in executing code: invalid input: x", "28dc1744242c4634aacc544a31030b4d": "8280", "1abd4bab31bd480c9b190d928e8b6ac7": "10.0", "4c9ad5ac3c99492aa95d2ef9907e01f1": "280.00000000000006", "a014071067b546738d785d99f435e5f4": "120", "810539b126204437bbd8d47fcf27794c": "1005", "4d6633745dea44b4b8559142ab7211d3": "2014", "19fda2d5fe9c42ff81ec3b2b9efbb99d": "0", "e1e8b94308404fa19b1de00481c90c38": "43", "05627acd7b52430e9d54b740a822104d": "18", "7949eee1b3b1400b86ae1468b830d2fa": "Error in executing code: list index out of range", "0622b0d184224e338f3b783c0dbe1d83": "290031", "29e3df60d2a547e3a34df39d1e181f33": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160]", "8c0ee3a3963442c181728a1f240fc360": "2", "4818ad5889ee4fc2a18dd3e868eebc8e": "35.0000000000000", "b9ad5bf27d9045c2a31e50402850983f": "Error in executing code: could not solve Mod(total_oranges, 10) - 2", "d3219d58c8bf4099b94be7df881eabc0": "1", "8c2f835665e84f27bf28f9aa041fa02a": "0", "661740ebee284af1bf768f168119b7c2": "614", "602550ec9c6b4bccb70af340fcac4421": "(480, 960)", "80ae09db40f143deb637f27958df6fc2": "7", "5ba61680500b4b89bfe54afdcab22528": "54", "caccc74d3d244477927327f28d373519": "14", "ddb9aa83edd44346ba92149ba9c7e94c": "96", "918a7359620345f9a8edc0cd069185f7": "9", "4427844d3d5a44e0afeca2d9d1f7d7f4": "0", "437abc82bf184b7e9c0729ffe05b2103": "67", "ff808081477bd84c0147994a140b3c09": "17", "acd0dd6fc0204b27aa4c90b06c86c5fd": "16.875", "62c111fafd14426ab5e57123de6c6773": "Error in executing code: name 'a' is not defined", "c32348a27dd342e2914f8539f91d3817": "9", "c1c2d439a6eb470c8ea28a1900b62475": "29", "cd7c3c8f60cf495cbef25b38e18d713f": "550", "2a314ef56f474d75b4f3ab79a4b1c807": "42", "18cf34cfdd44443e89dacb6350851e71": "2950", "e9796fb01b9345939b903c54f5f73a60": "134", "5361e90804bc4f0d9c3ad762076a00ad": "Error in executing code: invalid character 'ï¼Œ' (U+FF0C) (<string>, line 1)", "9f86fbe0b3944df786d754e9ccfa07e0": "('Xiao Su', 48.0)", "08cca5d8166b4b00a9611d8d38517bcb": "18", "c2e2c89589a84f6c8c6867fe95e69671": "150.0", "9a504b0fdbcc46deb8c23ed0488254d8": "20", "fc564da98f484bfc8e1efa92670c76e1": "Error in executing code: cannot access local variable 'x' where it is not associated with a value", "ebe388b1e4264b7ab8826997cf7bfbb5": "560.64", "1312b65a99b64a8482f3ee051cd86f13": "12000.0", "e05e02cd5df44d68a1d27e81df816fda": "18", "2aa085d1031f43918fe5b2ef94042060": "7", "fd4ff992b85043c5b1b7692f113a28c7": "62", "f16112235a694fe8a4eb3df2a84ea974": "-0.2704", "b38cc9c360314cffab36e0c7126ee0b1": "-0.2704", "011e6e5274fc42f2972be053f0b49297": "9", "1cd7c67c72c94068a3c63797f0f9fa8a": "[677]", "72e245a933964095b1b76cb215aed96d": "5", "9bd5475862494d93b474782bb88cf35b": "7744", "0fb70d525e454736bf5381691de44c44": "14.0", "5b40ce66bb6a4868b5016c7f65a254d2": "6", "0259971e7b5245069bc9ba281194de05": "40", "719a82b7fb1b4d39946fdc434ab51911": "34.400000000000006", "4662504c7b1f4653a73603a028d0d982": "10.4", "6277d69026534705b1071be3358080f7": "12.0*t_a1 - 14.0*t_c + 32.0", "0904b3c45b394252b224c178fbcaeca5": "15", "32868ca3b1ee43b4af201523bed24179": "88/3", "8f2971a8f6bb4b6c846d5e732a510ea2": "-1.00000000000000", "8e2cfdf30c274a55b452c24d1c3388c2": "1953", "91a544031ce246c08e4de31f88edd9c4": "Execution time exceeded the limit", "bade4946e8c3449a9abc4b57e70edad8": "44928", "def94589ace2421a859b401e11cf4a5a": "Error in executing code: list indices must be integers or slices, not Symbol", "e3cbcd947256432cb224b69d8549bbd3": "1616", "422822f1ddb44a9dbf78755a69666fb2": "21", "c5e5e1cd3cf845a190b7737841036ba3": "-36.0", "b0d355c6953f46fabee3078f98cd2de4": "Error in executing code: unsupported operand type(s) for ** or pow(): 'str' and 'int'", "6d25240fbd144b1389c487dd2370a820": "49", "7bebe828c18345d5846a020655305058": "14.0000000000000", "5180b9f44a00498b9cd9a9e6df1d2891": "361", "31f9e479f199474f980a728f2fc0ab97": "3434", "837e7752b0914ac28b6826d22392be74": "3", "f6d4ac7b3bb84b48bbe60600fded9eb5": "(3, 1)", "949bc27d20eb4ac4aca53b333e985678": "987654312", "81b84c1789ae41318656acd977cc3087": "819.0769230769238", "ff80808147e705d80147f10059561627": "Error in executing code: list indices must be integers or slices, not Symbol", "78ed63a78ed04da78261091970e58888": "5", "67b7ed225abc43f993d8b74aafd66758": "2", "9e5bcb58e62c46cfb927d5f9b35f45de": "280.000000000000", "6e491abaf68b4717a4bfeced3a41b421": "117.0", "5f9c64fa778c442980d4cc7460921bf0": "180.000000000000", "4c9dc544323248c09e96531a1a1a0e05": "75", "6468c30070ce4a5fba44c3dc52f4bd6d": "66", "ff80808146ec1d880147094feda41a37": "None", "341bd09ba806422b92fcb192f8d3717e": "12", "3a4fade0c55546ff92aa812e07cf0ebd": "1", "63aab99d7bfe40e5adb0afada213bb40": "7.68000000000000", "8096faa17bc749b5841918b3da731125": "Execution time exceeded the limit", "6c971e212f0c4f2cace43a155cc48042": "0", "1b947f60a9cf403894ab3ead95fc8fa7": "-486", "aa9d261889084574bfcce270a091fbf8": "269.3993318477238", "24c0e34abf9f4f878295f86b8e6d3185": "None", "47f724a5987743b6bde2c8f7bc59b898": "180.0", "de0012d3486a473f865c4ae5d0707add": "Error in executing code: list indices must be integers or slices, not Symbol", "a8e4bc2372c84c12a3d1e87b0fdf2b30": "59.999999999999986", "e646064ee430442f96a71c66e17bef96": "15", "11c04832c7094a9da1de4cea58c45238": "80.2211055276382", "a946118ba5e94bdb894bbceb6f59da0b": "165", "ff80808148c43e7f0148fa959471471b": "1727", "bea1a0f68c364ff585b199702b9a7f3e": "12", "865314beb6a24304ba51ac25c3a57e96": "Error in executing code: name 'n' is not defined", "55ad3b1387714b7892e61d0deb886d72": "28", "24867ee226f14746b63baa5fb765fcdd": "15", "96fbe7a43e6f4673bed2d8d312410a8d": "22", "ada39a76e63d4adf81a2cbfc48722f90": "Error in executing code: could not solve Mod(candies, 4) - 1", "d8d1c3225607431799e87eccaa26a8a3": "10", "ff2fbd86fe964e17a0dde8efe1db4875": "2116", "1bd7b917729e4783aae3d7ef1afc3516": "0.577350269189624*n", "218c2972f2d3410ebbc31d8e27f60779": "-8", "88ac52ebaad24352820352d58fe5449f": "Error in executing code: list indices must be integers or slices, not Symbol", "44cfc607a25f42b6a50df8f7e4ea0d0f": "1200", "7e99bc8ead144894866db5f2f5f7b5b5": "2", "122a0b90eab44e54ba75a3f3f016fc8e": "Error in executing code: could not convert string to float: 'oo'", "a6503ef2b14e46fa975c88b912065bd9": "-1334073", "2b7aa3d499ef45b192a2e3ca1b332499": "40.0", "c5364eaac5f4409b84859a08b6f043f6": "5", "feb63f91a72f4f439b975096ddbd0913": "Thursday", "2067a6f2e33c4d7da3b87c8553d1a1d7": "250.0", "83cb8cbba77145dda87babd4f036178e": "40", "1f076dee132049c690554cc4cd6b0b59": "76.0000000000000", "090d9c2c045b4db9ab3310b99bfab5f8": "244", "34e341cd8f514925a07e1ec4367f1c19": "52", "8738fb4631a84d3bb8f708ad9b109d27": "13", "b5dd0fc2cf144f62925d36532d214eaf": "316", "97ce4ffe87cc4f779d2746eded539720": "1109", "21c310a3f3614715b5b232df2ae2562a": "3", "9b1a43fba2fd402da75802d30b595bb0": "None", "e43f8eca30e644edaa30199081ca9899": "25.0", "ff808081465a848401465b41a16f020b": "5", "323b35b68bbb40aabfbb6cb48bdfed88": "8", "ffc2a75a83324b85854dfb8b4d3fc8ef": "1000", "0edac86d696740e7b8da68533a07c0c0": "Error in executing code: invalid character 'ï¼Œ' (U+FF0C) (<string>, line 1)", "35fb23368b184e56bc745ec9e94fb081": "1683", "5f09066c7e854be3b837de0aa28e9b9f": "Error in executing code: 1 is not in list", "0b34106fdd2a4d4ba3655075f3e1041e": "24", "9536ecf248df469e88abb1fc70d68f48": "5", "4c33258b63ba41bda70d79edd7856338": "17.142857142857142", "7e7e49cc0731463bbbffc9544b88dc22": "99", "e08be021ef934397bc9a23fe84d2a398": "-5/2 + sqrt(449)/2", "bc62d33200af4905817f56c0d3fcf745": "46", "ebb6de4412d2484aa879d5f63bc5a971": "None", "f134d3b478f6425ba4521bbffa1d7f64": "51.5000000000000", "7856e18bc03b4506bcd376b626387917": "3465", "226b40978c7e4d92806980cf80210f5d": "700", "38bf02a5fde1435c8769fa574f4013a9": "114.846625766871", "f1e584ad0f0f4d35a13099296c407ac6": "Error in executing code: invalid character 'ï¼Œ' (U+FF0C) (<string>, line 1)", "6fad7b80ee9e48f08b04ba85c361ea47": "830454284334833803681139138794218973382048246540468092168119694518557429324816944448577878189637688918274241091486743357542342381808069504518403339839219406191377547450261871570437664857606871300009876304771812003062188277457328384555527970850509346385864368596402255682746122559483082907819881484133260878480618285889351885867808273703268490528091457628503145645879717861134374098248951598065760071267787254099464981679098778720037187006898187142045906907240320879761681766734914341273814144745025506814963424353015378094648914232836260068520009516567593980026940167844700598425605277321482963039925854001371213203830718174213626999743775514253311413035605477548082943420975822182162775012956346403853638715832160180540309333112208781366860845776384249989679078569752786930056237062143254240425747261576499585458864220198660710375714819405473763712307154666117988782330846613391/409254318735421372874527513713809849729135059223982154744686910391244881751394287792064717538513501909093551073331105901230174815690870254022597927796335026690598911658288578341662007257908728685152761650582748164977706081859581162971618587292791162956045102947117094844113969603097500003652004069652979380609518121519013531548885927853149410724755210783428395488365803795111980933624569399933400969497574721790682373349842950967442946949750794524393431836515674176033082971320894446597931131516693687546474012255765758283940350898733234638365606173236127739051742487602390618454018049479926800452950875570239516276819871570674576851400791100528044895551810310590444123249637327298475483510172556378112704981184569797419716363712359628331775989191307093772005846389088398901747521145065831525586976740612039273283797156150977660434534795320274675464655132985044254833228160000", "65e594f8dfa446b890b55abf655e5da4": "32", "6434b64b010a4cbc927f0c7f5b55cbb7": "242", "30b4aad095d0414283c9520816ccfdec": "11.52", "60ca991b703740cf99eb7b41c3717383": "21", "b3e19d6bd8484046a90f798bb78b21aa": "31", "1c9b0c6ea4a84af485e60936cb2f5762": "2006.0", "be7725708784469da4bc6c5eeefc9303": "35", "454d9585d807426cbde5bd57650007a4": "4320", "ae1f01d9677546448859d3d819470a14": "1.33333333333333", "be43b50ee87641c79e633ced39b10bb1": "50", "00b7c6ce7d2e4d9b8ee6c03725207c9f": "0", "63b7b579c2fa40e2ab490124e7534ce1": "None", "0c85b817c58d419baee5dd46a7353bef": "124.61538461538463", "ff8080814518d524014526a6dafd1939": "5", "4a9bdc352bac44e693837e538221be1c": "59", "cb5483ce9d674cf899deac276da0c16b": "229", "b4ad1870dfc347c4ada957a5dae6d495": "32", "3c34e25579b243c089740213b5418005": "337", "ff808081466b745501466c2737dc009b": "12.0", "27a336564161415f8e3c8a60808ab8bd": "3080.0", "40d93808dcd045e6bac5874a6185761a": "1100", "10d48f11c885430aa3824bedd6746e12": "180", "565a40d2c5e144ec96369253ead6bb30": "Error in executing code: max() arg is an empty sequence", "67571da2a1434646acaa783898a31a38": "Error in executing code: ", "9162e0d2bbf64ac2aad51ef4cb1b7718": "16", "705cffee46a447b0b12de9a1b3ba0a6b": "1", "d063b8b22307408d8dec6e8519550157": "882", "da810dd496774139a785b99e71df0d2d": "14.5", "deb87211dc3148b89b6cf341e9e72bfc": "5", "a912c22925a940939de3235e72fb528a": "9", "7cb15ed36ebb4ebc95f892b53c664656": "660.000000000000", "25ed38187c3146e7a9f419fb5bb7d73d": "1005", "eaa5610bfe294d148c58a79ed5c8ed06": "8074", "f9267db35b444e4a95f623d64f98566a": "18.51851851851852", "a8e12655b5764050999c6af1e0fdf043": "2420.0", "f73958c2d4e44a53a9ca404113bf0efe": "76", "8aac4907519fa10a01522c5dc8905645": "7", "f4d453af0e8448c3bab58d0679af896f": "Error in executing code: \nCan't calculate derivative wrt re(d) + I*im(d).", "859f64c2d3f8400d9794428beffde5f4": "92", "35ffb22daf5942cdade1d326bcffef78": "0", "c50b208c6ec24f058c112eb8ba517c85": "214", "bfda398134be46c6a41fe26b0f34934a": "24", "57c9b8ec1ac84baab54cd8b3a1f0c09e": "360.0", "a93d9c27d61c44e68215ed798edd3381": "94", "51bc0a530aa24209a85b1849213f9385": "9.090909090909092", "84d386f7534f42ea923bbf9e406b80a8": "Error in executing code: name 'symbols' is not defined", "3e627694eb064baf972163283788bf08": "18", "cec0627fd1c84be1ad72a382c443e224": "38", "575c6bfc84714f60954dada63ddd4063": "12.000000000000002", "b0c7854923c840cda1e4199adb02ffbb": "1281.52380952381", "572ec22716e5422993c7930cb6d2433c": "142", "7b20423e99934b6eb758cf850bfbc4e7": "Error in executing code: 'float' object cannot be interpreted as an integer", "e056d03012bc4cc3b03d94d13416a771": "0", "6e7a47812123471f9f8262195153bcd0": "124", "5b8a1d832ef1492fb48959edec50bfa7": "23", "9eaa8ceb7ec24024a588c92efe5ea5dc": "1490.0", "3a5e8c80085f4a489e38044ce7207d23": "8.0", "0e798af328a04c498bd98cfacc8d89b6": "Error in executing code: list indices must be integers or slices, not Symbol", "25355f11d5bb465dae16acd95cb5c986": "486", "95fab095fbac4af09e8aba245ce3ee1f": "33", "40272a554ea249db8d8a76c9668227ec": "252", "12a012c72c7141979758f9be5dc3f2fb": "1", "1c3eff001c9144f08c9d54f2feef8026": "8.0", "fbec7ba2826b408fb9605cd5ce2e0115": "17", "bb91eb65c72a4fde99f9f9b2dc9d8a74": "4850.00000000000", "de9a450430b2407986d16cbd9d15380e": "94", "b816dc3f46d541fbbcf19563198a2f3a": "0.5", "59ee2d9b6d80462cb1547ba106331169": "63", "8b851be7d9ad4ca9bfa7bf1f1bddd0b0": "None", "4972b8beed7747fabbf376af5c7ea11e": "60.0000000000000", "96aa2754040a48f88ec4adcc1461c786": "3", "21e4752eabed4a05afcd2ba327183319": "-14.0", "d298440673074260b8544f23935844e8": "2431344*(-1 - sqrt(3)*I)*(225416942 + 333*sqrt(209692864815555)*I)**(1/3)*(62564811376 + 18421264*(-1 - sqrt(3)*I)*(225416942 + 333*sqrt(209692864815555)*I)**(1/3) + 5476*(-1 - sqrt(3)*I)**2*(225416942 + 333*sqrt(209692864815555)*I)**(2/3)) + 2431344*(-1 - sqrt(3)*I)*(225416942 + 333*sqrt(209692864815555)*I)**(1/3)*(-62564811376 + 18048896*(-1 - sqrt(3)*I)*(225416942 + 333*sqrt(209692864815555)*I)**(1/3) - 5476*(-1 - sqrt(3)*I)**2*(225416942 + 333*sqrt(209692864815555)*I)**(2/3))", "742af91bf16a44348b30e6a1ee2f378d": "50", "ff80808148c43ff50148c9712e9305f0": "Error in executing code: list indices must be integers or slices, not Symbol", "f2833b13d9ed41c78b6e50e017a56d05": "0.0", "a57f4c5e30f14340a83cb60395a1ca75": "40.0", "020542432f844434b3f117ff42be5c10": "16", "ff8080814526d2f4014527940f9503d2": "248", "901e9323d3334fb8ab20e862fdf31bb6": "10.0", "c2ebcd3a515e44f9a8587d16ba26e402": "-58", "e324f4d2c87e440c8d04929c715c76fb": "Execution time exceeded the limit", "13d543759d6f47d9a032581eb38477b0": "Error in executing code: list index out of range", "ee81c584fa9e4b4bb10df4598f44b784": "10", "8f5727df3b7443de9c0eeb566d19f701": "17", "2a5fb981f07340cdb460ecb29efa4a1b": "851.0", "2122da19bdd04dddbb2315c25b5b921a": "20.85", "2a3f43792b0a4f16a9dcf75def3a5bca": "Error in executing code: list index out of range", "e564e7a472d441609fec60238b489bd8": "13", "ac8b468d87b54199a0c0b2628c3d0063": "25.0", "ff9460150e684dfeba827ee1622053f8": "10", "84a7c472c5a64738bc22172954b2d599": "102", "bb1c28aef84d4ae4af52b7681f4d4066": "0", "804da5b3fef04114983fb195ef10bbf1": "999", "ff808081488801c601488c229b7f0e07": "Error in executing code: list indices must be integers or slices, not Symbol", "9805229140f645f69829e7d2e41c7a5f": "24", "0b6769c08edd49f490f9f21fc17ac435": "181", "ad15401342b34b1c993248db584b3424": "Execution time exceeded the limit", "ddae66a7d62546079ebc189c0e8620bc": "42300", "df13a28d27894e838a87c85d98008166": "56.25", "3cad859e16f74cbb85a4144ebe6c57a0": "4832", "aeb89af1d573406c98ffadc542866efe": "03:00", "e86f7fcbf27e4167a83b5a17a6ebfe17": "Execution time exceeded the limit", "001f9992a35c4ca99a9ce7feb30d6272": "2", "fa0053573f2f4ec3a4d629fadaee0999": "38", "5e350c3cad964bad9196bcb8cea63985": "0.0", "759a8f322d0045148b73c7096c33267e": "120.0", "a7515930b667498eae6a46b5ed4ca38e": "Error in executing code: name 'Eq' is not defined", "8aac50a74ff4b162015023b0e60f6f06": "7", "8f8e8041e4e3434a8c44f36aa5f381cc": "Error in executing code: min() arg is an empty sequence", "d3ff56f4abf2418bbed64c24e1c6739c": "1.0", "b66ffbcb58d1499d821a660fdc81d429": "3.0", "6b44cf4c486a427fb2ffea2f07ef88dc": "35", "50b1354912c6490d826594b5f355f0ae": "250", "818dd33ad9bc43e59bf94bf19db908f5": "20", "1b52b58772714eff8c3cfd4591a61013": "46", "11c61928ff594949a3d18bd221b52a34": "77.0", "3f8c62c14d084f3fa4808b445f571c57": "Error in executing code: integer division or modulo by zero", "efb3089721044ffbb55a8a1554ce0d8a": "1146", "4d81404f17ae404da760e416229a152d": "Error in executing code: list index out of range", "740a5faf9c3b490fb5590c657d56b6c2": "75.0", "f76433eb36d34248b2fbc52c6d6ba094": "22000", "59786f02bfde418bb6547cb124fa63b0": "3213.0000000000005", "fd058f570b4747c8afeca31848662fe5": "85.0000000000000", "ff547832069f4081a672723018adc33a": "174", "d023cfe694e048a8aede7c70740dd0df": "983", "9f7ee8b2090f4b88b412b6a05e0e2638": "32.0000000000000", "aad811a2d066454c9ec11ac937226f32": "11100.0", "042101c20fb34f32b837e5358220db5e": "6", "d471bdb926f64d15830aa34a9bb48092": "21", "79117e00a8cf49bbb799813185e049c7": "60481729", "e0b109d5195740e39e567ea6b51f7c1e": "25.0", "8e3f33039a74411c9e1bfb64cee3f9ad": "2017", "a7ff34e420d0444da0df1fa40d0ccc0d": "129", "6e2cf87640134dfab6d242b8de15c277": "4", "0fb6fd02fb324b55957de38795f52020": "25.0", "224a900be28241f6b957403d268a9646": "26", "337c080be34346cf8baed54494db4b45": "3", "14c92639a8c54cbd9f0a26c452fc27ba": "-1080.00000000000", "6f3422b8b23c417e805b7c3d59ee226d": "17", "5afad4f14a2a4cafb77c3d66ada6a354": "144", "ddf680da6c5f41e5b93790d083a97b24": "2", "2f1d4c0b5f344883ba6f782c4cf57de6": "33", "d5fe189ab7a44c63801f4e4f5e84349f": "173316", "4ae2516667204c62944ef34b93da0713": "8", "508ae7e1562744cf96c4c62eaeac94a5": "100", "7003558a2c6f4361b9b8087d026cd921": "20", "6ad8787cdb1d4cb5b2b543e4f0b97525": "-60060", "8aac50a74ff4b1620150466a2eae257d": "32", "a5257e14d82843428063ff52c1a1a92d": "13.0158730158730", "37c41d622efe4558a50c0557bfcaf89e": "3.9999999999999996", "16ee86ce672a43968d6eded8568a49ef": "0.0", "54899cc585e446e2be4d1525b6893bcf": "12345678901234", "ff808081481c1eb501481f72c92e01d3": "1", "ff80808146dc2afe0146dc50d0080171": "120", "f917cadb9ae546479dd765d12d0c507e": "3", "8ce3b827bf034b5f8a5db39c4d8212b9": "12", "d7fcc7ad695e4821bb5f4c367914d60a": "10.5", "ef2691e34e86486f8962b7da5fbeadb9": "7/2", "d226409c59e643388b4371a0fff46c8d": "20.0", "012dd1c9a14147c6a3ee7cafc8dd9e23": "311", "6fe9001f37da439f8a09d58e0ae8f07f": "36.0000000000000", "803fe3f766cd4a2f89c13fe669b7e620": "1008000", "816d1bcc9dc4482eb30e5803c4853c5a": "1", "47136264b2bc4a5b884fcf3c6400797a": "88", "66ca55ded87e4e1b86c9648b102d78b7": "11400", "459ee990c74e41fa90433df42bbe3400": "25", "c8d37b4ab0d34758b2e8e3b9c6dbee41": "371", "4793ad505f874f9d875b53bf67a16efb": "21", "3d306544b5194223b805aabdaa5ab0f7": "94.0", "d22e29070bc94ff9a00a8e807e96398e": "1990", "15ce3372cd6f47c88d49cc4964669af5": "12", "005d4255d9af4aeba6b7fb3e7582b392": "110", "b3d8483f2e41470dbb45476a7b8698da": "6904", "27e82e526349463fa6eeb4f4e4abc574": "4", "34889ec7752c4323892f43cc4755781a": "17", "4d56a4fd7a5a4dd78e3a66774beeda36": "0.006993006993006993", "594430d2f6df4c779310a327d72adbd8": "18", "4082db94b3404420a9224355d6b64755": "115", "3d1cb0e72b3441338bafda7467c154d2": "8", "5c67abaa82e349088d8eb363ed0a5069": "3840", "255ee470d4e34709bce81941adfd25c5": "30", "4294d421c26d4c4a963910f17b46dd38": "594", "f686f15adf724b969b01a219ea0469cd": "-5.0", "5c9c300d919547039fb1051c235af954": "157", "2270ac0ea84a4f2d832695d04124f71d": "Error in executing code: Inconsistent work values calculated", "67e85dba93884517b87e3bdac21d2d56": "5800", "a5e9fe188aea44c6af03c84a8b76693d": "Error in executing code: tuple indices must be integers or slices, not Symbol", "29ba6ea0d747418aa4dd70bd901ab3fd": "120", "25f4e83546b04610b667cd830cb67b50": "150.0", "94cc7417b4ce427d92ed38c727a5dbee": "1", "9874ad233214494c84d293747ca80a2f": "9.100000000000001", "97bd1951266e4868bdf96a35130925c6": "18", "2c229214825140ff89a4900b4e568387": "145", "4443228982644ce19fb124c76f3effa4": "499950", "83853482bab94b528c56955ccb98b68c": "Execution time exceeded the limit", "ff80808146dc2afe0146dc4e12e600ae": "253", "31273657bb054d2b8dacec9ef926fabc": "Error in executing code: d", "de4baa42e9c04ad198501c0293c3e401": "5", "de29c6f99adc488abdfe6275d7510e17": "Error in executing code: min() arg is an empty sequence", "4d6c70397f6f4528978df33cb9a637f2": "30", "92febdd953b84bb0807a72aa17caecad": "200", "9519d89d0bdf41c383fc301efa98839d": "{c1: 3, r1: 3}", "6bc8b38665d7447a9eaa902f6b8d8a32": "Error in executing code: bad operand type for unary -: 'str'", "c39a60a009f1483b864c0853f41c19a9": "None", "85c2ed69b8924fc6b04623144d541140": "Error in executing code: unsupported operand type(s) for *: 'NoneType' and 'float'", "8dbbde1d6dca41a19e8898cc734819a9": "28.0", "1adf27614819410fb3458292a6f93fdc": "Error in executing code: name 'k' is not defined", "c65f056f7aae460889b8e622d2dc7103": "1", "68c64e6e7e324535a6b45d6f8d9b81ee": "20", "c0ffd0cf732c42429d91543abb7b8445": "None", "d05170fbe18145d9904b490200641727": "6", "4f94a543792242ee8fb82e816a300adb": "10", "02accb7c3efd4fa1be15c4b055afa718": "69", "e523a35548ee433da48427ea1c458591": "69", "6352d8a384c047c9a53ead0a01770912": "75.0", "6c7e4635d6034d8bbae1d11238ee934d": "44", "b68f79d6430c4e7a8047db2a3aec9c81": "6", "46d90fa6e2f7414c81214d33fe77cdfe": "15", "c6012ae1b7e2439eb850d52cdb29c612": "6454", "3cd0a3ececda40a2b89b673096c44b5b": "304820544", "18c3398546fd4184ab3ca033a6afa6e2": "144", "2dc279e3858a478d9e88c58d862588d4": "486", "996d3638bbc14b1da493d324de405952": "77.69999999999999", "83aca47abe6445269f289dcfb4ee4fa0": "6", "9eaea2213b84498e95451d38c78385a8": "4.0", "d3b51d23ae49419eaa1cf93ce165261a": "49", "ff80808145d03a7f0145d0c5760a0073": "460.000000000000", "899d65ca28f9476ebcfbbff5cf93daf0": "15", "7c5016056fc04a738d91e53246e2d396": "Error in executing code: 'float' object has no attribute 'numerator'", "346107d0646b470fb4a2134e8eb1d75a": "5005", "0b04365f4261402d87f96dfbd7dd083a": "Error in executing code: list indices must be integers or slices, not Symbol", "ff8080814526d2f401452c90e9d21dab": "1", "2444ad8e2043461589a1ec645b830d37": "10.24390243902439", "ef72e44102274cfdbb279656b0f398a9": "111105", "e971bc2b72094922b8fc75f88ee524a7": "Error in executing code: can only solve for one symbol at a time", "9ce52deec0674f86b4471c6d5fc2435e": "3300", "de34386a39aa4cab9fd1b9f053503662": "538", "b8bea1d72183409a8509037aeae5d209": "3", "5783f0abc14243e595e147f63e26592e": "19", "acfb20fd869e45f7a005e1940cf53555": "Execution time exceeded the limit", "155ebf1763ce421c92b23892af99e5c0": "21", "8da4c25b09e34a55a72af8ad33b0ff8f": "Error in executing code: could not solve Mod(x, 11) - 8", "a21d39eff150402dbd3b039f0d9dd63b": "1657417", "a1e87158de6145358f862e9aecd48034": "233", "52ead9f46b2446c6a28247dc8a7728fa": "0", "69422e705f4a46b38bf6f1396f672202": "9901", "cf7d00a4b74848a28ffda98d5ac083ba": "120.0", "5c254a4757ef4e33b406a8169f2def0f": "208.35", "5d4f3d5e43ea45c1bce928dcdd9ff940": "Error in executing code: name 'symbols' is not defined", "3cc8271a20f3420f8dc4ca6b4650150a": "2184.0", "8bd3074542f842fe9c71a58eb2180dc9": "120", "444590f9a6b14d6483cdc20d59228db5": "1685.0", "8aac50a7519fa10a01519fcbd3a10020": "4316.4", "73a59c4f4af24638b723ba177472ddc1": "450", "83644d5cece84f20901d77ce374c7881": "(26, 8)", "315d05af93434f2db7ae08b1caea0803": "42", "8943441b57ab4eb4888c261973d528b2": "16", "15af955faf7d4d8f831b366b45e7c944": "12", "437101fef4d44685b5d33e330affd7fa": "4", "385a332049c34548989cd08f507be7ae": "-14.000000000000004", "2c7a94fe6b254b2189d5457567b7e95b": "1", "7a92fc0ee7ec4a91b8839658e69f191c": "19", "ffcac310778b43b59e2a2074f2c4c887": "26", "0d9d49ac0b804361a278f18556b2d2bb": "18569.36798150462", "4e582d5250244004958a047b78909006": "0", "2fd5382305614e8595b56131df6ac394": "6.0", "8f3e5da50f1a4d8393a017863c3fd77d": "34", "31415bfda89942b0898a6316b63ed9ff": "Error in executing code: cannot determine truth value of Relational", "ff8080814a85cc99014a86a668b603eb": "50.5", "5635259dbaa347b790cff9f665a35ad0": "33330000", "a411e65c200046a4ae96c0e981b6d4f7": "5", "7762381c263e47439359f2320c7e2f3f": "1100.0", "4011e2efe3ef4d378c2a4dd214474e3d": "4", "489db01af66f4e938362e5d904b73542": "4.00000000000000", "add54947ebe94b508528daf6dab34e93": "21", "d8a29c2184834676b481a8aa80e4ac1e": "0.06755958964189013", "c31896fe81cf4f978ed35712eece6d4c": "18", "cc3700e6fc814969a2dfc3d3c29b9f65": "6", "fa7b0ace080d4a69b945c63d37d0f332": "9", "9aad06b977224f4cb5b642946372b528": "1685", "8a8081cd7b6341e59ab18b09fec334bc": "400", "454de896deb24d69ac4f04852d389d93": "720", "b4592738a5b64512babbac0902385b1e": "-2", "0c73a2d5ee0c488daf95dba0608467a7": "1200", "4c50da8b4c304b2ab32a3b80e4da37b6": "150.4", "6791f8ea449f4c349347c0f5e8b7179d": "60", "ea06b8922d60495ca82eea0624352838": "40", "0de7561958d44294abae5251ef6eaa46": "204/13", "939bf2604a634a508ba7a67680011cb1": "3", "101fc3d5a9044fb3b513e66bce13a17b": "15", "badd4172c57e44a289eb591ea1ce1910": "5", "1a834a4594ae424cbad4775404fdbfb7": "-2.0", "3564bcfe8ff948dda829705bcfc57e47": "11", "77c68eaf66d94858a01f44014a4b98ff": "15", "3585548b16894c9ea7aa62813eec51f9": "121", "e62c2ec864164468b3c3c55de35a12ee": "Error in executing code: name 'symbols' is not defined", "c713c2172dbd45b98559f86586d58aeb": "403", "3545122f15d8482bb023e9b1e2e3455b": "2000", "c70eaea66d0b401bb54d00eb53fe3aa6": "2015982", "8a3baadfac63442e86368287a0793fe8": "108", "8beb7e67d06b4b3286927850820109f8": "255", "52163ead22be462d814891e79f428e4e": "Error in executing code: 'float' object has no attribute 'numerator'", "854fa446f8794026bc84c94225b5e559": "26", "6153fab9deb343fd9126a2f8a3f285bb": "15.909090909090908", "8f74f0fc0c4d4c04b6fc3b72039d5bd4": "1333332", "bb39711c20ad499f9e2d27521309c337": "675", "285a85eb24eb4da59f5dad74f8366f53": "19", "ebb724af5a6147c18de8360694959e92": "Execution time exceeded the limit", "1437b66064b742c080d6f38b018a01be": "7", "afb539cd7c414f9a8390f27a38df93a9": "Error in executing code: list index out of range", "ee80eba89ede4384b45578b3a910950e": "1512", "ff80808145933e8e014598401a3408aa": "144.0", "8f9d92a2ca814827a9014b9cc5729d20": "6", "e9d058523b6d472ea91adbbc4e2b56ad": "10600.0", "11c4b5f33e1642aeb8595a7caa816eef": "15", "97d330bd7b1d4b13b6467f59e3a4b031": "865020", "c039ca7e20d54329b9af68cb544efd86": "log(6)/log(2010) + log(335)/log(2010)", "c61a555300c64f2cb5b40fdb631007f4": "1200.00000000000", "23454aa038c54b6386ce683773bc89df": "9", "4da8d977cad14b58a62bb939d92710ba": "-1544.08513763108", "17a85367aceb492aa509dd4fd54f9d2b": "21", "f96cd25a997140edac7a867b30a03e2b": "2", "02d30a96bc674f64af597edf6887483e": "9", "30a2e426eba445f19d807c4e231db7be": "-2", "b4d80811da004356a2ead8c529b7e3b4": "4.75", "161b7427be5a484589b8addff24338e5": "75", "9d2c8ef702b24263ac51a193d780e4fc": "Error in executing code: list index out of range", "faca0a8de42f4a37a2d293fa42ddc97c": "63", "89b37a40a6b44b36854e83799bbb0b0c": "76", "2c9d39b161644196a612b18ef52c8c9d": "1029", "d190e91d2708420fa5b2302aa18306fc": "66", "8f140c4634314afdba4f8faaf7cd2f08": "53", "ad30615ba9e94d9fb7b83232930e1f5c": "36.0", "cd48d65e7b7148848b2f32a0b4434295": "13", "d36bb25060c047148be5da17f5de5369": "35910", "c2abdff617504f49b8eaf82c575c8c3a": "42", "87077704e08a4135a3573440847037ba": "30.0000000000000", "f9e514d2769d41f98be48c618dead604": "17", "4cf150330c1c430cbdbddefc96accb52": "Error in executing code: Equality.__new__() missing 1 required positional argument: 'rhs'", "57e3e8c4b3a346fabbb2f971970927f6": "None", "9e2b53c723814dc1b90b58b5ec1ab881": "657", "65d6f04260114efaba9789b228d60cc2": "45", "4ee6829a4b1840f4821c9746fec17858": "125", "54ff5316a04a43d68321a0af93865ffe": "Error in executing code: list indices must be integers or slices, not Symbol", "18e828a532344fe39f64ca96ed618a42": "2", "f5077961ab044e519c11bd07bd0adf73": "7", "962dcf94f0dc420dab97d4857bc8d14d": "5", "3cae23dbcfea4562920178d9b0126fae": "16", "7061044b217b478cb99feb80ba2639e6": "None", "c4523d0949a54b9bbc179075acdc66cb": "27", "efe3a8d49fd54b23bb5ff22f0bb4662e": "30.892400000000002", "ff8080814638e13301464bda805c1dda": "1300.0", "6f8a829fe9194d52bb36ffe15d3c75a1": "21", "cb0d69f7232b4d8a9635a05d1e47342b": "0.400000000000000", "ab6feaa9a1054aafa500b7c46235d84c": "18", "ed6bb1e7a7eb4c8c8cb823be4c261629": "26", "1dc1c323252144b28619117df25b9d85": "63.0", "925cda57c57544a0969bb2ac329ec079": "30030", "5bac46ab43bf4da496a3956f4fb7f60a": "45", "af30e6a334a643c2920f2d82adbf7556": "46", "8a6dcd42ebe546ba8017956d0a2cf792": "13.333333333333334", "3a77f29f1a8c4b09a009a3364b8f77c0": "54.0", "6d61b36f96d34c1da16add493e90d02c": "36", "54476fb015be4f5699be3c1454d9a0ae": "Error in executing code: list index out of range", "6feda14d3ba5465fbd96139031061399": "0.9999999999999936", "27be3585003f48e5ae7e1dd945a4c13e": "12", "0b4c7d38fd6a44e981ec89f5dad7f92e": "None", "6eb6a8b8ee1b4198a1ea5bbe8bb458ce": "Error in executing code: list indices must be integers or slices, not Symbol", "ff808081488cdfd401489839af0440b3": "5.099557522123893", "9b480c12e2984ac09f12ee784dbab4a1": "10008", "688287eb54324a3d9e4768048d3334ae": "0", "a1159e8e153d43d389bf59fc514aded7": "8", "09c2474453c7460d9e4d7fbde3002ca4": "498.875", "00b3a5d452be4b0cb84c1b9625e86ecb": "101.09999999997672", "c226279aede2409599520aa9e93f1760": "Execution time exceeded the limit", "e8097706784b4a1ba447b151d107424c": "1736", "6aa98d518a494589ae00bb3b64d49e41": "10", "e73a2bcc816c4b659a7b1108f5220726": "('Xiaoli', 12)", "c7d157734cf7428e8496402a846c4ece": "11.83625730994152", "e524f057686f455a94179b568bf6b869": "-2016", "3f6a7fa722a148c8acfecf6cc20d1c4a": "28072", "ef3dc5fec15b46eab4f871d4c0bf060d": "80.0", "016b6caf0d714493802cb62fc11b5a67": "500", "f0ae71fecdfb4b47ba58d207a2187e21": "69", "81c72efcc84b49f4a33513be6912430f": "128", "ff7066c514fa48e59f7c42bd4f7324dc": "125.0", "d9f7243ccff543ab9337162473e0e6a1": "20", "1d94705653544bf79d9f8384428e5aa3": "Error in executing code: 'Symbol' object is not subscriptable", "69191c0c2c6342f3895214551fa83f21": "-(1/(9*(sqrt(69)/18 + 25/54)**(1/3)) + 2/3 + (sqrt(69)/18 + 25/54)**(1/3))**5 - (1/(9*(sqrt(69)/18 + 25/54)**(1/3)) + 2/3 + (sqrt(69)/18 + 25/54)**(1/3))**3 - (1/(9*(sqrt(69)/18 + 25/54)**(1/3)) + 2/3 + (sqrt(69)/18 + 25/54)**(1/3))**2 - (sqrt(69)/18 + 25/54)**(1/3) - 1/(9*(sqrt(69)/18 + 25/54)**(1/3)) + 1 + (1/(9*(sqrt(69)/18 + 25/54)**(1/3)) + 2/3 + (sqrt(69)/18 + 25/54)**(1/3))**6 - (-1/2 + sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3) - (2/3 + (-1/2 - sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3) + 1/(9*(-1/2 - sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)))**3 - (2/3 + 1/(9*(-1/2 + sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)) + (-1/2 + sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3))**2 - (2/3 + 1/(9*(-1/2 + sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)) + (-1/2 + sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3))**5 + (2/3 + (-1/2 - sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3) + 1/(9*(-1/2 - sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)))**6 - 1/(9*(-1/2 - sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)) - 1/(9*(-1/2 + sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)) + (2/3 + 1/(9*(-1/2 + sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)) + (-1/2 + sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3))**6 - (2/3 + (-1/2 - sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3) + 1/(9*(-1/2 - sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)))**5 - (2/3 + (-1/2 - sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3) + 1/(9*(-1/2 - sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)))**2 - (2/3 + 1/(9*(-1/2 + sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)) + (-1/2 + sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3))**3 - (-1/2 - sqrt(3)*I/2)*(sqrt(69)/18 + 25/54)**(1/3)", "486d0ff2478c4f4b8744cc21b547e9ee": "-2020", "4b679d42bd9f4d679ec96863e62b2baf": "45", "ff8080814638e07e01463de895730537": "3", "fac592fcbc90448abeb1056eefad4a87": "196", "9066eae6210f48409bda3f5d4f4ba691": "1028.0", "a4a230303bc9472c9d495d812010a6da": "1716", "11f95ebc63fc4568a451789a3c9b47ef": "85", "88502ab001e94f40b7f72c28d232076a": "1981", "3ff8b0bb7ccd47a7a56d95d273628995": "31", "ff80808148880257014888a875aa056c": "7", "80640d92a9ed49d6982cc0c8ac388181": "40", "349ccb2bce6046519a34eb5b8cb00ac8": "[{a: -2/b}]", "d6c3cba5e3444ca68ae7c3f61e63b914": "2867.0", "9a29597123594350a29a51e6608e54ce": "3.2", "949042a9ff66406280b43a9efd1a76fc": "30", "2e3c1a44a978469a86921f12fd7adb81": "12345678901234", "71ae167ec3064ffebcda789c6cc04728": "23.8333333333333", "551a014790474e6695e74c17dc727610": "837794.65", "7c4ae6fac73343bda10bfd2e4de73650": "2", "ea6ce695b2854518a91575ae50e1c0a9": "Error in executing code: invalid character 'ï¼Œ' (U+FF0C) (<string>, line 1)", "72b5772e1fde4e9f817b0f794cbeedab": "5", "40a92d26ae744880942d28f72521dd30": "50", "5f5546a7edee4e21bb90554aee2ca7a2": "16.8", "3333cf8c75934072b8eaa76526a0840b": "136.0", "f9f6eadd44574acfbb40ae9fc74ef64f": "Error in executing code: v_B", "fcbd8cb4d1f240d5ad5b62a6db374a66": "Execution time exceeded the limit", "896d4d7b97bb4d699026df703127ca0e": "1", "c874009711274b2da4508e8c7cd837c3": "122", "ecf6c2979251461eb8499007b4a63a5e": "0", "5ded1b1f93f64b50a199e467ef91f273": "108", "d00a5a6fb40946dd89fc874771cc6bd6": "61.0", "fdceec7a04224a6399d457f412ebe3b5": "13", "ce102f39f7004b4882f4c8bc2c7a1309": "10", "a893bb04310e4991b288495a883853fd": "Execution time exceeded the limit", "9f17e9946c4c4bd99c945794732fc7a9": "107668008", "985d8bbc77ac459c9bc0ec96af29658e": "20", "cf22c7e0a0a54e8aaeb45d1e697ff80e": "Error in executing code: y", "feec408cd0464d51a78b8fa4a641fde5": "2008", "8b7dafba395c4eb2991c837be0388fa7": "4", "8d821864b55d4cb2b65e3fd89ca09bfb": "111100", "037855abe94847d4a1e232bc6b067e6f": "190", "9ca09faef93e4ebd9a584f3738fa6107": "9", "0554537bccbd43918837df356265f3a5": "33330000", "e97ee3b05bbf48f8ac345f1f0d21cbfc": "Error in executing code: list indices must be integers or slices, not Symbol", "06f2f237bc844cfea632030514ed3e66": "-1", "845fe3458eaa4d9b8fac0e444ef7d416": "5000.0", "70a105b1be8844979f8cdb9ee658e75e": "-1220", "227ace6c26b54215b8bd98ee2f7f0de6": "12", "21c2171b4f894a869efe66fc471f8278": "7", "1452ab09360b4820846af4e242dd5701": "15", "ff8080814518d524014526a68ce3192d": "221", "acd78324708d4c8f81de04eb05c81609": "992016", "8f2ba9284c53400098f7388fa4b01c9e": "0.2", "708b243df61449578ae5b419bce33cae": "Error in executing code: pow expected 2 arguments, got 3", "65bd9913d7a345b4b739f37c2ac62621": "298", "f17f558e564f4f4cb7a304187039fadf": "6", "893a6f3694c146c5bba25ebb016e5e8c": "105.600000000000", "ff808081488801c601488c22aa620e17": "140", "80507ac3cefd418a8fe7640d581e5919": "14", "60436d2006484105a0388260ac2868ba": "Execution time exceeded the limit", "a0b56f7fd63b4fe1922e40f73091007f": "480.0", "ff80808148880257014888a8dc5205a4": "Error in executing code: name 'maximum' is not defined", "9810197f97824c13a765f26f7ad8b316": "708", "68cb48522a4b4ef199a8d5d3d31e6dc4": "45", "f2394781ee3f495d90933d32f93fba2e": "261", "c2b5ceb7f58c4296b8b7b3cbca54d7c2": "4", "269f081d853444f1864e3d024a4a4150": "90", "18f2ec5372374adfa096041c4bd054c5": "Error in executing code: list index out of range", "3ab434218632421fb111c32af9ef67c5": "10000", "5699cf3cf098442b93b8f00905522621": "9001", "31475b1532fb463698d39c5b0d79624b": "-22", "f27030ecea6248a7b5eba155f2b935e4": "[3, 5, 6, 9, 13, 31, 43]", "2b5ecb05cb794f358c8ea13f0cf2e097": "Error in executing code: list index out of range", "6995a3a84b5449a58fc438876f455f77": "13", "416f89e5328644ce87029d5f53a2e5bd": "883", "2f5957d1380b49a2875880c7794ef34e": "35", "ae46106224494333abe6e00ee359b6b7": "2", "dd634a55d8714b61a7fb131399d9dc78": "None", "e7a58849aa85430d8d636c27363d5e33": "Error in executing code: cannot determine truth value of Relational", "098a3b659eeb427a89b623d1e25e658b": "None", "d479af8b6893461eacef1a339c274668": "1500.0", "405703d06a994195bf551dab43619fd1": "59", "f6937b2f247f41d1b164f5bd3f049d02": "6", "b79b5ec48a504586b9385b38029604b0": "11", "74ab3065ebb5439293e732685642ecad": "162", "4629d64e3d4a48c5bf633f3bdd2365b0": "2348", "c5458e86dc4240c981da0af45180f2f8": "15", "c4ca026730b840e0adf7d50d75be5327": "None", "a069f06f688345eeb6159e25ebd9aff0": "5.0", "010bb0bf91874c6680ff1dc51b9c9b7b": "280", "f5d2c286df534642a89887aece5f0e9b": "1030.909090909091", "578452c15e084bd89f3aa7d1fed59b62": "1", "713a9d28fb1e49fbaa258fc6a69b2190": "28", "ad293da43f434c93bf7098605092dd7c": "10.0000000000000", "6521709fc9cd48b2a5ab3ae91f697d2b": "4", "adab740f73c546d784f3ed9cd36a3458": "Error in executing code: list indices must be integers or slices, not Symbol", "fb660bcc46b74f07ac7feeaa38717f3a": "3300.0000000000005", "462c55ded8224131a73867fad50bb432": "56", "ab2097add55d454aa0be8422a9df07d0": "7", "d3e88715fafc4600abf7862b1643ef8a": "98986", "177fc46e18db45b6aa4e27c190dc554b": "119.0", "0ca9c567ad8b460b8907827cbf7aa0d9": "1996", "163ab610cd2745a6b3eb967ba8727491": "12.4", "8ee169c4ff514bcba4c4a52fbf666095": "Error in executing code: list index out of range", "4bf7a0b2d8524a8b9d70206a667d3262": "Error in executing code: list index out of range", "46bf5dbd53024453bcf789bf28421c3b": "7", "16642741440a4e67951a72b26b95cdb0": "82867.0", "14463e3d329243e8b642add68ed527b2": "15", "876106a5931d4f1aa11e084f5ab932a4": "1574", "ff808081456fc18b0145793021931a83": "10.0000000000000", "ffedd6fc67254c2897382ca3cabefd67": "1.8888888888888888", "f82305cee42f46e3b9885c5c07d11baa": "8", "3ad752da8a8a4396b52cf14f31a66e90": "Error in executing code: list indices must be integers or slices, not Symbol", "ff8080814694a7d30146b83067953c19": "512.0", "8f3ea5a5b82040d294daa7e9fc0889e4": "257.0", "e89cd97fc98a427ab28dad3b29b606fa": "8", "10e120196c5b4a23aba3ed6422ac44d9": "0.5", "361321b8b6e9459f9535089dfea8013b": "384.0", "78d9c72365eb4edc86aefdf49f12ba3a": "601", "5114cc472004430092ce0a21c87f93ad": "945", "7bd1902ff4fb46589d427b8a4d4af19c": "192.5", "782b5c40e0f545a3913a87bdac714597": "None", "92e72f13f8a74cd9a913cc633f6be4a0": "9", "18a980304e9940108d55e5fb68304a4e": "390", "a16285a902404a9a9dba03cccb832b9b": "Error in executing code: name 'symbols' is not defined", "65b46255575345a89a92f7a0f8a3e25c": "76", "38552935fdd84bf8a2cd0be7cdb77875": "90.0", "018828078522439c96b6426c1e798fa2": "2240", "b51f38ede3b440af9c262a496ca78c3f": "Error in executing code: unsupported operand type(s) for -: 'And' and 'int'", "9cccf531397241c2a830b61cc6932f34": "4", "fefa541907a94d4c809731c57ec1aade": "50000", "ff808081488801c601488c227e0d0df1": "327.27272727272725", "4269b520e56a42c7837d54c2c7896431": "-42.6666666666667", "337b7b45183542c381def96fadcaabc5": "156", "b9a13386d71547f38d80e76b04261b74": "46.66666666666667", "0ab8d0111a9b4bd986ca038671ee4879": "8.0", "b3821dbab7a5437cba497d3d95b17930": "145.33333333333334", "febd9de4d5ad4832b7499f124c3a7028": "765", "0efff550036b463bbf0f4120863027ba": "(5 < t) & (t < oo)", "5862eb7a5d5d4ec4afd4bd0e1df6717d": "42.0", "8c6c50e672c941278b93838704a85a13": "17.28", "40616d76a527401785d6e8da53c1b1e2": "Error in executing code: list indices must be integers or slices, not Symbol", "770b50c1cada403eaaeb9d1d8f90ffa0": "7.087000000000001", "c779341db4d949d08cf4acf0d916a2ab": "42", "85b7c211b11f4d0f8bc3c39f33cac9c8": "Error in executing code: cannot access local variable 'n' where it is not associated with a value", "0f6e05f7ea47457c9ef9c0894c4fb0ac": "0.33999999999999997", "0c5b33f5289a4f0bb2fde7eec11b2847": "95100", "e1f1758678814c7dba739814263b8f2b": "0.681818181818182", "38e5cfe022b74801ab7f1873a99c6ad9": "0", "ebcd0389e9c943a585ab79a7b3e23ecf": "57995", "82e37dbc67794dd9b47f8db6aed48058": "51.5000000000000", "a13891b71907485fb03c5c232a2f185c": "12.8", "ff8080814a053eee014a0b0ec0c909a3": "1.00000000000000", "1725a28c3fce4b848df2d8928548c495": "41152218107", "c5620871313844f19d0059d600f7baee": "2000", "f97ab6737ef24d92b9d4ed310cb63223": "1.0", "267e7d8a4b5f46d782b7e40cca5342ed": "100", "b50c9bbb17fc40aeb90c23cca63168f3": "660.000000000000", "a34335094b8f4fb789a84b1743b0c3f4": "60", "96a03831b7ee44b1975513d53868be30": "2017", "f724afcaa14d4a489354ccb4165213cd": "Error in executing code: s", "ed04ca93516c4b32b2280a00722ba5c2": "90.0", "ff808081488801c601488c225f5c0dd2": "0", "df14ae2f9d4c4439b0dbe36a89106daa": "Error in executing code: list index out of range", "b8718ceba18a4bc1b89982e3a04aaebc": "4.0", "c1d2f32b6cef47d5b3b432ec9f0b20c7": "None", "3650c572b38240be919481e55f55bfd9": "0.33999999999999997", "1507bf6635984d2d806cb4c17be19773": "None", "bb19e5ea87df401487234a6d2eb5ed67": "-40", "f8cef792edfe419f826482c43c034ba4": "8", "4652a72bd53942cca1d0f3debcc47f67": "100", "f4b2bb55e7a84cd4b59690efc5d19d7d": "9908988", "70a5a22a5dc848aabf9812564cf16fd2": "100", "47c7ce8a929a4d8f93ab09426b509b1f": "1440", "1fa3b74990d24074817e6c488ff7e75c": "24", "0c390f8cd36648fb85720ac3f94a2dd7": "48.0", "a108dbf2a63e4016942cd161c23ec3ab": "96", "47c51c33848744fcbc1f35010fafd3f0": "10.0", "fb992339ce4845a9ad2c53419ea54e79": "30", "0af78788b975435fa0f19a59a12c44c1": "624936", "50c0c790c56348acbb4f489172f4bcbb": "900", "621d64d9d17948fd8f2c8016934d19a5": "inf", "2f90a02b643f45d88ceb316658a98316": "7", "9333d6442ae3492a8d1c94786cca4b03": "14.583333333333334", "673dca81b27a4f02aeef1bdcb1de08f2": "301", "ff80808145cb8ada0145cb8f01aa002e": "0.3", "234951a9a3b7439b8fd71cd4e3f044a1": "8511", "8f7113b6c2d8450594186560a884acae": "10.0", "c45a35dfb5284acbb96274fdc275207a": "52", "9aa7943c00314500a976e743e955e0bb": "15", "b41cc8c1ed724e909434681280293a35": "26", "e22d47832b5840979a5026d145eb2bcc": "8.0", "3b8135f447cd4ba280d60670273e530f": "64.0000000000000", "0354254dcc2c4d37825cf9334f539100": "3", "4e29908b45b4421889c370a22907c5e0": "8.00000000000000", "b64b1dd6821f4f1e9a77112e08bb696d": "561", "44ed883cd8c84efb97200dbb773ec079": "Error in executing code: name 'symbols' is not defined", "97a7b04fa7ce448da80d5b268ef83b18": "688", "6ea37994b977424d8b0c65d5e51f2197": "3.955999999999999", "a0b8019bfcf84f049b542bc5f3407c1b": "2 - 3*a", "788c31b6d3a84c8c916c4a73447f7f3b": "-2", "e1bda9493ed5421d87cdb04b4d568148": "-1", "78dd8099f30241d8bc22350fadd87e26": "236", "6f25805ccffb47588c77b0f059f6bdc6": "Error in executing code: Sorry, as_set has not yet been implemented for multivariate expressions", "eb966c6a873e48f191a52c7dc53e34ea": "610", "ebf18846cee9420f90f3c140091c697a": "158", "b3c2085da0974b879ce46798d60f9346": "3", "6aa48f36d90f4c79b518ec8783e04b9e": "Error in executing code: could not solve y + 10000*(Mod(5 - y, 10)) + floor(2591/2 - y/10) - 25006", "499703ca5851404eb3f1ecc6e095e004": "120", "b8feb7e7f04a4861bd4766a8b6f49c94": "15", "d9ecf647c33b4958b8d8bcade3c8d871": "4185", "8ea5e48c4d4c4d228f399eb3376fa05b": "1969", "2104a00c56b04a91bb9232bdeb9fa50f": "3", "fabafbe1d86340c69b9da7308a910c8b": "2989441/8100", "5819dd7c5d2246a19986988a370cce4f": "7", "6e16a98f89134db9b34b4ba00919f5d7": "12", "6a9c95032c8d4fafaf4ad203736cb517": "Error in executing code: pow expected 2 arguments, got 3", "1e137ff06bd346cfba8fba3a2489234d": "4.000000000000001", "0ce2c1462411403eaae1b713a9c4a48f": "7018", "b5d3af4b5a8541f3af45227549a20460": "21.942857142857143", "8d477ee5e6664f6ca36ffe9cc70d6c15": "Error in executing code: name 'Eq' is not defined", "cc2073e340884509bc659f9eb74fadd5": "57", "1eba624ec0b74be5ab0a614314cdeae3": "13", "edab868f0f15417599cadd20b3ca32b4": "498", "9b71cbcdef724fd3b0423c8af14235ee": "625", "4cc82648c3c1433bbaf2e4250567ae07": "20.0", "c872dbb321644eee9b0820e9c0c1e503": "71", "c9d5634dbc764909922ebb305ca6f2cc": "85", "4edf7ae84946477b83ca5ff3107a3e95": "1008000", "af04766edd4849d3a10e6b0f9c9cd8fe": "2025078", "b6c1dc6129124aeb9ba33b7671ff5311": "500.0", "ee6f81da7b2f498db3c8f274b0e4e94c": "6750.0", "91735a3e2aa04d6fa72935e01ca32ef9": "0", "849a35121e7e4e74be1e44812b5ce2a9": "999", "109699877b4b4d8784a65c7f780f79c6": "328", "a8e1e2a2a50f44a8be08e73a05792511": "2", "5cd229c6980d48e49fc27e0edb40f494": "34", "8d23154c99184dc79660bb7cfd090949": "209.99999999999977", "fb5eacec75b742888dc95a79e718c923": "6", "e7904fd6d2ed452dbd3bf0e46ac17d24": "Error in executing code: cannot determine truth value of Relational", "90e638481abd4608acd75056904275bf": "600", "37601bbc64b940ef9ad5d40d76f89127": "30", "97bc61a633a940d583d490bb34de9eaf": "23", "40959a2d86344c9eadcc86dcac5072bd": "21", "58f03010f4664b9fabed8169d825a22b": "1", "5323a7e8ac444a1995cecf7bd833fb27": "1", "07577c5529d04497a5324c10b49028d8": "None", "99739666760649a9b31bd483d72c587e": "('Xiao Su', 48.0)", "69f81d22c2ca4ef2a10864fe8587bf67": "0", "b932e7ee86c442e1a9f5036ada601d8c": "402", "ff808081488801c601488c21fb850d8b": "25.0", "95ce27b282d0418794b54cb8c99fde76": "59", "636858d920a34dcc91dfb019993a5d78": "195", "1509eee750ea4539962d2589f0853655": "24", "ffc5346be9ab4a95a885db39b4ffa6d1": "80.0", "a52ec06054b046f5a61d64bba41b3beb": "inf", "7c8ac853a8d6488991cbbd576623f7ac": "194", "ebc2ccac39ba4f8691425958c1e385bd": "('W', 0)", "208efadef6a246c0afa22df6410d7bac": "900", "c6dac9e66f094ab3bcd354525f75cc71": "2015", "09dcf978cc44470facedbb58894a6acf": "348", "218730a858be447fbc202810a73308c5": "None", "23d2d7c4e50d487f92b2e3e733d2557b": "52", "4fc11192b7b146ac9d9d6cb125b9bb7e": "14", "2b333d1d21024801a9388602b04df73a": "90", "4ddff729c1754ee1bdc9ebb17a9aae2e": "1.4", "af23130419f94779bffcb584290bc83f": "4.0", "818557c2585e4a8e94e96ec376332b30": "14", "fa1ddbb22ea9436f8b57308721de1a80": "7", "0c768bbb18464f188a2f6b2e6fef309f": "6.4", "8a49b1619c9548219178a72b0f51fddf": "Error in executing code: can only solve for one symbol at a time", "8d33f54580be4e2789b7e7a3f0aab17d": "1200", "9aedd1a5ce914b64a2f54b4dc7ddf7dc": "3000", "2f02b8ef605243e6a21ef4346888fee6": "2880", "bcde62595c424dd28f897ae3364f5c47": "0", "df604ccb060d45c29d538c23f442a647": "38", "f8e244826eae4d389a6eed9722cbe21d": "1650", "25322690a5a4435295749b584f37d8ba": "Error in executing code: could not solve Mod(x, 3) - 2", "2bf33f992cce467e9e3d7b0aba20244f": "100", "882cd0d613b0466abb3b64ad349a29cf": "76", "9a456b4548a043d5963985e5872d09d5": "8", "d6d04409836a4dde8d2834869c81b136": "15.0", "4aca071a918a495c8bf3ffb89513774c": "11", "5fe6d439be434a758eff7878df9e3171": "182.000000000000", "97f6308e1f0c4ea382de6c14d48828f1": "Error in executing code: list indices must be integers or slices, not Symbol", "46191cc75acb4ffe8f376f48e96d9fd9": "2029.1888107641776", "8235a0ea54a4465f90bc4a9a1a68d5bd": "9.0", "7a23fde70b9e4d459e03cead4f6ef759": "12", "71ada11045ed49ba97e0483b38d65694": "300.0", "baa909e355bb4d1598005c19159790d4": "0", "982243c30af54d04a519d4bebb4f5df3": "10.000000000000002", "54fa5b503f7a4d40943bc5fdbd950062": "12", "c679d116e7e543388aa48d99951f516a": "0", "4a7342fa636141bf96e5d016ad66eda4": "1.5", "878a815d482a4917811863646a25e867": "512", "743c6b0f147c4ca6a267c60b17d7c11b": "13.8", "94e097dbe9f6451c8a38dd35a9ff1f1c": "None", "a853102bf75a442797c91ab9df25f569": "22", "ecafafe62b004966a360afdc9f975dd7": "9.23076923076923", "92a36f2a18a94db99fa2e370436dece2": "10.954545454545453", "be792e89ea254d68b3fd3b769cea1425": "98765", "96f9b1088eab4e8b8d77cd2d9023e90c": "34", "88cbc7213e524aeaa7acfae3f44098a8": "12", "4286004e011a4a508cd55682e12908b4": "45", "277c915b95444fcd8f4140843916be77": "1.0", "30152572204041668d6c8ca049d579f3": "Error in executing code: integer modulo by zero", "8c13f1f35d4144d184f436618b438dfb": "15", "78907c2a71fc457a8ea69ce7c7a9ba80": "14", "0c036e917d0b43d6b01aa0390adf4220": "840.000000000000", "a25c84142914465889b0810a6eb69cea": "1500", "66dbb32570f0420798bbff22e6d9c778": "0", "cc8375128db94436ad396494ec8cc71d": "2", "a99bccd7e19c4f5e8b3fc39ab55273d9": "201", "cefd367107554ef0965439f661d11298": "Error in executing code: float division by zero", "3a7558d6845046aa8b14c23383d09d98": "25", "2f06c2d5d4bc4e8298ad21340084ff30": "None", "28468456331b442d8ce16dce08506b01": "10.0", "30877817375f49e8bc586c343a1066eb": "70", "5d82f4385b2c4745964bc5ccb5b56d5a": "2", "e346ddafa3bd4d9e9fd91e78a862576a": "2.999400119976005", "9cc7bf4f7829492db24b08933e27b3d7": "7", "789064a0c87c44b5911271846df36763": "4", "ff8080814526d2f401452793fa5303c8": "Error in executing code: pow expected 2 arguments, got 3", "8c67a1f03e1d4960b687ebc825c82df6": "Execution time exceeded the limit", "cae60632bcba4ed19d6b18646ef8b100": "6", "03746e92cb854d009eab9f28eb3c3512": "Error in executing code: cannot access local variable 'm' where it is not associated with a value", "b14ceb7ad64440afaaa7cf1622d18d32": "3.0", "ff808081488801c601488c223f360db8": "57.6", "11497f726da14156afc4cb97dc9b2df1": "8", "486e0e2f564b47a6b2a6f66d23c20635": "6049", "e9ab5621ffe945228788d98c955ae190": "180", "50a8d4d3966847d58f1fb5c9de6b3f18": "Error in executing code: cannot unpack non-iterable NoneType object", "ff808081488801c601488c289d740fcb": "2400", "3a7950736cb048e6a4e8e3af2a7b623a": "25", "fdcc951b536d4a378d6de77e843a1c2d": "77.0", "72867a7e2d0b4441af6a3947a9c09c93": "3", "bcd291d4562949ec91568d08844a0a49": "Execution time exceeded the limit", "31337403e28b4e9d92696353c6f643e9": "4", "6a7ea1473ead478a8e50833f40dee03a": "2018.7663965573072", "7bd9c5da6f3748479956fc67c4e78bb8": "2", "f343f692f9a049e9b86a64db246458ec": "3.0", "ff80808145ff6bf401460fbdfe261e3b": "24", "c50e1340f5944306af71b65ea0a31453": "115", "0bdfa5355c0147f0835e734002d99034": "48", "106ca01fe4da46bb8acd9d39ef2ef8ac": "100.0", "cf1169cfc52d49aa87972a0b58f9f1f0": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]", "efebfcf183604cf3b8512cbcbfb361b4": "40", "f08940bdd9b242e18eca8ebefe5dbabd": "1440", "a434f97829c14a4990385a63d99f82c4": "784", "3ca87dd28213416091b1311baf849978": "913", "d6e6c0b319e64fec825a00b1f5a2516e": "57", "2d10462952494d52baaee1d7e95b3e46": "51.5000000000000", "5f4f327850744cc2a61ef4cba7c0df97": "24.0", "2279696fce1d4bd9a0d0d50be89be452": "10.666666666666664", "ebd8b557187c4f10ae04323636d8488f": "85.71428571428572", "a5c2ed3e2cdd4712ae250f7eba332d7b": "784", "6d35c2de830742258b21086cc731da68": "-3/2", "4baf02b91e734aa1b9225cd1009f677f": "120.0", "7620a750022f48029522a274d6eb336e": "154/3", "1736b6cf42f8420c996915058ef8890d": "11.3173652694611", "9ab59e45a3164e0fb7f97ecd315da4e8": "Error in executing code: 'Add' object cannot be interpreted as an integer", "384cceb179924cef94d2802f70f5e33c": "Error in executing code: name 'symbols' is not defined", "ba7d1ae3177a4d469cc278dae62b3f0e": "2025", "24370b902c9d4b97b49b53dac894975d": "6", "f4736429d7ae4d9fb8b3f52a4ca5335d": "zoo", "d73d9b8ddae644a1845f68ef1f483867": "84.0", "a509fcc461944d9395d2d40a5d941c4f": "4950.0", "fe42440a8f15430d816767dd4609dd10": "1400.0", "4caad89f2f8541048dcf0a3b6bf4fcbf": "8", "0c6a16b10e9c495e9f14c76a242ad333": "80", "b7e7c5d8af724f4e91a9fb793c6c933d": "38", "df0f8800c2184967846bca9ad35d1642": "Execution time exceeded the limit", "a8d7ce87b2cd4c9c84ec4f0d4690c096": "927.2727272727273", "d879f797520f43648f0d541264a71db2": "None", "e226d3dedfc442329ce4b56a3fe2ac54": "0.42999999999999994", "7cef16098c2544e3b4013e1683bd1077": "Error in executing code: list indices must be integers or slices, not Symbol", "75d99b87aed346a1957bfad3fde82ca4": "True", "0731a25423864385b27fb1bfe55a5be2": "1", "c5ed10091ce84ecc94174374decf9e40": "Error in executing code: list index out of range", "6542fd85ae90477c968664176fd8a8ae": "976", "ab8fd0fbb7be4479aa9c6036af839f38": "0.375", "b52bcdcca7ea4e16a4b155f2d81da921": "49", "ff8080814d9539f1014d988b00da01fd": "Error in executing code: SympifyError: 'n'", "1f48daf63d204eedb0a406eefa4eeb3e": "11100.0", "5108f29301a741a1b22a1bd6c1374b0f": "66", "f34e1fcfad9549698eb8e71a7eeb501a": "Error in executing code: list indices must be integers or slices, not Symbol", "2a4260cf8e3940bd833ff07325657f1d": "105", "37ff671e7bdf4717946eee7f618e75ff": "24", "db12b73d385a481b90a1e11fc1f8a7bb": "407", "206a1b91346840dcaa9c29744e31ac94": "15", "ff8080814518d524014526a70d14193f": "1", "b1f3e4523ff24e98bd65baf4f37dec69": "20", "2ead25fa16f847f390c0e294a954e2fb": "0.0", "ff80808145644e1a014564b652e100c2": "50.0", "09cd6197315d419ca7a63c1b56d45702": "0", "5f5dfaf5042f45d2b216bc60508973d1": "12.0000000000000", "903abf8bfd254deab1dc20df526b8cb7": "855", "0b5813a5b5f1499993525c8cd6cd045b": "25", "465e3242df054f0a81e19f64d4c9b72e": "10", "7e737fe27dde42eabfa76641435de65d": "180", "ffa6979ebc5243a5a04abc9732823578": "0.33999999999999997", "1451216f8c924bb2b028cbceb67b0d26": "150.0", "f0609967504c4c5089a4bb3e3cda19c9": "69843", "0615ccce0e364995985f806c73878b85": "33", "01ab7b03a29242b6b1976502f0a9c68c": "10", "0ac3eec7c0af44859a9dc65ad51e4f99": "77.0", "ff8080814526d2f40145278cfbf40360": "865020", "005444113ac8429fab633f42c90097b1": "4", "7f6f990fa0f04cc8be3e72ad2c907e3d": "None", "43101a2422044ce7857b166ee6410f46": "180", "2cc46da13761450ebbb6f74c7b6eda97": "9", "0456008e702d48f4807b7b53fca8eeb4": "24", "ff80808145d03a7f0145d0c564410071": "None", "9287fe2fa5874696a1ab20a8bafde2e8": "15", "67dd4563a7ac4c0f9fc176d42c8bb1ec": "144", "ec163df0293d41cab00647e643425a5b": "12", "d553265fa20f4dedb92deabb583c0cb0": "7.176366601858039", "0f302727e1b240ef932e6562f1b5f20f": "105", "5ef604e5e526461385f383f587483bef": "40", "5d459767498847d18f6f4a017c5a0e57": "12", "c604d7588db44b91b3ae3332750835eb": "3", "703bf7a11af24d608a8849e862f112fa": "389", "f23b9c03b4f9475d865417efd13732b2": "Error in executing code: list indices must be integers or slices, not Symbol", "9372985a928042b39db5ea82c9320de3": "3", "49af389d7bf349bab327a15ccd50359a": "76.0", "750c8ae364bc44818e3821dd4a66ce74": "560", "737d110dc77b4e7f8ed60c29072865c2": "1994", "72dad7bdf4cc45b59929864e1fc39bfc": "200", "59357fbd13054b9089c1404e2f32f677": "Execution time exceeded the limit", "7e9e13c5292a45d78eb0f0ab057890f2": "630", "470c451e2d984606b8424f25dd706a6b": "3", "200e05f951aa472487a43b4b16b3d42d": "0.9867482240457655", "f32870665d11492e948ee7c0f455350b": "Error in executing code: cannot determine truth value of Relational", "7f106bccdef648918bb7f92d79853485": "24", "dd0698c1d5e44e0ba8e03859a8b3f21c": "900", "7dbbdb41ba2d4516b5279a84c588e6f8": "8", "8bdaefeb493c4738bab9087cb1c152c1": "6", "4e0c09d0d4c54f8286a6f1a1748368a2": "Error in executing code: list indices must be integers or slices, not Symbol", "353ac402c323403391f24519df758e4f": "-2028.9999999999995", "41b7841a25d84103b1829264d72e71d1": "56", "0ac4aa58310646038f9eb236640be440": "Error in executing code: pow expected 2 arguments, got 3", "ff80808145933e8e01459840675808b6": "22.4", "35a2078da3d74b30b1e4295778349e04": "Error in executing code: b", "c7f59a1f570b4927894daa0ddc4d0d57": "19", "8e51cb45493e4873a14279b0889447cf": "1000000", "c9670735faad49b08b60a8b9b1aad040": "0.8076923076923077", "9fa5de3c6f364b719f875fd102885e56": "39", "d9e21bcbb16a4c63b5e8b9a596b33492": "-188.44444444444446", "209285e09b0f4073be6d2853c8d3bb16": "zoo", "078e214cec8c42f5ab96dea7177487dc": "1022.5158730158727", "e21fb6a4934c4f36af334ec8acce51b7": "1", "1e2eec8b9e8b40bd93c358cbe4ed98ea": "35/214", "d0d6053e5d87419584a7d26a05a11b70": "8889", "e71e15be352142098c23d0bc2eae0c3a": "0.9999999999999999", "e8eca53acab4408f890e278670945963": "Error in executing code: name 'rabbit_foot_dividend' is not defined", "263ac768f5f842f3b2381215cde814fe": "4.799999999999997", "2c5d0e74ddce412f831385ea244f19b2": "-480", "d14120009ef7439fb100bc32b6e21431": "1000", "1657167eef084104b7e9e62fa25f79cd": "56.14035087719298", "ae4eaf496cd64684971f0bca314782c4": "Error in executing code: unsupported operand type(s) for /: 'int' and 'builtin_function_or_method'", "314020ecf9384cee804cf6d36f2ebbdc": "860075", "69143d13d09347fb986b677f2289fe37": "Error in executing code: cannot determine truth value of Relational", "dc64b6b082f94d81b5349a506bb3ca77": "Error in executing code: max() arg is an empty sequence", "2c1437e28cf94282880861e3cadfa887": "12.0", "2b0939ac095b42f1bb82215401421696": "20.0000000000000", "8abe829989a2474793c8ecca43b00611": "18", "a8ad713eb84d4c70ac4637ca1441103b": "7", "5ace3b6773244fb183f2ec4f5b25b1d4": "6", "d8a9f13265fd47b692fbfade775d6b5a": "Error in executing code: list indices must be integers or slices, not Symbol", "d8c3e22b456345b7a5b07582a1c22317": "None", "0977d9e03ffe4846b3169ac29e74420e": "18", "51ade95cb32e4836a372899eeb29e4f3": "9", "612bc591bf6646c0a0e12200e113c100": "Error in executing code: name 'symbols' is not defined", "f41b27abdaf94841b8c7b58de4b2364c": "Error in executing code: The total cola should be the same", "f360e1685d00443bbc448a6e48b14a7d": "52", "1984b8777f5b46ab9acabb504fec9c52": "24", "ff808081472482f50147293a87b003a0": "19", "435c961e630e40628f18d9cf1b36e0cc": "10201", "f8eb7ef019fb4a92bcff81f04ed343b6": "483", "9e39cf8146854bb4961f4aa4e0966381": "432.0", "fc05a99902e14d4db2268e59b716113c": "4", "770192a5c9ad4c96841d1146f37c82e8": "6", "cb5af3ad6cc145abad824be76747ddf1": "Error in executing code: name 'symbols' is not defined", "a9b39198536e40b99aa81f14c286a95e": "1600", "9ba97bf2b0bd47f184f510c6e7620103": "744", "7fb4288c298d47e1b98ded9167eff8b6": "240.000000000000", "0f9ab76fe5e1413680969f10e8ce91b8": "8", "205c0cc9f1ea4b01871910a670993696": "3194", "f4292c45337f4852bed8e0a77741534f": "100", "2b180e60e00944b1b3af817c188da2f1": "18240", "8bd2231a665c40ff8751bd4edfb8f318": "10.0000000000000", "13d5f14da0d4467d89a8340139c193c1": "5", "463ec50262fa46eb8e4e0f0878dc5b6e": "Error in executing code: list indices must be integers or slices, not Symbol", "76c76fab25a64fc693c0f82fc3f207f0": "115", "30334ef46f9c48219c7573596ec4dd5f": "12.0", "5e161aca564f499aa57ec8668413c2a8": "4127326620", "2fb82faddedd4f9091adf291451671d3": "6", "6674aa1eb2984225b767eccfd90e706a": "3", "f89148adcff5429b86d691a4d0a0a0ed": "4800.00000000000", "eb0a8bb101ea420ab9161919d7e0d9b5": "81836", "a0d967a93c214d31852ab89566f60e50": "Error in executing code: cannot determine truth value of Relational", "ff8080814518d524014526a6d8ec1937": "Error in executing code: 'NoneType' object is not subscriptable", "79818e7c1bb44c14be55767179eb5831": "360.0", "07c5c0241f024d3f8649e640b2910d1e": "1", "25cf9594a9694dccbc07835df2ba1b54": "540", "1e94fc19a642441e8a71e0d5207677bb": "182", "c2927c7bac4145c189c8bb79c79bddb0": "21", "c2e8bb719eb94550baf582d19515d1d7": "13.5", "6ccdd09382904e7fb5fdb87f9b27c56c": "1716", "e5e8b405094446659bcc995a221e8f13": "2400", "2880b985c5bc411cb203572a3fb19196": "240.0", "d7d1417f16364412a8571e7d8029e785": "0.44999999999999996", "626e0d01d8ff4670af676ba1c07599eb": "24", "7001e160a21341cea4caa94467275f1c": "12", "93d16acb89ca4a1a91fa4bc4b763a19d": "Error in executing code: cannot access local variable 'all_three_subjects' where it is not associated with a value", "2e673df5a3c34c6bb08a83c6573d3caf": "12", "4010c201c07345b4ac29f4c153a6806d": "8", "e54b6fab90054da6b53f54fc29f6b2b0": "-207.5", "052e6eca8c7e4cfa95da05b3d713f0c8": "18", "0cb6ca909f0a44249fafafd3530cd18e": "Error in executing code: 5", "a87609fb0a944b2cbabb2b74bf8cb62b": "4", "ba756e533767466ea6c8fcf4322e0340": "132.000000000000", "fd098d3c45164ed3bb9f9d10ddbaf1c2": "Error in executing code: list index out of range", "b272e498e1e14ff294cfd83fbfc1f7dc": "500", "ff8080814694a4fc0146af64c1f22707": "17", "81b1c9197d7849c58c9dac723c9d49f1": "17.0", "d5005a5ddf804e75a02ebe75868e94c6": "1200.0", "952b6600803f4ca8aa43b9d8c3265d15": "480", "50b68a5244124b7795e0254a4610dd84": "2", "affa8ebc7b78407592dc2c4c94352e51": "3", "20bb9235dc8d405cab48aa92d9629fe4": "1848", "583a7e1538e34cc1865027bf3b6dc0ca": "55", "59bec71118664b499a2c6ea923879756": "59", "ff808081488801c601488c2214ce0d9f": "9.045454545454545", "055db22ffd764e9cae098c819ebf4123": "4", "b58fdcd25f1c440184e40ffd59af33cf": "29", "ef9a6c4444cb41c3aa14daac8afc6f30": "0", "11bd4eed0bed40bca63d83baa62b3214": "2500", "d7ec8f7ecff84eeeb1e2fd5aeffca9f0": "75", "ff808081488801c601488c22a5ee0e0b": "1800.0", "29e7e4200ab449bb9989e0c1238084b6": "7", "0bbf2339808f40ada221dfaab9fb2af7": "28", "9f1d7fe897454799bbdbab5800a0a63c": "24", "38e82da449cf412c957c5d5309ccb55b": "3200", "23697c6033ec4ac0a1f248269e0d3d26": "Error in executing code: pow expected 2 arguments, got 3", "7c89fc496ab64d928d5c957af2b7c27e": "24", "14216ef011964e38b1e542e68d2b6614": "24", "af6cd46c94404f95a8e54f836a19a7fd": "1600", "8963520688124bd3b40406668a68a876": "11", "dbccf56b5c6241d3861aa02293508e38": "2611", "8a97ab16a85149e980470cfeef415c8a": "3997.999", "d26554aafe34400e876271d260857929": "200", "7189523977d74b868faba9335b706838": "25502400", "ec54a46d289840ee9e9a4ea95b04d5ac": "13", "e6edd287a7974d3881d95bd3255c0f46": "21", "d2276709fdbb4fd7976614eee77b89bf": "Error in executing code: cannot convert float infinity to integer", "5a65819b69d74968bb624452f7179eab": "16.0", "0ee08efa2f20449793108e40af9e9984": "280.000000000000", "e8f094e8398041bbb26b26c54f2ec529": "650", "7dd2ec7446d54b14b071667944eb837a": "impossible", "4d941d8daf984261a2313a4ab7f0cb9d": "11112211.0", "bac6aee35a3245febbe30313360e03ed": "1850", "26ea3829554a499183b3d687cfbbeb72": "8", "b9b3331ae94d42378f6634be53809e33": "168", "d996310e45334b7ba7412dd549a6571a": "720", "ee9d8a4de85642f3b4c664747b6f3b69": "43", "c9a7d63172e743b888ddeffc2bec95b9": "6", "9d4fe3ea99604f9bb6e4281797ca4f0b": "Error in executing code: name 't' is not defined", "00aa393502aa41a4ba0188ee8192b938": "[12]", "22e0ec8924cc4f91841c62c27be10700": "None", "f8fe06efcff3451d9b844ee15d4ffc40": "6", "4c6157f5b010424581a7d2e0d3fc8bed": "white", "fa5cc3f7cb23407c9974f4bf49cc62c3": "Error in executing code: cannot access local variable 'remaining_card' where it is not associated with a value", "212d63a8fbc14932a29b0b1e1478c0e0": "1", "51c30f986f234805aaea3497c87774b4": "43", "991ffb12ab514fb6a4c28caa596b9c55": "0.9615384615384616", "209a82b764f241cfa9d7642c1c6b98e7": "5", "b6b1a26be904453b83afab0e2d5ba0df": "55", "cee1b702616b4fcdb4a4a27d5bd1efd3": "312174", "c009715e11e948bd8adc46d1aace7752": "Error in executing code: list indices must be integers or slices, not Symbol", "6a3e5208cf3148f4ba69c0a086ed8dc9": "1200", "cc0a0232eeaa416da4141fd71455b990": "6972.0", "c0261214b65c43f69f8c34660d197b20": "46", "e6565a25013940079748a64f95323288": "9", "03306b138fa44e81b3b5140780c2d176": "Execution time exceeded the limit", "bce69d22ee9c4dccb55994e7ceba0de8": "885", "7df0248cfab0490f9430bc55eec3d0d6": "None", "7fc54758f7d44bafaf1157c44cb99b32": "1107.4468937875752", "0f46386ab2db44cba41788cdc1e58379": "Execution time exceeded the limit", "9ddb137ba4fa4dc9a3b9b2f93a514770": "27.0", "a8548e61303240c180e808c31bd272a8": "17.816091954022987", "c767e4ae4d8e4692aab353e9cddc94bc": "94.0", "a969f79e65ec4ef48ba3e15a352e0ab0": "15", "f8b64c712a9c4145bd470104487b76a4": "15", "9d04e581a3c64f6e84307b82ba64d1da": "9984.999999999998", "d4c7c43990cb4f0d8c6026acdbedcc07": "-4.1666666666666705", "e2292b0a225343dfa6c398dc6549fb22": "73", "7ca580807ed8453d81e88a2fdfb2d18d": "Error in executing code: invalid character 'ï¼Œ' (U+FF0C) (<string>, line 1)", "f4b79b2b6e394faa9683be4c4ecf31fd": "Error in executing code: name 'symbols' is not defined", "f20c4cd113d341cab14e2c0e18292e18": "5", "798974203bd24d60b3357bf2b94ff87b": "69", "6f2bdc9e11b040f0abd58e636883bb23": "17", "cd7a6b92363e42f898f8f0e2d1a4ff79": "84.0000000000000", "9ce281a4a8924c708387dfacf2c0ae3a": "122.5", "0f17dbd4268c450ea2382448e37a4d47": "25", "acc1bcec51cc43e9ae4b1982d5860a4c": "6.00000000000000", "ff59b87789954e059b237a1c0d20635d": "1875.00000000000", "2eb9301877e543a5829f543d0052e049": "Error in executing code: Cannot convert symbols to int", "4403957725fa4752a23d8242f12c6f5f": "14", "020304a18a14497382d4e4f4a10e787a": "4", "4c258719133e476db07c3fcd85918d12": "99.0000000000000", "c1a06016ebb44895800b0ae5632a7e88": "42", "2275e2933cc6452eb8342ce8b580ab25": "3333300", "3befd5ce620440e4bd537b31915a2d90": "12504", "a01cdbef228c4f4085727030c6684e1f": "24.0", "16ead037cf5c46b2864879ec01d8be33": "104.000000000000", "2276060d2eea417c943383ec446a3ca0": "60", "c36ead0c0bb648399ea9fc67bb32a7e1": "2.0", "a2ae1c2bd06544da82ac8717151b00fa": "92", "095525db63d349d4b85002976dfadfce": "480", "c05e6bf6cfdf44feb0ba9042967b7a2a": "-3650", "e3c96c528d1b4804896ff1bc02c60eba": "24.0", "3e5ec5b497914f7ab0d3514f5e0cc145": "638", "fe6b8b84a5dd4275a93b4a96bf5c17e6": "41", "5d9dce4ce4a34dee90c4b24eb86509ec": "Error in executing code: 'And' object is not iterable", "2aa563cd014043e08a13eb38f18e7cf3": "211", "8f5e54f7b53a41dba5a550bc1c90601d": "None", "4b89ab80e9db4638961e127d923daad8": "66", "f1c74c95d9ee46a69fdb468e0fbdf80a": "1", "13cd295346e54bbcb6d22e3cfe3c7b8a": "2", "76827d30e5eb4a95a41319155a839259": "None", "8451b18503cf406b8bc6be5a44b1456e": "14", "a621d882c4244e369f5bd0040f408546": "1999", "44c347cfb89241deb1af59bfb518d90b": "12.0000000000000", "80212afd2b6d48439cdfea6460347f52": "1", "877e26c54cce430dabcc3da56b6c50f1": "0", "b3f77735bed54ccb9a6ddac15f69db0f": "8", "6efadd6f8e5d4dbcba4ff057d935765b": "1200.00000000000", "feb7db739c334b33bb4a286cb69ba849": "-7", "8aac50a74ebadfde014ece5c39803b52": "2", "d55ca6d90d314c0dab8f9534a1b198be": "18000", "63a08299ef2c403a8b685266c7847be0": "8.0", "6d5352e0ad354e51a38c5f80fb8abe44": "36", "f95c8784da7f4a0986f75f46d71c7716": "1994", "b5fedc418a2e4bf4bd1682d4a0eb65a9": "900", "09308973dbd2409a849edcdbd9a772b5": "6965", "650ce2f2d6a54958aba6c0c72df67813": "209", "c30c9ece284e484687edf9f07f46c2b3": "50", "2ce1128ba8b340c4a7440aeff451a9be": "410", "89d6fd8a3bdc44e49b0cb88ef13726b8": "Error in executing code: name 'symbols' is not defined", "e5824194a042424c9a6216a22ab5b41a": "7", "25086e9d4be2451c8ed7083a4e6fb386": "120.0", "98078de9129743b380e91f39bd387a3b": "120", "55788d902a1d4d62a3e71e942f6dbc2e": "165", "75395b7249ea4a63a5b1f0ddc75fa9a0": "10", "ba470578b0524bb7808bc4f12017be3f": "8", "62cdd6b35f784127b5153b4a6d5cdf85": "2160", "046f4cf5624c4eafb7bde2349c1868b6": "120", "60d26ca92ec64595919f7cd30b6b1095": "4", "f7e0a737f59449ad9a6c3e6dcb0ce792": "40294029", "b36bd014bbfe4778b62f9fd15d13ea1d": "5", "4fb87c2e7b13432fbafecb08da95c26a": "17", "cf35c01849be4321b4cfea2873b35beb": "112", "1e9362468b244be6b9d807aacae4f8ab": "323.99999999999994", "94357aa24d2f4a0e8decac6069602575": "4030", "ba9a8b9cb632430aa6b81c9b17481e05": "12", "cf4453b928e44a098710ccc7f0cbd257": "3", "03aa45c2fe494e5e9dad2c97f9c3f546": "Error in executing code: 'Tuple' object has no attribute 'as_real_imag'", "945b7ec53d724f519ee57be5c0b0c156": "28", "f8dd88c0d9084587899cca761b5bafb0": "420", "a31d4e839e3d47b3a0180173010b59dc": "Error in executing code: name 'solve' is not defined", "a6e1738485c14c3ca0e7838de25bef2b": "-627376215338105766356982006981782561277125", "5f076363880c4d7e96e1bce999b536e5": "94", "347ffb99df1244b79a6da6e2f4eae428": "3333300000", "2a32c01ca94a4f93b7a3802ff7fad978": "3600", "ff8080814526d2f401453631fcfa3ef5": "480", "7a5aedf2c8bb454e90645dda1fec8d82": "Error in executing code: min() arg is an empty sequence", "065062593f4643b190e9925696a4686e": "19.0000000000000", "ff80808145933e8e0145983ff52708a2": "15.0", "08bb1817e7894bb79959af062d930ee6": "144", "8a4ac70fa7894a9786f5043ec186c2f0": "1959", "5e629bfd0db04c6685ced82604afabef": "33", "fc0c50074da6434889c366946cbcf579": "3552000", "fcf88cbe9d7e460eab27befc8fb64e0b": "Error in executing code: tuple indices must be integers or slices, not Symbol", "b78905f9d34742529705c5634f2a320e": "3", "fa58c76963314f2d82661e9d378e0ec3": "1440.0", "504c64083f8a4d7aabfae9adce036623": "1.0", "89574cc6446e4b24ae14312f8a066ddf": "33", "00bfccfc4da649a9b57dd575b2cc9b94": "[]", "ba94fae607db4ac2ab1603a8a8df723b": "900.725478579007", "ab64b14f54994f71bb8054b09520345a": "4", "7862c9b23c1841c1886333820fc99271": "39", "485a11c8dbf64b57919fd69b67fa9f31": "5542", "bd32e564499d411a9b14112c45680858": "132", "62acee7a68df41c6b99a8b36441cc243": "Error in executing code: integer division result too large for a float", "4f8295fc89ad47f4a91df796b5db11d2": "4100", "a0d4cfbfdcd34344aa09bfb20af11090": "5189", "7135ef0040da415da1454003186d3a25": "4", "d2e75f5a09374b17ac047406317920d8": "4", "8f00dfc1c206483da05e74bfe9db2061": "60", "e18350407eb94ba69398684c0a73ce19": "Error in executing code: list indices must be integers or slices, not Symbol", "a69cb5e68f1d49369c866b16149440f5": "400.000000000000", "e7143b20bf6c40a49f69649a88999cda": "8056", "b71dae6470454636aeb8fe6aa1b54bec": "Error in executing code: name 'v_b' is not defined", "5ce9b821b8f44c66bb605d038065715a": "Error in executing code: cannot access local variable 'x' where it is not associated with a value", "48bd2f833380457f930a6d2e47e270e3": "6", "98df34f75d36474b813be52727ca3ea4": "3300.0000000000005", "d86daf365795462c9bd326ae7f33da80": "2003.0", "ec67cf4ba13f44ce9dd46f4a14acab89": "95", "02d5d25277be4912aa7bb2891465ec49": "15.0000000000000", "d48682e41ab842bf8368f7c3b117d157": "40.0", "4c841b6abf12446dbd125d11f47c508b": "6.666666666666667", "85b0879d9a124b4f92dc52a649336dd5": "296", "9f923404dc654699886782fc2ff057c6": "280.000000000000", "83b77e3a9fe94df6bb2d54ce5e13f7b3": "1200", "f316a91831ea406e82572110deebb366": "144", "d8b29610733d437c8a7ac1021df0771a": "5", "398459dd35aa42c6af77843a518821da": "32", "b4b5442d311049118330fbda1925058d": "189", "00893ab5a2fa4548b8d5436cf147eb53": "25.0", "47f2ad23fe26429f9dab4df8c3729de2": "41", "d98c85f7bf684060a382372a1084f555": "49", "f10025ac7d174f91af0f193ac1a0cff7": "171/16", "333cd035d7b74b6cbf750275f7dc79dd": "201", "ff80808145933e8e0145984046c008b3": "12.0", "8db0ab93f5e145c0a1a41b2917250f1b": "1001", "ab5ea9ce101f42ada396f7b0f90bdd3a": "2", "6151a489ef2040f390fa8a5e0b09f8f1": "8", "5c40f302a38542b681a66fe7d445812f": "88888873", "43e65d8e80b348bc97ce267b49c448ff": "(17.0000000000000,)", "40b767def4254e54bf3ff4943d213eca": "31.0", "2d59a66a62a04d74b32f00e4de882ca2": "6", "0b971886a0f64e50884bab5f2d219ba8": "64.0000000000000", "5db89c5a040048aa80e5a37837998377": "32", "c82a5d45502d4554a1c373873ce787f3": "3", "7468ae1690e446b6837cbe25e73f6e75": "137", "d9f19cef3f584a0c9d3a8b3f0ed14256": "26", "96cf3ffc03904a56afcab0a6e7f1f0e2": "375.0", "ff80808147e705d80147f0ffef8615de": "57.60000000000001", "02581b77f6c94047afb1ee266bbda6f4": "403.200000000000", "e84f6106a6de4f5b833692d8e53a7ff2": "144", "790a5599c35042f196cf9cffabf55dbb": "24", "172dec3b843c4657aba30bd3cefc72af": "15", "3b8d290ddc7c46eab5308e027e966867": "7", "4faa7cdc94484acfae50efabfb978f4f": "3552713678800500929355621337890625", "1877f0a498564c378fe5a5a16a0034ac": "1", "ca8d7abba89c433082fa452c97eb8630": "34", "ff80808145ff6bf40145ffc7c45d00b9": "Error in executing code: list indices must be integers or slices, not Symbol", "b264ed47f79b451ba15fe02cbfc638e4": "6039063", "a1f51bd5d3e846baa346a3db05c7fa55": "110.0", "c11373d14c414f668658b4b7bdfe96d3": "Error in executing code: name 'symbols' is not defined", "4cfcec6dc7374d65afbf1b30a999a3bd": "1506", "229290954f2f40878f8f97f9e53a6b50": "Error in executing code: list indices must be integers or slices, not Symbol", "f6aa9eb4299246179ca5203f3f73ee35": "-244/3", "3664becea80b4f8bb39bdcc78a70373c": "Error in executing code: cannot unpack non-iterable NoneType object", "36e485d977f54ddc93f3dbdb9c8a06b6": "13", "145b1726b6ef47f286c185795c71bb54": "26", "d7f357c33d884825adf3ae273c2cc2aa": "1110.0", "6cb0a89a61af4d76bf76a2ec2bf561d0": "(4, 34, 505)", "1106e46257f44d41a6758bc92a9b0240": "96", "484fcdff2e6e406abb9592cb90c34d86": "23", "649e1340473545a0b85683b5eb62ea7c": "812340", "3828bca16d8b4934859db10f978b5aae": "2*pi", "d62e985f562c4ff1af26672810c72a3e": "6", "5936edc49bfb4214b176a7e64ff80757": "Error in executing code: list indices must be integers or slices, not Symbol", "0bcefd652add43ffbc3a7100af12e375": "100", "4aaab7542b95498c8cc264153b11062d": "1000", "ff8080814623402701462cc5f4130c31": "21", "ec89f56a91cf4eb2acea79c0c6c1ac9f": "Error in executing code: division by zero", "5e02bd023d004690b71483ac32a9b378": "6", "070c38484ffe401daab25e715f54452a": "20", "e063b5aed30e40e8888259b92f9ea000": "289", "d3262b44edd9483ebb258ebd02135588": "None", "1a8f8258125f44daa321a23b14cc0965": "9", "d405c954190f4fd193d7b8367137eeba": "6", "5c1467d3b48a4a6bbb73d45df159d85c": "Error in executing code: name 'V' is not defined", "fe961ca9615c48819e8cfa07fe96e718": "Execution time exceeded the limit", "2cc46892b6844269bb66410b42d8fa00": "-78382080", "a7ca98a5823347c3bdb31f6bdd53048f": "2.0", "abe015860fff46b3b83d0dc301fd193b": "15", "5b2a48988464403ebf66ca37bc5b265a": "-5", "400e595dbdc84b11b1cbd2bba99ed193": "333333", "b4c86e7fa11b4d8eb2c42607ef35c825": "0", "838deb720460414b95cc23f7abf911e1": "Error in executing code: cannot determine truth value of Relational", "bb44265061bd4bb49e9c1a47b0720148": "15", "9ee15ee6544a41f2825a179c216e5b22": "1998", "1cb22ba0ff5c4bba8df2513d3482fdf5": "18", "485ee8435e064caabe1c02603f652dc8": "Error in executing code: list index out of range", "a91dcdae340d4e4d9206ef7d3e8d2c0d": "449390", "17e32742ccce4033bf3b16bd90059b26": "(8400, 20, 20, 21)", "142d52a3577f416aae5172f1b4272ee2": "768", "268b82b16ec34fbea9ead0e4ffb605fc": "Error in executing code: 'Add' object has no attribute 'lhs'", "0093fa5310584674b5c6eebf864de294": "60.0000000000000", "8aac49074e023206014e050e7d3f0f84": "2015", "f10a41f3a471430684c0322eade0ffca": "2959", "f498cea18fd1470f9bb4d6cdc3261309": "10", "3ab944ab41554340b6fc091d474cc29d": "Error in executing code: list indices must be integers or slices, not Symbol", "755d59ecb19a4bf6beeaaac78bf12e2f": "56.0000000000000", "d07151e05ca94b55b2e954ed26896cda": "1", "2a87e09c84e34e1482c02ce6c798a109": "132.0", "b0882eadf90a408296876352a63257c7": "9", "130971effca44da5b0f3b61b68f57394": "21", "3cb20f21f5e545ebb51dc3cab368d91f": "(7, [[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161]])", "6c3466c18b60414d97e97fc724c4fd20": "23", "151466fc40514ae08619e29c37bbfe2e": "477", "a6f4923198204c2d9aaf24e7b45713bd": "11", "b14092dd34d54e81b89d9d441334f1f4": "10000", "ce4ad37b22cc4cd881df99432f05be50": "nan", "66f4651cb7244eb3903798a208e17bcc": "0", "94ed710c9f3445ada11b0a30c7b2ff14": "300.000000000000", "97b6cee14dc24a8d846b1a7f4307e964": "1920", "8367a08bdb2e4db1aeb4d09b74eef906": "44928", "5616a54a597a45ce9ed8126a6c5fac8b": "24", "11d83bbdb473476ea5a52434d91e63ab": "4", "78247ae962d94517b0f1b6c5a637ed1a": "11", "b15c83a703ca42448d594d0a6203bd4e": "3", "fbc8a12a47014c8ca96ba964839fc633": "1", "4cba262ba3cb49ccb3240d80c7a275b2": "20", "1b92507aeac94c3b8d2aae77b5c5c706": "102", "c7a62ff234ef4345837e150edb9c9cdf": "20", "ce14442ec1f54c0e940063c788fd7777": "53", "1729e0567a13465f95e0b5f263b3ec91": "5", "c0ca0d9c279f4248a89be1706dc6eaf8": "18", "137b8509e83d46d589ff45c310baba32": "15/4", "e0013d81715249a1981e29488f62d153": "501", "f095077cd9fb4331adde5571191c3b1c": "26", "c255208a028d45f7972a76403754cd95": "2047", "e38fc0865bb64f6a8e30061bb5346d69": "Error in executing code: list index out of range", "4b648595439841f9bf847ffbdecafcf7": "27", "7f4ab61712ee4fe58dfef60ddd789861": "252", "ac56d80d0fec42fcb5b7d8dab2ac4e74": "91.1", "d74204c8eb1149ccb2175090ad7d6341": "88888873", "e51c988389da45b8bf39d103492ee566": "19", "d616fe07857e4b46b9606544f3788e37": "92", "a216d24ad8c14cfbb42fbbe8a37dd8db": "9", "76713b0b21734a1a93b456eb4aacb376": "22", "9b25dd03108a4285ac1fd42310469623": "8.00000000000000", "7451dd1299514af0b3bead7b129dec53": "Execution time exceeded the limit", "f38353fa62e14323abf3474f79672e85": "2", "52d74ff269674b9bb1f33987f54631f3": "54", "7366458ec7b54717b90840ff9f3b3dcd": "54/13", "36f5ddb2e72746cb96eedd17c6fae000": "5", "de7bc68564eb49d294a5cb9a86d68a61": "None", "f4038379868545d68490ddf2a56809b0": "12.5", "1591618bb7a043c8a5b691ec55ef02ed": "11100.0", "234f1654d9ca457fa47277d4afb4d909": "13121", "f21bb0fbba5144308b4ab62df9d4b766": "Error in executing code: cannot import name 'maximize' from 'sympy' (C:\\Users\\zhyma\\miniconda3\\Lib\\site-packages\\sympy\\__init__.py)", "45a2efac48fe43ca8df488a91ea4b872": "184", "4ecb629532d247d2806525a308e55ca9": "1414.2857142857142", "37963b16695444efb8e20b279ee6d2f7": "113", "f9a21e24747b48fa817e9d6db51dc563": "32.0", "f591e2d408624e3596243fe68a73fe0c": "5.0", "895d4ab35f2a4cc5bb8b6c6375863950": "Error in executing code: list indices must be integers or slices, not Symbol", "5438a300d562464cbd58026dfa45e591": "Error in executing code: cannot access local variable 'm' where it is not associated with a value", "b60640c6a79945aebeaa5b77c2f7791e": "30", "9f4fcac9e4004f749e4b67b4c61cdc5a": "17.142857142857142", "ec922c9a10c34aacbbb7cfcf224d64c0": "25.0000000000000", "1314797848134e2b9e9afddb2512052c": "1574", "33813abac0654352b93d4070d86ec332": "34", "efc10835467a46d4b92487f7089ce0e1": "207", "27b4a7eb7bff4e2c915597570471038e": "Error in executing code: name 'symbols' is not defined", "87e3e4e73e544d7ea14d9c35dc875721": "8", "c03f5460d8324f67a0ecf00ace8dc169": "6", "fb0d2e5091464eefb132d39c4e0c01cb": "24", "485c983a735d4bfcbe39b9d4aa4ee01e": "21.818181818181817", "19ee759d04804794b2b811862f53db55": "47", "3ee88a76d4b9454ab69ec8e89b378b44": "352", "a06ab2e030244a5187b09941d326ca58": "240", "09f207a32c344655b2112ff65f363a82": "Error in executing code: could not solve -Mod(x, 205) + Mod(x, 262)", "2b6884f4f6b545dab3886c625588a557": "24.5", "3401b0c30ddf4cc982547374aa782b04": "3", "65ae7ffcbc64477da1eb5e5feddd80b6": "44", "49b41f10e0124e80af70846b6b72f126": "1771561", "e7a246b8d6e24a61981fa59fc2027923": "14", "4331b361b2b1433bb5618059bc542c26": "196.33333333333334", "9a94ce09e09f43e7944e8d96daa2cbf3": "1.0000000000000002", "d08c2af255bb426faa245ea7e068c6fa": "Error in executing code: Replacement index 4 out of range for positional args tuple", "e449fa11908e43908180a88ae76639bc": "1792.0", "a186bbc3cf0e4dbb94773776958d2655": "15.0", "1172535b7a7e410ca7d8947691b4a72a": "0", "bbd02d563d114b368c2659520325c930": "1500", "650b5d4faa6a4469bd82260883a531a6": "17.0", "44a96176f3f64bc78197d85f3f3ccf27": "Error in executing code: list indices must be integers or slices, not Symbol", "45046fc96a934551a9a8d57dee72559a": "154/3", "9091c087150d46eca27bca6058ca936e": "48", "d7375a35b0ad4e068af86375041b0694": "30.0", "dd8b8a0eef8a4a1d9fe484a6f1d83b22": "286800", "4e323994fe294782897328e6275533a4": "2*k/5 + 4", "b156ab66478046658d15a45bdd3434b1": "Execution time exceeded the limit", "1967d26b87564de492629e9b34ac91eb": "5", "e17ec3714d8f4b17b1a90f934d179b9e": "20.0", "4c2b42f3711848ef9cb1f84ba25d5241": "1875.00000000000", "ff8080814526d2f401452794f49c0410": "1", "6c9ebe3a45264310992894281997d58e": "180", "9aacbff2912d4320b16137e9458f619e": "4608", "0bc3f90d557d4d7bb3ffc1f96597a2df": "40.0", "c3b0136e2039489390b3e33d21044f7c": "17", "3b166e0ca0f448fb9abfc60dc48e69f2": "1615", "37ed32ef10bc446fbee08605dd265cbc": "Error in executing code: name 'symbols' is not defined", "01a652e4af8d4c63ba5e5a563802b517": "36.0000000000000", "3d8ef0f3ab2440daa69b1f227999cbe3": "60", "6b868620306541fa8dd256308b52e5dc": "104.4", "fdefb93a5d59461b9cb9c655fc352358": "28", "a1086e693b7e441ea33382e872b9a403": "Error in executing code: No module named 'scipy'", "0cc96a359e134d6c83712bb6f92b1ca5": "10.0", "8acc69551f2940d1b9c5670c0e0e281d": "-8", "ff80808146233fe1014627f5f1d90560": "130", "02973a95b3ab4c75b595bc8089b48678": "14.0", "5189403105ee448ca7ab8ed217bbbcb8": "12", "713c0d20c9224464890801241d842e0a": "168", "cdea3721fe6e42919ede179d079219c9": "Error in executing code: ", "9afdc7811fe049b4821ccc2ba09278f5": "81", "9989275e3b734e738b502237f2a28a84": "53.99999999999999", "340a26981d25411a991426992d668de1": "-1002", "a4066e5dfe744ab98c6f1f1626cb10a0": "Error in executing code: cannot access local variable 'daily_work_second_period' where it is not associated with a value", "68b7bb57c5b740dba5f9ce31691d7e66": "('Xiao Su', 10)", "13d10d2909564b6c866c0990cb6db467": "Execution time exceeded the limit", "749376f138ab4e24ad5b5e6ad18daa62": "40.0", "a5ed1b3f14234e43a6500cdce5a5ee7c": "495.0", "21b0a43660574a91bc0bbdfbab157529": "10", "0f627a049df54700850f5e8d01d9fb47": "10007", "e5fa0ecd0c484e5da3208324350dcb8c": "8", "29f8fbc4bc034c3c8aa000ab8ff1b132": "3124", "aa58a618e0a740ac88d0ca349299a907": "15.0", "4c22ec0a171a4332b5fc3bc8bb53249f": "14.4", "879aeffa1df548828282ef5d106d2825": "111092", "292b283863f1495da8db642a583d66e3": "8", "4095bbbe45d74d1b8be805e0a582b05b": "Error in executing code: list indices must be integers or slices, not Symbol", "107b1f1d36254f089ad6e8f01ff92c35": "Execution time exceeded the limit", "69b30052ab4b40dfa838cc98690fe4ba": "2000", "9529caff93d84931ab94352f361909f8": "8.099999999999994", "a0f6524693004e47a6bdf089521ec9f7": "38", "5394b243cca64f768679987c1df86805": "104976", "22e040a7e1db450eac7f91dcf9da42f4": "5.0", "d9590b65f3a74727a7ab1db6c3baf74e": "Error in executing code: invalid syntax (<string>, line 27)", "d295b1b752514455b10656094776ac37": "0.37", "1901da9eb2cb4d3aa7ce2b690057feaf": "26", "86c4c7c6be0343358e3184e53df0eb3c": "67", "063e7cabf0e4471bbde3f4bf37d12303": "108.24153406772746", "1cde1a0ce12f430694f3c6d8170a81ff": "855", "7208716b9c6c46f7ad778ff60286f0f2": "7290", "329b2b71fc494ca08f800d5d1f4269da": "2400.0", "c3b2f857fb1e451eb4a0f6777301f6c0": "1675.00000000000", "b6d556f08afd40eb8a4f0289da98341e": "16", "b755041cadaf4587a87ccf072dc1dd05": "Error in executing code: cannot access local variable 'original_number' where it is not associated with a value", "e05f9c6f1628461f9824ba1649f374a5": "420.0", "af4c99698d314480aa00c4903ddf66bb": "1110.0", "4d868b0a15fd44029d0faa90cf004834": "12345678901234", "94e664ea99574c508c8def6ec07010fc": "Error in executing code: name 'symbols' is not defined", "ff80808147248448014732e3f95b1198": "3", "e1fd49029f46455e955436b052447264": "4.349999999999994", "e126892885cb41eeb35dc219ff23fd67": "4", "9af258e40acd41e5a1e46e29b6d2261d": "12.5", "e339bf20d02e435db27aaeec07980b09": "8.999999999999998", "7e84bb13cbe6411abc227a91935f3976": "Error in executing code: Not a properly formatted recurring decimal.", "40fe4a3f4f0f4b63967b03d5e12cffb5": "512.0", "6a72d8970f76465093a36ea506aa8b9d": "E", "2e8036f22b3a46f9858e4e832a235f5a": "None", "5e633339d1594bfa844631a03dced28e": "0", "ff808081488801c601488c22ac9d0e1d": "713.8461538461538", "d82615801a7f48d696e4c312609c5aaa": "180", "2e512312ca58446eba82018aac6fb6fb": "240000.000000000", "ff80808145f521570145fe59709f0fe1": "Execution time exceeded the limit", "fa85b29d413b4d2387c0e1a5db34fd77": "1991", "50a914e6665647408d569808d3ca741d": "1", "2a09e4c9d6584a5baff441b6225683b0": "8", "8ec70feff13b4d1a8d6e39b3a1086439": "500", "c58eef962b0f4d6187d91f66dc9a8d79": "31", "fb2c28264e3a4140a05080f914809b3a": "18.666666666666664", "50c9a86c4af64dfabb7a1bc94c913ddd": "25.0", "4af5ae1994ca4a79b3372ceb0d259815": "None", "e745aaa6fe684cd082bc3453a882222e": "110", "c449c6debb1b4edb84925506a7745191": "Error in executing code: pow expected 2 arguments, got 3", "f496b1ca39f546be880ce64aa9c4bd47": "11", "6a1efb9a5bb842e595191dd52aad0623": "1066.6666666666667", "44b4fc25c9604517be3fc27c45842891": "51", "4adb5e266566468095230b8ec89421ff": "108", "7d67972592ac45be9f73aa5bf833b3b0": "420.0", "2518e0c95cb348ad87dbe0b6dd39d26a": "0", "5bac74755e084deb821e2513054cdde8": "Error in executing code: could not solve Mod(n, 4) - 10", "d099a352a29a407193239fb20a5ea73d": "200", "ff808081456fc18b01457930f44e1a94": "19.2857142857143", "ab1be848804e487db1ad83953adbd090": "5700", "6ec10363eb8c4efc8c0094a9d3781dc9": "1611", "4200c89d8cb3461186a66eba24c64a60": "88888873", "6d38781554074f0c9c61163b73924e1b": "10000", "64911efb5ee34f6f9aa715d1deae5c46": "Error in executing code: list index out of range", "423c5646ce13427c8a14a3c62cf2910e": "8955", "573b70d8c8144ce987dde61ded8fa862": "9", "be9f675ca86c4ebb84cde2a34c27cd03": "34", "9e846d616c194c85a21e495fbc25b8d1": "150", "75f4a21f386c4e2ebc08783c22430c28": "600", "242a3bc9f7b54a60b3a4a4cce3154198": "47", "8fbd477f12b64df5979aac995791f5f8": "6.0", "7991fe201c6f45feb073d27d542abb29": "18", "2f5127949a7642a488f2fc4497c2bfc1": "9.0", "b7e0a0fabc7b42cdad289fdc1c278688": "Error in executing code: name 'symbols' is not defined", "fcec7b66f0c947aeb199e516019534eb": "9", "348de0cfd9c44c6ea545522ba249c850": "E/3", "b3291751743f4ad9a4e3f6e90f25c9ae": "5.0", "cd058dad4d2e4c648b57a9adb6dcc6b9": "20", "59cd69646253400ead245ef783d80540": "94", "ff8080814638e07e01463de891950535": "2029", "24046ee134b140e79d5c1e125d7b54af": "5375", "cea90d49c7ad426f9d289d8178dd8d03": "1368", "dc5e82cdb36b40928e346a8b04658cb2": "1742", "273c0d7aeb0644949658514f3c7b251d": "Error in executing code: list indices must be integers or slices, not Symbol", "ff8080814d9efa82014dae1dd57112f9": "Execution time exceeded the limit", "dca662a49cc84cca8708800048710226": "12.0", "231aa6aca3074df9a91cf9ec58fe9501": "24", "3321018954144929aaa73690f055300e": "1001.0", "50b73424e6684a96a65c31f34abbe89e": "4.0", "03fa03ddf3284299b01c872addaaf884": "Error in executing code: cannot access local variable 'x' where it is not associated with a value", "de9aeb42a4f941babfe5c4a647c2202c": "141", "df822239909545c39d53fbd68179c63a": "1.549946058392216", "e47eccc74ece42fb8fded771d88bef11": "2051234", "ff80808145933e8e01459840795208be": "10.0", "e2030bedf44c482f8d5d1006e1ba7b05": "130.000000000000", "11c91615c82c4322a4faf557945cb735": "1017072", "01e4c81acad94ac4b3c60fcbd28beef9": "2020", "b1c8ef9ac5974296b69556b57fd18e8d": "4.00000000000000", "a7a3fc003cba45cd9cf798be365d73f2": "Error in executing code: list index out of range", "b39e974423f9419ab1030d31744e5651": "6", "11dd530d47084f6db8d376f2f442407c": "Error in executing code: pow expected 2 arguments, got 3", "1690faf674bc451488c8634fc1eb5b00": "Error in executing code: list indices must be integers or slices, not Symbol", "49ca67ad29d14dda9761565ae91a548f": "299.99999999999994", "cdd3143c9e294d4895b9614b4a9f35e8": "2300.0", "7d9117fd995e484fb98c7f904812e7af": "Error in executing code: could not solve Mod(n, 7)", "170d3e5846314c58b85c155f7377c0de": "5", "e84574eb0a4b4ccd805fdc48a1043c3e": "Error in executing code: No module named 'scipy'", "9442d3a99ccc494f9b84adb2b7be1383": "None", "d6c8f2298cba4a3782b37c52d84c1c8c": "None", "5fb3bc7155014d9490650978b7c01293": "15.000000000000004", "a86e95ea807c4551a604afdc2770f8d3": "None", "4b84971f5222423691e9577ac3827cc1": "439", "df9073356d0d4835b1e85496aafa19b6": "26.0", "63bacf19b69946afa94bd8230699f474": "1073", "8316ff4b25544e878f8a91c40a0d4927": "20", "aee1776caa404bcea78a2f508e5bb1ef": "10", "f4d28ff42cd34c1791381a9ad62b9acd": "Error in executing code: name 'symbols' is not defined", "719c0588719d4fee90e65fcb1d954ec0": "240", "81b72a29f73047fea8bf9b540d8e7a78": "175", "8aac4907519fa10a0151f3534d2b4c6a": "200731212", "fd92cdeb84954373ace3e33065dc26ea": "13", "43feb72358f34a48b87fbaf08904d149": "306", "5833095d705a4a3e87a39cd60aabb55f": "40", "b9dbb112a03f4bd290b8a261442f8007": "0", "d34352d8ca82420a8c4d21ec8157f82d": "40", "ea2c6603ab19450e944e568f48dc0cc9": "1", "392912ab319e4b3fa994c9d2b6d141bb": "500.000000000000", "84f5b37f348a4dc48cdfdfeb3f3b9159": "-4", "aa9bf91600cb4ed2b839818402ee5616": "7", "03dbfac9da1f4f6abeca18529c2b9619": "None", "ff8080814526d2f401452794ef95040e": "0", "e289e89b6f06499b9363737f7becb76c": "80.0", "ff808081477bd84c014790a044b9346e": "Error in executing code: No module named 'scipy'", "e2e2f2f3de6c4649a3c6c11f1630dba8": "Error in executing code: Total work should be the same", "6b8e549581274579bf64600ece29c209": "56.0000000000000", "7815c2886be44e94a920b81e13932ab2": "20", "9bfdc911218c4ce39cfb883e0be38831": "Error in executing code: 'Add' object cannot be interpreted as an integer", "4bdd93aa10d046b086c213c51fd5626b": "17", "ff8080814715301501471adbde6a04e5": "28", "280fe733ea18450f9f9a241decf6769f": "400.000000000000", "e90ec516ccb449769a66f8fbf05b5546": "200.0", "6897a8be7413425492e7720601c1582a": "Error in executing code: list indices must be integers or slices, not Symbol", "9921f8c24c924c33b737cc7f67ce4941": "12", "de80e411e7a34f0ea4d20ab345a0ff8b": "2390", "ee14823fc6e8444eb7c775416ea09b37": "4261.5", "5df689557fd94313bc885410f1800fa1": "20.0000000000000", "cf396b7ae740470d9eed72796bee2104": "(70, 30)", "83bc5b2f8fc34a99a8ead23837934520": "111105", "2513ed2f24834233afffadc0091bd7d0": "8", "06418237ff4f4a2282c169263036f448": "1.5", "554d2bdb70074a8dab913fca4738c7e1": "35", "5c8ed8b7610e4351a57160c17e9c0809": "1", "39cbf403c7664143a376c0d478eeca3a": "12", "74a62adc03954d348dd7e66911a453e7": "60", "bb360253079f4742bf765377cf92ec3d": "-5", "ff8080814502fa2401450bc9278c1667": "291.0", "80be6a484ba447d5b2f1d78f092b0d67": "34", "5493af36aac0495ebac7805d933a345d": "700", "738b6d7146454977a82b203a0d0a191b": "12.0", "5908dcb0f6c74522a5a85530c764c38a": "0", "59cb8fba1c0848a5b14ca28eabab7ef0": "486", "5f29e0236737413e8e05e548819e2b64": "('C', 30)", "d19f61c0c6b94bcf9b2a5a89c299d581": "-0.020000000000000018", "4af35bd3757f4854bb2f4b502b252a7c": "20", "97a58e29054249cca25be332af1a15fb": "Error in executing code: name 'symbols' is not defined", "19545e1756ef40019a22bf5388464cb0": "2", "0810b89f56f242ffb8ff717c2fffd969": "232", "4caaafc7848a45cebcaf16711b940c29": "None", "05017e32832e493a8d6e61ad985cf5a4": "2", "f1c85e0af2554185bcf9cef26a4d7b5d": "6972", "bbb6257dbae549c4a787c62bbc289421": "4.0", "ca12177a2de34481866974a6f38d72dd": "203", "3af8702aa81e41fc88372870b73c8f7d": "107.185", "b0e8880d2b0a468db07f5600a1dc9f92": "324.0", "1b529123aa7e4ebbae39436a8d4ad230": "0", "d497bbcddc864d5ca7310f5f842dcc2e": "485", "ff196c58315d42898a58fb1bed749ab5": "11", "1c44a2667ba8418f9343e54ef49aed01": "-12", "56dd9e4161054ecc8e2de06d50794b1b": "0", "b6d20363fee44a87a22af1e5a4f8d892": "0.375000000000000", "08021f8f23ad4b33b7e83d8dc0a93c63": "Error in executing code: b", "3bfa27d659e94e1aa0305541cf6818c6": "34", "bce8941452df4e29a2eebd8dedf5cccd": "1405", "650d05de1bda4b718ea0b5a6d8b15499": "10", "90ba8c08f9a644218fe5266133cdaa79": "16.0", "ee59386e8f3e448dad674df572f70a60": "40", "8eab5c32fe2d4b2aa68ee3454774fe1a": "23", "b97fbbdfb7a045f28493529c496eacb3": "1003", "a7a380bbcfcc42749d1bb4188b28a2be": "0", "1ef255b9a8d046dab813fa70f3388940": "2.0", "361f17ae1460473dad52d1cd6fb81001": "18", "1e63b2b8bd814dbc99214ad92f9f21f6": "(11377080, 63206)", "75c9be3715e945fe9c2888139937959f": "901", "988d248afae24485a6aa20cd43651298": "0", "65c70c839441454db847a19d8c180be0": "6", "6f6afa892b73479698630796d19ab3ee": "51", "31eb6614341047b29cc937dc7ad44fc8": "1.2099999999999795", "0802065c953c4202858941501ac26aae": "92", "08301be1e47e4e7b8e66fd2e4cf643c6": "220", "369933e6be2c4677ad896b4d0df6c807": "8.333333333333332", "ff808081488801c601488c2633d20eda": "Error in executing code: senior_monks", "160117522375453ea65f753f659b4b47": "33330000", "892b32767ff140d6ad7d61a3e4cb39fa": "75", "c48e9a6b2a514549b378adf81789212e": "1232616", "d4e2eb8f92ea46ebb9d51f35c505d5d1": "1012.5", "2a5bcbd789814cc68512703347c5bc1e": "10", "3a575f7832c047b18600106486e7183d": "254", "b1174aab8b3e4fd4a6f06e304d6ff492": "Error in executing code: 'Symbol' object is not subscriptable", "785560913d554825bf3f360ef18f4b04": "119", "386af8275c7e49d9be85e933cb70e862": "12.8", "2e677c42e4fa4c2dbf3a5dffea7f26e3": "285", "e08a20b5d7234982b9fde18e7fe32a2a": "990", "efe2512a12f0411d8ff5ba4278a6e103": "154", "a63f4e502bb74b22bce03aa207588326": "Error in executing code: name 'solve' is not defined", "1d00b647079542adad8dd7f762bf9d80": "3160", "c3aa4d5de0f540c1890459699f993721": "180", "109a5c9de0034c0c930efde6d77928ec": "Error in executing code: cannot unpack non-iterable Mul object", "ec9fbe2c65e94405a1e7f1d10234b427": "72372.0", "9b6bac36f2bd4d0eb6aa395cd265e1b9": "6", "06ef3cfc28294606b26f33acc759d30e": "10.0", "a37642b36b2e486da1a2993a0f044a72": "354", "3c3841ef83f84871ab7c4312b1e3a099": "6", "641ce84ad5834fe88004bc0783093e4f": "2.0", "3a3c30365f8547cb8c4c00d5a85021cf": "6", "f8f03aaf1d89455c998e7e5ca0e939f1": "Error in executing code: list indices must be integers or slices, not Symbol", "6add48ccdff64c4787bf9b4bdb260c4d": "3.0", "58730b2edc314576ad97f68bb484bbbf": "12345678901234", "8f9ea2a05b294280b720bfad4e078854": "2", "b52fec4571ce49e293f6303f25647118": "4", "92218dd7ca32493ba762ba51baaf4b3b": "Error in executing code: Sympify of expression 'could not parse '0.2(018567)'' failed, because of exception being raised:\nSyntaxError: invalid syntax. Perhaps you forgot a comma? (<string>, line 1)", "39a471cdcc204d3ba61e73e3c95b8206": "15", "3e5aac5aa0db4eeaa03138455d76a6df": "560.000000000000", "711af8ab2ae545cdb826848135abbcad": "21.0", "3fc59448ece44194811ffba3562ef12e": "0", "e7d28ef79c6f4efc906d415a1b7a8d93": "6", "492dc608b00b4a6ea04f57dd313cb12a": "8", "a1e8c173c8cc4df586b69110cbb98b63": "4", "a600b050056e439385fea6bf3e5800ef": "6", "25286e6a07b342d9a1b09a7cdfa2ddce": "4", "ae6a1461de2d4569a33b43807255172b": "1046", "097aad5f081740e69e941a6adb119ef1": "32.0000000000000", "e807fcd74abf4f0f8f4b8379e4648968": "55", "685bbbb585e34075bbed1105392c4eca": "30", "a9dd0355f98647aaaaf7a973d73eb97d": "43214", "e022017b58df485a8caed309c1720cac": "17709", "d1d67f149d7c4c9a95e1699e2bb834c5": "660.000000000000", "6a1a3a13802e4e31b9440d7060069e85": "30", "03e643565bdd47c2bc2bb83f5a11a13e": "105", "27c4bd0099d6413c93c61b72ea21e1fe": "7", "11ec0f6a42e04b17aef81bd044052a7b": "144", "e2361ab3a1704702a756a394ce132af8": "108", "fb02f705fa5444d285ef1f15a6f724cf": "23456", "ff808081488801c601488c2633250ed8": "Error in executing code: list indices must be integers or slices, not Symbol", "3a00d2f8ca1c4ca8873f5ed402b59b5b": "15.0", "6608ab5ba61f4510bb5faa4ab9ef7775": "Execution time exceeded the limit", "4102e57ba9864e73a627876c7fe72d58": "7", "d793400237de436aa898a18c2922e66c": "22", "b98fa709f03940b3aae92aad3ab8fc68": "inf", "0eea9d5d7909448e8d08375b5bd39b62": "5", "359b0d5752104310be0cf39318c6ecd6": "0", "ff8080814a19e701014a32fb67cf35eb": "120.000000000000", "fddff9cb15d749daa4c35c14bd571cff": "1.1428571428571428", "75fb609a1001415f95c68b1f45b3bb39": "Execution time exceeded the limit", "ad1653e40b4c498dbeba343f406cd2b6": "1644.0", "398eacc6c99c4f849482d47ba8704c11": "-9900.0", "8664d5b66121453c885d2125ac5a4f38": "1", "e9ab52c297104f8ca5f87b84c90d8499": "1530.0", "f456683e9a92495b8d7c4f32642baeb7": "59", "110384ee47034ef0aeb3220b5ef6d237": "14", "ff80808145cb8ada0145cb8e55c1001a": "24.0000000000000", "6a5bb70419904f21a1ea25660a3040b1": "1.73333333333333", "91b19f51c10d41a39f1befe056ba025f": "Execution time exceeded the limit", "83e18aec66a04f46b6a490058abeffa8": "30", "5c056e814ab84f9f9c7b51f3962ecace": "62", "15aa3c3e616a462b87dcd5ea7adde797": "33", "ff8080814526d2f401452c90b8b01d9d": "1434", "18c28f53a07d4f36a3a868cf8ce87b84": "Execution time exceeded the limit", "0e176d59d2e746a68c2b51abb41842eb": "{'equation_solution': 2, 'series_sum': 94.79999999999998}", "532ae4f1208540db97915889f5924329": "180.000000000000", "8e31f32a581749b0aaedd7399bfd84f6": "97", "9ad80f61fa1b42dd833aa7e4b9f89ca6": "120.0", "47c27bfc5b2e400bbf8a230fbc4066d6": "47", "2890fa75c8464e8dbd7823c1841e45c3": "0", "a9343d9823404a39a4b3cd5a2d50fde6": "7", "554b2400a4fd4f3abec6c2d6e00f7172": "67", "a8e600750ef04392bdc606751e7aa92f": "29/2", "17b2ce55e448411788b741e440a6e079": "44", "a76056a66ea8472aa632ef9fa19f9da3": "28.0", "41b226088f0d4e9fa7f06bc9e3cb1391": "None", "0d9971d1078f4b738824a48dfbec8702": "980", "04e0fdc8ffc8474d98468999b7238643": "480", "ed3b19c389a945e08e55d70b52523991": "189", "c10b1f580674452ab4953aaef8d371fd": "0", "492eeefbf624448bbf9d87b2899c97ec": "20.0", "5d57d3bf01c64559a846e7273ea7e317": "888", "a29a7cb95d36417488cafd23d240c1ca": "25", "a42c83cca4a7418b8768c091fb6aee96": "10", "523db1da9c3343fca1db5efa143544de": "90", "3295a9ea1ff641f4b1779641c95c85f6": "23", "f7f64056e4bb471abead6e88a3575fd9": "300.0", "92ce9ca07e024f23829044edc2905913": "1092", "d3d6f3c70352468cab5c35b66001662d": "Error in executing code: could not solve Mod(n, 7) - 1", "7fbe71a1892448eab1e4b7a49fb74ccc": "(6, 10, 12)", "e066bece4c2c47a49b2e2d533e856d72": "10", "f3c34e44447f403e9e45bb4fb1cd9209": "77", "2b0bc27013a74fce8efc8a6bf9fc4fc5": "Error in executing code: name 'I' is not defined", "8eb8479cf5144722a1b5a6a98a9ac083": "Error in executing code: cannot access local variable 'y' where it is not associated with a value", "d5303373eadc42ab925c59dfa5c6e686": "705", "f3c14a7e779e4e859b8aae339b462bff": "66", "94b373f705ee47b7bbd61a669bb9a78c": "120", "ff80808145ff6bf40146105e68411ea2": "4.242857142857143", "176d071be24b4a0bb281566854e54b4d": "700", "710c15788a654f18ae355dfa48c0cc6f": "10", "ff80808149fa701b014a000449090d72": "8", "4e41b1ca3b504a04a7b34f6daa2c889e": "334", "49a95cc03ee246adb5d24c8bd32b0298": "9", "411da0d6f97d4eacae512c17e1e7127c": "1111.0", "83b7daff208241ba98e6eb7a5d5dc46a": "20", "4c3d4d9b523b405985c7ba7028ac20bc": "13", "86d231e50ef3449687b76059bd63a261": "4", "da76ebdf695f471f8460f542cf8599c0": "6.2025", "8f415383914f41cba031189ddaacd639": "46", "803e15d0b52444529a3be32e513ce0f3": "148", "68f32bbdac484b669c813045cd243c22": "1.41421356237310", "d21a3c14a0ec4fcc8598531342b96641": "3", "7f8b5d65690d4dc690ba11723d41948e": "1000.00000000000", "c6ece05c620243d1ba724571d4c75c81": "22.5", "c9320b30c5304a7b838bb43ace259701": "15.0", "da051c4e9cac4c2084ce89cec53d98ff": "4", "1df172c028b2438a9100b9f5966e1714": "204", "b13a63b7508942eb89f839b8bc9b4198": "0.450000000000000", "9f2cdddcca4a4e85a3abba9d2435438b": "Error in executing code: name 'div' is not defined", "6a4216193f0743f6b8ccd79d8f26c2f0": "None", "bb1400bd925c4e60986abee8a3640bb5": "0", "74b17f9bcb8d4bf29534bfabd4908867": "32", "541b2e357ac646cd9eb256b08c64e36d": "Error in executing code: cannot determine truth value of Relational", "b1678ad5311144c4a1c8bde800a23e68": "171", "259b36066f094d8b855dff1561b859b3": "10000", "8c884daa93d343368c0f8b8e764b0117": "24", "6b855fe3f63e41739ee49ab0581a102e": "14", "5263f6fe56f742d7a2d2a5545ae829cf": "2", "eb0221738785437198c4d0cefa50b1a7": "54", "1334aa74ea6a414b9153e5472a62780a": "48", "6c8393aab58b4faab09131c2f0edf955": "4", "39a589c0fcd3400b9437607e5f2b620e": "[13.0000000000000]", "5c6ba58b6f6840429e303cba765b8f41": "2020.0", "bcb20257b06c41d49438c93e5199be70": "6", "33b48d85367345089e84dc5eb00fbc8a": "564", "f0092cd78fd8497ca4a30e111f607dd9": "10053", "9b5cf4291d9a4ee2abd029b32c7cd0c7": "11/10", "4ffbf9b36c344e208a7d176fb8f3191b": "821", "c7fcb314ed694e1a98d3f331797c4744": "38", "9a87d8600c7f4f16aa96d8dea18e4c93": "9", "641c29da6d3744918060e042dd872be9": "Error in executing code: invalid input: sqrt(2)", "8a5f7f1cda7944389fbb56b9ea63b6b2": "2", "3f0383e6cd6d48edb35971d11077e43a": "120", "540d84024beb4136892347281fb3c556": "120", "20dd0a96305f450b8c40be036c477ce9": "4", "4fc39259005a49c0b145f19281081fb7": "360", "1fb5cd36a9784177bc22151aeac22ff0": "0.0", "e0ce34f7918947f6bffa83b8b41ff11b": "22", "6591d7c88f034c079ca057a6d9c6f2c1": "6", "ff9983eec3cc49baa78a8048f6b1f155": "None", "c7fd39aebfa8421dac3512d2938dd265": "102.0", "768a3b58171a4abea6f6ad66eb36948a": "588.0", "e05f25253a784e8583008c603629f503": "5", "a0a42cbba6734878add40b797f6c8a61": "500", "861f880dce834d75a56753797a343c21": "1", "55cf9377c1ae445eb2eaa708bd407e51": "Execution time exceeded the limit", "5511fb19cd55453f93e3e1693183e734": "1440", "d17040183c654adf86fa1106f967bc25": "808", "5751c3053c304a9fb935e7a305e9b059": "Error in executing code: No module named 'scipy'", "ede13b1f610345af9ef7e374731333f4": "16", "f8465af5027146428a25af6ca9113fee": "987", "ff8080814526d2f4014527941a4403d8": "Error in executing code: invalid literal for int() with base 2: '125'", "b40a54e93c9b457d81d31d1ee8584f1f": "60.0", "9bf055287aa84f8e85bbf8cb8076309e": "253", "aa32d5da701e4831b98aafddffb72d89": "Error in executing code: list indices must be integers or slices, not Symbol", "643b854c9b034012b1131c73129ce8ce": "None", "dbc9c63972bf4c0f8d2418466fb55312": "1", "390df2e3fa4f43acb903ae132e97ddce": "62", "26d52685932548b99ad2f94faf5c44cf": "24", "739e95f51c1f45299fb59c68a421d9ad": "30", "546892c69a64444aa2ac938d88b36571": "10", "98996252c9814fd4a2bc62b414bd73c0": "338350", "da986a426b244d3794e96c3cf614022a": "9", "8077e4ec982a4949a6427639b06a3a15": "22", "0772b5dc1cee444ea029f3a843ff1db9": "0", "c241a8cfa40d4596bfa0aaf85d486dc1": "40", "f4a93aa82d6f43ddaf769d977819812c": "80", "e3a84692026e41f2bcde15ad52e035c9": "Error in executing code: '>' not supported between instances of 'Poly' and 'int'", "3ee8db03dc0f46d2960f1f275a880d8d": "654", "3e1468b892694a80be4efbd5764188cb": "None", "9647ff66467542548b3605f64859804a": "24.999999999999993", "ff80808146dc2afe0146dc5232780245": "Error in executing code: BooleanAtom not allowed in this context.", "b59f5bdb276541f7b08d3d866e460ddd": "68.0909090909091", "7ba38668db774e83bd94d60cfe628a64": "10", "d4630ddaa81e49b180fb3e4d0e5576f6": "130", "661bae7793d04ba8bac4c4fbc8f78029": "15", "b1be41f82b1646f3b451b6bca1621b45": "30.0", "5c7ac1e73ea24b4ab49e26328d76522f": "60.0", "49ec9600269c49feb15e2cd70ff7fe0a": "7.111111111111112", "8d26dff93d1f4f44857f7cfec48af375": "676", "809cf94faa5d4e049eaefa38986b2f7e": "1400.00000000000", "b5a6b36226fb48a9b0a6fb9100d86804": "60.0", "53b8b59254c544d6a5694b44e9853820": "1792", "2cea26e570e544219344c690d8889857": "Error in executing code: Exceeds the limit (4300 digits) for integer string conversion: value has 10613 digits; use sys.set_int_max_str_digits() to increase the limit", "be8907f8dbbf42d2997435d53c0aee82": "26", "5f40e5857f654462898bcbb6d979d700": "2", "05ea44702dfe4f2fb346600ef88b2167": "Error in executing code: list indices must be integers or slices, not Symbol", "e67e514a57994648ab192c4fe6d61e1f": "4", "aefcecb5f83046d48c052434d1f64442": "350", "3cab3dfc3c5a4761bc27fb2d4b7096c4": "13", "0fc82263966248c7b0657eb382a4bc2d": "1", "1492ae1904134da3b1af89a76f7cdc71": "Execution time exceeded the limit", "3e552052d98d450d8dd5379ba8e07d1e": "None", "f34c95f5fb3a4fa38a6f1bdd7c04d518": "Error in executing code: list index out of range", "d478730a8d84431490c1f58c2cc138c8": "3600.0", "f239674c12344c0e880dd4b0b7d9d904": "9.00000000000000", "ced900601aa74f7eade75fd4cd1c93dd": "13", "c46460705e994f79acdcbb986d28db50": "49", "f8d5000eb56748ee9acc0b884e133543": "9", "b4b2591af15e4624b3c5647ed564018d": "285", "4eddd1c86b3241e69558cbcfdbc054e5": "None", "1dea975ac3c74cb397cdc90864d84c3c": "64.75", "400efeb24886443fb67607a73c2d9b62": "Error in executing code: tuple indices must be integers or slices, not Symbol", "390f7217f43a4ce08e0bc9e7c19af786": "0", "e7df856c30f742d699fadc446bb76ef0": "None", "99e49181da6f4a18838a952abfc11eb2": "Error in executing code: name 'd' is not defined", "12cccb60c7ec4b81b3bf079e9fe73f84": "3.0", "3638539bdcf342f1b3b28075a1db3292": "None", "ca20baa87fe448a596907cb1fd0fb5a7": "25.0", "bb0232756b6c4e79b11b1fa6e06aa641": "960000.0", "ad685dd05a2749378d7189a04fdea1df": "8589934592.0", "ea65c2aa3cba4972b1eac793768076a4": "240", "fde4eb2c34d94be0bbc85d2725e4b725": "300.000000000000", "7c4ee75610154463bcaafb854a3a4dac": "100.0", "3f294d011d654388b94062b0c3ec268d": "21", "eafda516aa664930ab22e156b7eb7694": "3", "23826da9787d478887abfe879ecfe1d0": "44", "0dfd10900c06495d87d27a9c06fe992a": "60", "9558084d64434669812dce900cde346a": "1356802260", "6ed2548f9bf74552abf0dc6f7c1257ea": "6652800", "56b8ff2f89cd4b0195c3b1bf76183ec2": "66", "26559b1f3ec24166a503bf27b896dcb2": "12.000000000000002", "e11b7d58930f4659a696c733ed41c1ee": "24960", "b8cb6bea22e04e689dc26498217316b6": "None", "60d9afa66b664cd0b41993ff8f848d74": "7", "afbbc10283744d39902afce0d81de6f6": "Execution time exceeded the limit", "8e6894a33f114c69ab42e85456f3503c": "40", "16b31710dea345d1bb6cac060a2fe46e": "59", "635cf83c7f6c47ae98c4f1816190aeee": "24", "1ad22b8c08d44bceb2bf3204fb67431e": "1039", "73b057bf75a647ada9fa00abf4c9ded9": "Error in executing code: '>=' not supported between instances of 'str' and 'int'", "e7b79a62452f4113a12e2612c18816f5": "-10", "fe22396ffe5f403495696488fb048977": "Error in executing code: tuple indices must be integers or slices, not Symbol", "8d002002720943c98c6fea4044b019ee": "Error in executing code: list indices must be integers or slices, not Symbol", "0e217c496ddd49d4834c4064d8ddd552": "Error in executing code: list indices must be integers or slices, not Symbol", "eb8287ccc6164c37b3280c5d58673948": "Error in executing code: list indices must be integers or slices, not Symbol", "edae764b70da4cb1beaf0b0eccdf730e": "81836", "dd6dbc9f6d45464391f8ceaea68cfc5c": "80", "504f35c91f784cb88053300dbd9be618": "16.0000000000000", "7e962e3449c949438b66133a0bb0080e": "8", "bff41a5bac0c48b487a87b71f2d7b206": "907200.0", "3ff4812d171848648514965befedc401": "33.43283582089553", "947e4752ffb64243a75c2551ba3def11": "4102", "0fa46fd4b6a743dda65c3fd751d85f1a": "Error in executing code: invalid syntax (<string>, line 1)", "7e61f603b78544cba4e58a3b027c7bd7": "9557", "16ffb0c16f1f42b8bbc0456a9ca41951": "62", "80f4858dcb8642db875ef7b80d10e00b": "24", "8ad33ca962194111b32f4ccba62028f1": "04:20 PM", "50a0a626b0404f2c9129135af86cce5f": "121152099", "ab68e5609110481684687e63985ee805": "6", "de21674efb6c432da39888ab37e6727f": "382", "c43e740538a14699b503c34aa5d61987": "Error in executing code: name 'symbols' is not defined", "f08888b5ada74ccda64a7553cebe76d3": "4", "c4a78df5086541bc851bd6bee0a92abd": "3.5", "ff72abde71f348f985784c86632e0d78": "Error in executing code: invalid syntax (<string>, line 1)", "c3162c06c5e346ed8e49ecd751af8e33": "102.00000000000001", "abf595c81ef74da490a3ef084796cf89": "16", "583f79b1e5d44466ac299b4880b05f1d": "0", "c7e151a9912445bc99b3e9a44d10af5c": "Error in executing code: not enough values to unpack (expected 2, got 0)", "14dc53f768894e02af4ff7ad20e199aa": "5.00000000000000", "fd307740fde248da8bfc7b79745934d3": "30", "4b0208dcab5940958b75d50189eef6d0": "11", "39384c66550f497e8b05c572c2b586fe": "99", "adec110e403949f69017c02c5ceb4a3e": "-100.0", "de9f84457a954025a757fe8447bac268": "120.000000000000", "04e0dcef829f48cfbe8cd920beb8224e": "120.000000000000", "ff808081488801c601488c227cb60ded": "1.3999999999999992", "03f5f4b11afc4333a61bfd1ade2f7441": "140", "489e8fdff21646568ff30f1fe94109b3": "1.0", "45a91fc99e5449b7825e3cbb8a9477e1": "9", "298a57c344a346f8be1725ce11f76c30": "26", "04f2d61172b647b484245800dce3e130": "True", "ff8080814d7978b9014d88eb88092ecc": "1990", "d8c7ef6b366b468bb4dd71f419383e27": "Error in executing code: z", "846bc171adcf4762ae89055bbeeab178": "41", "ff8080814518d524014526a7373a1945": "140", "622402d9cf5a4de7bbca5f31b2ee7308": "Error in executing code: name 'k' is not defined", "9ead7a0cb8e5492e9b0f3bd2aba873e2": "8002", "fb2b9a68f2be4925b7fcb3443253246e": "{2016}", "6d3d37f8407f41ed9dee0c32d80a09c6": "Error in executing code: 'Fraction' object has no attribute 'simplify'", "0dcf26c0e7604e07913a4da77b2a672a": "30.0", "722cb249266043788f628baa863946a1": "2950", "a9c5d4871ccb4a1e9b2bffd8de1e35af": "4", "98a586d952dc425985a1a8666575fb2f": "20.0000000000000", "006dc432cd4b47f59f08aed65c5f744e": "403", "a3f970f702e44ec39f3fd66486375d0f": "67", "5b99cb8c00504766a380f2e18b6c1fda": "660.000000000000", "85bfd769fee44e929e4671d281a696a8": "120.0", "e8a299f491994844854d9ec66fe27b97": "21", "2184c562af4b4371b2f1b5bf2751b889": "300", "dba0378f8d8244d0bb7adbf31ceb13d7": "Error in executing code: ", "ffb3d02a1ea64fd3b16c46c02e05f687": "20.5555555555556", "5fca03e6a0dc4f32a66af7be2be3d016": "34", "e7a40e7819534f36a39616727a3b8855": "36", "2127f0555f9149e89fbb020dcb491caf": "4", "e7577cfd989840479f4ec5cc0cd6e2f9": "3", "0263d060a00a4f97bd9289fb369d22ed": "78", "2806e05f8c1b4d36ad48401bcc3cbadf": "Error in executing code: cannot access local variable 'a_val' where it is not associated with a value", "3ea35b4747df452185df69764a3df118": "9", "c09cf94b55804f38b033c2d59eac65dc": "90.0", "9114bdc21af8498491c651ac6e4a498d": "600.0", "5bb6ac1c28b641e995541bcc9d1d225f": "240.000000000000", "46e24ab2121e41498f7d51478d180702": "0.5669999999999997", "710c469a86734b6a9e50f4f590016a7d": "8.333333333333334", "9794479991174b65af3146e81f45d7a7": "171/16", "29297bd0e0b64c8baec684f4a2a2e0a8": "120", "7267cfcb92344c78a20bee40bb918d93": "111092", "4b3803912ff0475a8223d2c9eb92e076": "47", "ff808081488801c601488c2166790d0b": "179.99999999999997", "53ef65ef94524db28f9ba3547ecf59bf": "(8, 24)", "00709d00302a40afb259d6f54d63b82c": "77", "2591fdaf14a242d597622f56b85aff9f": "19.870967741935484", "bde980cf60cf4dc5a4c8696a603acf41": "-5", "f98de17fb6104e5ca11fc00ae83f6754": "0", "a2903f41e2274c45a4a6573da5c0d4f7": "25", "04384a6f87c44d179c587fc6d8550848": "Error in executing code: cannot access local variable 'x' where it is not associated with a value", "28bfc8b373754e229d0960309a55167e": "28", "44ab5662931446e79d562e097736c4ce": "2", "76b7e49afd3345bb926168fddc9920e8": "Error in executing code: name 'symbols' is not defined", "d07b4a6c934d4bdf8e9331f0d2d8165f": "16", "e5071003c5be482cb2d290237a9df33c": "Error in executing code: 'float' object has no attribute 'limit_denominator'", "1b89b49c2811452ea87092d9b1382f16": "1", "e60e15720ded436ebaa403eafca0cb99": "Error in executing code: float division by zero", "24423cf647aa455fa12d6d7e4dafbf9b": "53", "b6bb0ef43677496fb4bf45efb22d04a6": "833280", "c8ac4d767950456fbb5a0008e2d4fcc8": "665/162 - 5*sqrt(9913)/162", "0358fc0ea80541458216bf5ad69dca13": "1", "451a93ed386444f18d3a978cb6466528": "103", "6887a9b209444961b630088d73d39d77": "Error in executing code: name 'symbols' is not defined", "1cb8a4794b624d1d829bed142e1663ff": "1574", "00912b1d1aa0407786401931d1dd9a96": "37", "6e3dc3813bc043878ebe0743387f70bd": "35", "09ff29891d394ec99a5da58335f4ecb2": "Error in executing code: name 'qi' is not defined", "27e29d6668d9451492eaeb50cfe01430": "Error in executing code: unterminated string literal (detected at line 1) (<string>, line 1)", "277d793036b14e2c8e7f64f74099151b": "5", "6af22982be774e9f9583e8fbb19f685e": "52.0", "e5c0ced086e749b9866c29f881027fbe": "17", "eb6d8886b033410992e91b7ce5c60bb6": "3", "71160508ce5d4b149ab56f085388f732": "6", "8284ccfe7cd9407094b10f0d8ae6e3be": "95", "9622224d5a2246c9a6fc918dad3d9019": "1065.0", "601cfb485cb748e29efc8832c0e07e52": "30", "f5d72351c0564340984134d3256a0a51": "Execution time exceeded the limit", "83c680f215e540c186c2feafb09b0420": "274.1948", "b20f8ab3e4694455beb2762506805186": "997", "8c90d9408e174c9f8ecd4d8acdd7c35d": "4975", "2622ca4fff5546edacf84e56e6868795": "32", "8fbea833f63f48aa8bb10520158f004b": "10.011", "de61b71819234717ba96cd3816961517": "12", "13156124537a4fea891de44ce47b2d67": "4", "6cac722d7df04f5592e21be4867e30ba": "5.5", "a1438373672e47a687696f1b449e1909": "Error in executing code: list index out of range", "727a0ff0d6f84cafb111f5fd5c369dea": "100", "720df4de38c74a1aa62fa2698c79a676": "15", "12d5df5481e3459683e602ae9da03159": "1015559.9999999598", "65adaab7cf7b47f9b848b31b627f757e": "166705", "42d644991dda4c20864a386b983cf1a4": "729", "7250a841eb6941e39282b4f72d7fc56d": "Error in executing code: invalid character 'â€œ' (U+201C) (<string>, line 1)", "9e06053470d74dd8af7412872a97e1c1": "457.45095715801136", "bf20fa6e57da4a1384e25dfe7e243612": "0", "869f08e846b649418d02a2c1b2ad6456": "None", "2fb67b15fd1f489f83104627ba8c55de": "Error in executing code: list indices must be integers or slices, not Symbol", "851054aaf794481ba61cc3040f7e2961": "-122500.000000000", "89741ab2c42641daa01535057ecf7c15": "16", "ff8080814518d5240145201f88100aa2": "24", "537e04f11fda4d8893bdc89691d40a6d": "260", "ab836156c6c84d02afc0354567d121df": "Error in executing code: list index out of range", "dd79bbbe98a74e22bdf2b73cb7bb1c39": "53.99999999999999", "fe39e611792445a58de8a202c969d11c": "5.7", "120b16f89b934d8fa883806a508752f4": "133", "e71e681f92694ab7a2839726c7d8d4e6": "3", "d19c6c6ece184c7f951a64dd1e2ae5ab": "Error in executing code: list indices must be integers or slices, not Symbol", "eba18a7bd9e74d419989a438056d15e8": "81", "10c854b24b18425582efc49f52ae1680": "0", "798bc2ef1a6f4a1dab006c6f50d41419": "6", "4d0c463aaa9d4c918e106de0a2e5e485": "231", "583baf2898b045c8b01e1d3548272036": "47", "9163bca5aa6b4805bb062fe1dddef64f": "82.2", "2b8a286c26df49c2a891985d56fd3334": "660.000000000000", "ff808081472482f501473260b8ff0ae1": "Error in executing code: name 'symbols' is not defined", "3e30b11f41b14a058be126f47399eeaf": "16000", "146bee7fac33485bbf687ee7f8054d7b": "Error in executing code: not enough values to unpack (expected 2, got 1)", "a43b03a688004d049a69fb5c3bd1fa89": "85", "cf1465edbc924d33a4372b1952ef0e0d": "35/3", "b9bd498e60ac4994917d492065218140": "0", "0a73f13c75324891bd6672df66ce2338": "12", "0b03cf1c59184e37b5edf14a2733c2d2": "130", "5a454594e5204d90b5259751e57150ac": "1", "2b3511a343f047888b86c15ee9fb0501": "(8 - sqrt(2))*(sqrt(2) + 8)", "50915df5cc5440abb6c75c64a42c07e8": "6", "9f5c68a7db4c4d689a423b5f3087b1a8": "75", "063fbb11cc414fb0be165d56421dcf2e": "4", "e0adb0085c8f4bb881341da217af3eb6": "33.0000000000000", "494f52c314ff43718f865f2a5c71c319": "4", "e8afd8282f2548ffa5430a153a8b1ef8": "Error in executing code: factorial() not defined for negative values", "c9daa38f104e4562a592b742ac1bf7ca": "350", "40627dd495a44b6d881232fbbc8c506e": "Error in executing code: \nexpected a one-dimensional and numerical function", "d8388fbb8bc2401492253dc419a5544c": "45", "63a3411b07614f82b113f2948c9c5d73": "78", "f9a248d09a0f43509db255df33f72cca": "48.0", "c3e01f171b944b72b02631a70fb46167": "0.03333333333333357", "d5d78c6b28004dfdbb53f09f07dca83c": "1265.0", "c6532abe9e28431495a503f295af4e99": "log(6)/log(2010) + log(335)/log(2010)", "41a35ab409904a10a52c1b9544a2be2e": "1530.0", "3965d5cd46664c189436f8bd2bf9361d": "0.600000000000000", "0094535743d34578a9691ca3b398d1d3": "-650", "61637d93516546f8b1569fa8c8d7b587": "13", "162bb65def8940ef93c0781edd8f688c": "180", "49b039cc7f3142e7b988162c76757f4c": "360", "b12c8ef186684239ad2b31dd75e07d00": "10", "1ba7a661f3dd4fe7af767c986d3f137a": "1.6666666666666667", "44b7af3cb0fc4bb28db870561b434b07": "5.0", "b412e86106b5420bbbb5faeb5f15be6f": "Error in executing code: list indices must be integers or slices, not Symbol", "139664d14f8d4f04a142a5344f94b3bf": "1.0", "e48f7607743041bba75c54190affbb1e": "Error in executing code: Attribute 'Interval' was not installed on SymPy registry S", "4334457bae1f47ab8f19379259960297": "150.000000000000", "5510a419da7b4296af8db309632ae1cf": "Error in executing code: min() arg is an empty sequence", "c9c7b12433bc4029ba9fef4f4c913b3e": "887", "89804faa8d7f45b0a54a6282c618aa73": "100", "2e06e9de079a4b4d88a507f0a4f56637": "528", "c8475442b7b44b2993fb4e3a429bb183": "14", "4b3b041fa63d41e99f5686636e2b0d8f": "-1200.00000000000", "9ec0bd84eea4410f86de54acd46deb22": "16.0000000000000", "05d0517d6ecf4c6db6f4a7e31bb637a5": "400.0", "2fdfffef2002448bb3f324be3fd20c52": "1.0", "5028e5f166474326acf8eb68c589950d": "12", "31d3aca40ba04eeeaf6eecc8f6529dfc": "673", "68f3feeeff8a4a8a8a7f409bb534187e": "22", "9853907308ce43cea91afc2b8e5fbc92": "17", "ea169d4dd8c04ae09c81f62be8d129ad": "Error in executing code: equal function with more than 1 argument", "a64801e1bb104bb18bec9f58a9999d88": "6", "a20f85104a6849238daccb14063f2b3b": "4.0", "82ae278a0c1d4776839d71a5b675a8fe": "200", "ff8080814526d2f40145307bcb452c00": "49.7", "49757196fc4a40ae9760fe2cde714993": "20", "0f1107cfe5144ad19901d936d569c5a9": "196", "ea174edb8c4247b383a585e55fd8c88a": "8", "712ca6064bff49c9b2578c669dfd1503": "89.0", "b4ff9abefbd446ecb039916f99ffcd37": "2", "4f5c3dbc959547209b9624bdde2eeda9": "126", "a5bfc2e9b5e84a4bb93929824d130222": "-560/3", "9b2e18623e044319b30133283a1ca279": "1274.0 - 22.75*z", "a2c0795776934c0c99554551cdb5fb91": "20", "c0519ed3f47d48f9b12c11a05b86ff84": "80", "b0a5de4de330474da3a9c9599621448a": "Error in executing code: pow expected 2 arguments, got 3", "64d42d45b27b47628eef56cb622824b5": "71", "59f839df98144259aa89e2d318c4696f": "1005", "a47765f510494a899cf8c712ff397cd5": "219", "89ead657bee74247b415d9c6480aa212": "1", "3163676df3224386bc6e40c029a6a03e": "2020", "c092753bbe6b4e37a9160c2c16b4254a": "282.352941176471", "e040965f88a24ef8b4675303eab4ad97": "73", "fc66d57e45154e94aa76ba04e0d117ac": "The given dorayaki count for Nobita is not correct under the described scenario.", "f0f9c005dff54f61b124380dbb65b0a0": "60.0", "cff1194b4fa4490b9c2af9a17f332f9f": "-341.0", "4e92937c784f4de28fc33b1fd367c437": "Error in executing code: ", "ff80808147d924de0147e67f821b0d5c": "15", "8686e667c1c7477b9225d6502e9c053a": "235977", "2bfa33d9eeb84dff99d3aba927a715ed": "0", "546acc62ebf74d26bfdc4e70c1475323": "100", "7141ff7ff7524eadbb1fc3c5b410abec": "2", "1727bfb3c5554c1f87361bcfaebf5bac": "84", "c6723d12767348f9bf89e44bfced3392": "9", "d019b0065eae49ed80ef1abeb1da3e09": "33", "ff80808145cc51010145da9ff5020f3d": "63.0", "9f34181c94a94176abfc644d28a1f9ed": "1640.0", "5ac700e26efe4ba496f9e0b3ddd1619b": "1019090", "ff80808149848e470149896357300d94": "4.0", "dcf483f33ecd441681a0d3c069aaa1c2": "0", "99121ed64d6344469de037daf5f55fe9": "-3.262808542237039e-07", "d5aae7a03cd84af7aafcd7cba726a59c": "4608", "a9a24899ab5d46ad8e38692119131768": "144", "ee885d36711049e88b975e65133632da": "389", "f0696363eca94b7c926b294b3c919b47": "34.285714285714285", "f6eab5c5e8e84165bbba082d1ca9bada": "7776", "fe8948b459e1407ab4ce18b71df262ae": "248", "c4d382cb89e94a8bae87a60fa36039e0": "1850", "50dc2887a8a84635991597db14c28ccd": "-6", "27ee21a3e6b14ab4a100acc16f897286": "1", "776aca3abf5c4b53b9c04546a387f9f7": "314.0", "6d49410ac44c4cc3ba4c02221c30e002": "19", "195c716f0b75473b9a47bef7b3b80bd1": "3124", "f7e76f7ff89644f8a98c68c578aaff57": "55", "41fb4b84d9804593a503fd01ccf7d912": "49", "f88214af2ab545ab9edc8d60877b6cf9": "62.5000000000000", "4ac32cca8bee4385bfd5c99e739c0802": "38", "2cb71be94eaa4a3bb3692be2f2850914": "0.5340557275541796", "ce79f1fc6a104387a575ec52aaf4d1b5": "26", "ff8080814526d2f401452c9ae1491eb7": "Execution time exceeded the limit", "3fb599ab75cc4ec1a2273a99f720cc86": "95.0", "97cd2ed6090a42ec9edd1d5fe14a0e5b": "1", "d789d5424e2c4c5798f9ca08efe7e9be": "7", "211b57190f9a401db6690fb2ead65a38": "Execution time exceeded the limit", "943ad75568c74ddda1a029beca526eb6": "Error in executing code: name 'symbols' is not defined", "6a483b2ec3cd4834b662c4dbc6d73f9a": "Error in executing code: cannot determine truth value of Relational", "c116ad53336c47b8b19cb2938423ecbb": "14", "7f2b680bf8874f64b0292f129f08b715": "10.5", "f3a9237041ba45d6a40ab1a0137e3f21": "5952", "9562072523594c58a1d41a2c7b42d497": "2", "493dd998cf464314ac9536bc82bb9243": "56", "8d4f0e0b896d4c8db68d1cdb90600a2e": "Error in executing code: 'Symbol' object is not subscriptable", "69402618c01b4d709c0fbc029bf84824": "76", "7e4aaf733cf244a8ac0af7e8ec8bea0d": "1", "8aac50a75139269a015161b6940e4dc4": "None", "8fa3e85b83944e1182086d74d326cea2": "7.5", "94934cfb10564558aad65bf58a20ab8e": "14", "1d7a388c8da14c0298625efda6d561f6": "132", "dc04bebd71364121a124db4d6aac6976": "114", "28f60c5e07d441ca953ad17ab58b25a1": "49500", "3dd543c81dd14a68bdc292cbe09a6fcd": "0.0009940357852882703", "54b1115ad62d4410b240c23f0fb07fa7": "140.000000000000", "8aac4907507fb884015089a6d46719f7": "5121.60000000000", "0704fad26ec84aef9c0ebcd734bd7bcf": "268", "c18ae65a5a6547a9a1e383fd182de224": "Error in executing code: cannot access local variable 'x' where it is not associated with a value", "05a6fe4dfcd043bd8570f64d26af00b3": "70", "e17d79e070934c299fecb1f22122ade9": "Error in executing code: list index out of range", "148a90ccaf0c494cb5c5da474a3dc3b8": "5.0", "4008cdede3b3420bb5e3c5cf74fe902b": "44", "eae521205de148f59f088e8292869268": "Error in executing code: 'int' object is not iterable", "46bb398767e7488880965f9f0f265793": "720.0", "9630a922257040e7a1c40194d4847fc0": "7", "46e5f4ef613d40e0a9cc2e1576987aa3": "5", "9137b90cfb6c41ef8174371066bda963": "-3", "ff8080814559f57d01455f1df10c0481": "Error in executing code: name 'symbols' is not defined", "731017f94984484895a05c4d879758bd": "9", "d716478924fc4082b4d8f176faeade6e": "32", "ff8080814526d2f4014527951159041a": "28", "2550c65b465543f488127a638a4ebe68": "57", "055894a39b89489091a05b1a7d9c01ee": "4850.00000000000", "8f73f33571194088b89a3fe6d81287be": "100", "ff158915461d4ec387d6c4637b32bf43": "84.0000000000000", "ff80808148c43ff50148c9712c8505ec": "-180.000000000000", "3304b1c7707e439ab883d08e33f275a6": "162", "54622d2599d346c4ae49f5c8e689488c": "21", "7d4d56e969884bcb965540d29b521ba7": "1599.9999999999986", "c1ed8d8d93e249b095850e0fc08f8c48": "30", "2df7b419c8584743b6f580e7a60d540f": "Error in executing code: Equality.__new__() missing 1 required positional argument: 'rhs'", "b6e2e44a1cb2446681178c9295bf909c": "24", "a9654fbc14c24edd8caf03434c8e2fa5": "1", "7fd2dcf17715401599782cd6ee691e7c": "2", "3641bfb4b53e4280ba1466279fb71bbc": "15", "1046863592c7402782265308acc25eb8": "Error in executing code: solving Abs(sqrt(290 - 34*k)) when the argument is not real or imaginary.", "3f425b8ee84c47a383caf0159fc5154b": "8", "3b275be7ae8246d793cd4af1e263bc11": "69", "ff80808145a7d1300145b122c51f0757": "Error in executing code: name 'symbols' is not defined", "dbb94919a6694fee9e2ec3f983a9ae86": "-4", "7ea4767ad19742e9a38d8df9fb294fb1": "34", "1cecfd55d05a4afb87f26e0ba1ea33e2": "180", "8794fa78795e4405a8adec2d37453c08": "16", "03647e8cda9248c9b0feb5b1899119df": "Error in executing code: could not solve Mod(candies, 7) - 5", "5fa5bab4df364ccfb3e5998326a9685c": "1073", "f3e3c8433489412eb540c86905738439": "Execution time exceeded the limit", "21defbbadcf94c3680f185d07df26c49": "45.0", "e953fe2be37344bd8e187909fda1ceea": "Error in executing code: 0", "ff8080814526d2f401452794128603d4": "Error in executing code: 'Tuple' object has no attribute 'as_independent'", "81653a7e3282476c97787e8741db92eb": "Error in executing code: tuple indices must be integers or slices, not Symbol", "9f9f928af0634617a14c269c5f85880c": "60.975609756097555", "5fde48081b6f48b38eb6ec1a3a44657c": "135", "57f35a2d61054e738c757cae4b7e5080": "26", "f0b9f3e662fd4211bbb292c45910245f": "0", "fcba6eb9fe494555b94875b9791a2f94": "-187.5", "5baa0f2183a644e7994c74390365e989": "268", "c647350663454535b59eb01fd145720f": "15", "3b286835e65c464d9ca873fd30c3e667": "2", "1df85c16d4384d7e97db68db637cbfa3": "-200", "4d0b26ca6f7240908d34d97071bc4cb6": "789", "487ef033ed2e4da1a8d9e0b590d0bb04": "5", "5c01fce963db4c0f98f00f105eacf815": "4.0", "f761b9cc8814429d943fff16ebaf3878": "4", "8115028ef3bc4d13add8d21e262b134e": "0.25", "92e34924000a461a9416f9a05573c8f2": "179", "727a60efe0964040a9807160716820c0": "Error in executing code: unterminated string literal (detected at line 2) (<string>, line 2)", "9d6e9a97bca14e0cadfe78cfb127d369": "53", "e539c97b427b4816b3e8a805fa5e2342": "112.000000000000", "ff8080814694a7d30146c8de929e4de4": "0.9615384615384616", "36878a39a1184612ae17c3e83c20c4d2": "2682", "a04743ac83914d6a9380e6b6fef0f819": "(20, 113)", "9373adfdfe1e4143b9c459bc4655f591": "1700", "fd136933bdcc42c3891f9fdc3a984bc2": "24", "23424bf8fc314f4f9264657a9862fd56": "328", "4a5f20a7cf3c4d6d871932bdbafa319a": "10.0000000000000", "fd0ee9c9dcd6498786c1fcfb2a925ff7": "56/3", "c9a754dc9c2a42aaa40b8cdf47b21242": "8", "f46ce9df7da94fceaefdd9bc3640517f": "Error in executing code: Exceeds the limit (4300 digits) for integer string conversion: value has 4301 digits; use sys.set_int_max_str_digits() to increase the limit", "3710bec66fd441b39f19c689adfa7656": "333", "0fc5ec40bc5941cfbaf1c7ef20801d45": "Error in executing code: could not solve total_money - 600*floor(total_money/500) + 600", "1c04f999b8a64175b80d5402b790f3c7": "181", "547d1505e15e4dac8f793e3e33b8185b": "75.0000000000000", "5c63029eb90742f9a9d82bfd6b635406": "200", "93dc1fd39e0841e4851c1825abc20460": "3", "ff80808149f0d67d0149f1944d610154": "1.5899999999999999", "7259fd89fec2477f8494959be5cb05b9": "100.0", "30e05af644c34b0bb7048fbe7a9a8517": "7", "cc15f54023bd4ca1b37ef4e3d7234ee9": "2", "70e213eeb10740a2a032b7a4985130a8": "15", "c70636dd109f42b58d15c65dd65285f4": "33", "dac9c6fac2244d96b3734e8738b1250f": "((-1)**(n + 1)*p**3)**n", "ab20fd2837f24943994fda4fac89aa49": "806", "14e3032293b445818753b2b95446aefb": "116", "fc635a7c41564ea592f2ddb359a02abd": "12", "6148842b9314498985e2f757c55f9ccd": "None", "a4ad899eebc347aa94a0a7edefa0a88d": "0.9899999999999999", "3c401105dd3e44dc9529eaf0a95cdaea": "18", "acd493f6cb564c558c7dfda8c86a5dd2": "3", "c780320239894993ab81a754e27f1ab0": "-37", "ffae99787b104baf8d68a14f7cc05688": "34", "235b33b9c6bc45dfb50f7306a7df8bdf": "Execution time exceeded the limit", "7dad69f5b0de4dc4bf99d58be5fde636": "24.0000000000000", "7a52bd6dae494f9c98645ab7da24027a": "Execution time exceeded the limit", "7292edfe68814296a8585d351c63afd3": "6", "ac84fc49bf4a441c9a3845d0f0cc8fc3": "328", "0079640bfb0c4b5197314af18e14541b": "4", "bbefab31d6904f0db62b57bfc53dadcb": "47", "dc8d9cde16254ca19a899b05b8182948": "1", "c0c802a575cf4449bc0a105c735a6d80": "4", "158790eb6d954cf39b2c889fa4198ccd": "520.0", "ff80808145644e1a01456aba9d420903": "Error in executing code: list indices must be integers or slices, not Symbol", "c7086d84b2df4220a078d1654efce593": "79", "f73237ade06b4a5b81e1bc60fe300968": "133973.36717697215", "ec5bef5918b54ee78ff23e24e3988265": "Error in executing code: list indices must be integers or slices, not Symbol", "be0fbda078c3407f96fa6799d3e42b56": "155.0", "f4ad682f3d104996b3125863ea0e3bd3": "573.000000000000", "e594537b7e2946dc8aa611d07c25f10e": "None", "61a81e3d790a4435bc1c68f354fed093": "6", "9c43d66840d441faa1bdc1892aad1547": "40.0", "5a9cff33a23a43e4a79fe613d2fa25c6": "136.0", "f3992b44316c4fbab8d4b6fe9ed60c78": "77", "e90be39a58d442daa1f85abac77bc9cb": "75.0000000000000", "9c984f34c4324e57902d8c0a93acd900": "5.0", "fb0c05e9e7544456812cc59b5d9d84cc": "90", "5499baafb7f84e599f9e7f264c6780a9": "11111111100", "c8f47e7d8fad4defbaccdc5c2da021f7": "1", "548c14033d404fc3a134ddcb5eece520": "38", "2f3134857305495db634d7c7a1cc74c5": "11", "1078e13a5821446f869f0df04961d2dc": "240", "89cdbdc1267b4f66834f1837ec591b5a": "Error in executing code: can only solve for one symbol at a time", "ff8080814a9e3bbd014aa4e3a38213fb": "17:12:00", "0a5067e7379242a18eaddd652f678b66": "Error in executing code: name 'B_chairs' is not defined", "49e814b6bdd34035afb01a3cb551a5fe": "660.000000000000", "3421647d3c684d7d9f04dfa60c7c1b84": "11.999999999999998", "e42e50d14d3546189cf88f952d154c87": "10008", "ba35644e5b42455b83e14809b0df023d": "35", "2328f7bb0a3f48278d17ad2ff1150ca8": "36", "6da0fbdd760145419d2501d5e5633cd0": "20.0", "1c2fa64d2d3b40a39794deb61e06a573": "40", "ce6fcf864a4b4b0985da04223ab22a97": "133", "599ed8e27dc14b5b94fac97e1ae82ca2": "45", "e6b1ae90fb8449739f1dc459245d7106": "Error in executing code: name 'symbols' is not defined", "4406ac5c9ea04cfe8c0f3208e5e33f69": "500050", "06f9b26e03db4298a5da5fba27dfb072": "33/2 - 3*a/2", "7b5c0e5083b64d298251d03b21b5cd44": "8899", "56e8da6631534c7986927b4055999f12": "74.0", "04538bf3777c457bbe2b93312dac2917": "2520.0", "228d3ab3fb7c4bb08d3af780eb1ffe95": "18/5", "425aba5bf49f4236b3a2af880ab773e6": "60", "225c85565fbd4999a9d128baf2f81257": "10", "05992fef2cdb48ca809e9b605870e0ee": "12", "2b10e1f75ae64385b473a6310b4284b8": "Error in executing code: name 'symbols' is not defined", "64db4455d5d841f9a127024d651adf14": "Error in executing code: cannot access local variable 'a_val' where it is not associated with a value", "721c33721c204fddb532b08405ee5ebd": "0.07500000000000002", "6fad52d29ee04e4592b5bded1a761a9f": "3200.00000000000", "16b7206cbcb34194acc3ae8d4b113277": "38", "09391fe954bf4d6495c5c6c5237df9ac": "18", "97ac5f8563164e1a92ed4d4ff37da17c": "75", "28cdfac0121c4d15825befc0b0727bd9": "1243.0", "801d150fdb164c91a6446a29e51c7230": "11", "0aa9172db2504275913464b835b33e5f": "672", "cb8ed4be0f604762a17053e8a478942e": "9828", "a8df86457ba54beca0551cb6edc59d33": "125", "3cef9522d63e44268207c3851c8d1a98": "None", "0028fcae2e074be8b589e6363225b256": "10", "3190016c997241ac88afc68371489075": "72.5", "71430de072c24c26a9559c326dbeabe0": "8", "673ad8d4f39c40418780c1824cef0a65": "1", "bf47ee410afb4c92a0db3ee16a966809": "45", "dee4bb1eb2f1491cad320ca47543af32": "511", "67408658b4df466d937b3d05bc4d8f11": "44", "91ad225f2de744ecaa01a24f7ba82d40": "70.0", "c17fb67ea5504c288124fa021385a73b": "(110, 70)", "bc0a3fc4cccd401284ccdae50f16f01b": "1.5", "ff8080814518d524014526a710fe1941": "1506", "06dc1c1b9a264e809d4eb15a4367631d": "Error in executing code: name 'symbols' is not defined", "06de63c26ebb4d47b45bd8b8f8b1c6f8": "12", "149e2a29412f47698bfd45e49033c08c": "312", "6f142bea08e8465ba2131abc71fdcf46": "41", "91fcfc2541b64be9a519fc41ccfbfae2": "Execution time exceeded the limit", "6263fcb673794fbf8007d56306483d92": "1", "8708bfada23641f48f21c8f1e7da3917": "420", "31bd217c987a457095bf1a04cf4aaca7": "Execution time exceeded the limit", "dfeb996d80d746be86f0995f03cdb5e4": "500000000", "216f2e7e53324fccb1736e72f4f8a8b0": "6.0", "14b6a05732034dd7b0e983aa0a523b05": "21", "f4a00a85c1f24436a78a40e2a347658c": "6.0", "4d9ad0d4c07a4f83ad536d8e86eeb8a1": "2.25", "d77bad9ca18247d9981ce4a549f39524": "0.2", "0b9f35929ecd4169a85a4cdd67e4b08b": "7777812", "9bd20d004b30436796af0763d0fbe32c": "192", "37a75cad7e12471a9b4e4c90fec62b5f": "3600", "fd14e05577d64706a8d7e77ab994706c": "21", "88968b3906984933a4581fe4910c3d34": "152", "2733b0f1fbb74ea3af8af2bf8d1b2a4a": "None", "a0614ab7fc9d4e04833f34a099aab269": "402.5", "2c6df22a389e4913a07766bda3fca60a": "15.7017543859649", "96ba8e3b1dc046dbac4f8bbe6f8dd535": "1369", "b0d7357c181946aebd2105a11b6accc0": "25.0", "33d686b9c35b418d940d582fef9cf415": "Error in executing code: list indices must be integers or slices, not Symbol", "a1a4f760c07c426684a3516988613d20": "39.0", "6d45c0b18b5d42d29f1d3c9b491674b2": "10.0", "5603fcc4b5464db29f9434635728bc0f": "195", "625010ff88764207a1cb91da5fcf0cb6": "660.000000000000", "ff80808145644e1a014564b50f0d0096": "Error in executing code: list indices must be integers or slices, not Symbol", "d46f93631aa343af902d4df514459dae": "44", "4db7923f99044449be675e9076a69a23": "124.0", "cfd5d4e5682c4c10a111650f4aadd97d": "11", "aca00205e23b400fb6f778d98518eca1": "Error in executing code: list index out of range", "9f65bbd557e6401bb5fdb2a3f355b955": "2018.0", "2bdc39a272244c0cb88f1ccbe8f3b200": "385", "9030675294ea404797dc5579620bdcf7": "7", "8f26b63e98884ec6acf3fe578b3be0bf": "False", "1056d404551446b682356d0a52d34461": "124", "bca9cdc574f64268ac2810b87a736593": "0.5669999999999997", "4b9a730213af41d0b057414482ba51d9": "96749", "2e610adb2398464ab0da7db7b63f56c2": "101", "7860811b1c454aa39bb1babb09be80bb": "54", "57c6fa6d23854ee796930ca1826a0a98": "153", "23deccde94bd46698e3844941fd01c52": "49", "69435a7f4f964c83bcdbc7f717590298": "34", "f5a55daf41724a04bd2fd4be327e32e3": "5", "9c57dc7dfc26476c997f256460c7c79b": "10", "8b8db53967c24d1e8e3f438e896ba4bb": "910", "177ff48a19db4448aacade08de5b9cc5": "4.0", "26f414b28287466280426c6560f9eff2": "364", "1d9c56bd89d14bfc8127dde5e6f50d8f": "194", "3a9ccac0188349cab693c5e0c146d9ff": "1.1133117711923294e+41", "7489097a33e94624826efc2f598b6677": "2015.0", "942b2ce332524a4b902648ad596ba7d7": "36", "e3f2b74c0e894d2f94a38f919f938fd1": "250", "913c43eed5e24177aca28b9e1d81a741": "3000", "d41be83243044e2cab9864c1a01b99af": "865020", "5eabde0c6b5440c9a4557c390d08817c": "8", "e399f334dbbd49c19d6d8c715483b279": "1.3333333333333335", "c563fabad4074efea59afde857eca97b": "40", "9f20024fd06642579efb8d705dae61c4": "307", "490f968a435e4af8b72c48dc37710d30": "11**(log(25)**2/(4*log(5)*log(11))) + 49**(log(11)/log(7)) + 27**(log(7)/log(3))", "e81afd32951946048a6441ac4e2c05bf": "0.100000000000000", "fe38a13d092d4358be78554773da3e17": "48", "5ae87a302f684896aa902719a578a5f4": "160513.94937343363", "6791689c3b654134873dd7aec29456b9": "70950", "b49258246aca43cd91e0529d5d0812a7": "Execution time exceeded the limit", "4d4f19c82ad947cb8ca6ba28f4a94ddc": "1920", "20f857ab4b4f4a32bfda2e8148c83b9b": "1", "4d5a6b04385842018f5035a6d3ce7811": "25", "928867e4787a4472b06955cbcf2aa2da": "203.0", "4c2f05ae962a4e76b2b3a32c1aa69d65": "Error in executing code: list indices must be integers or slices, not Symbol", "7300acb39ce14f818c7eee66dbe65e40": "603", "1dc64bb71fb64cef83d4b089f4859ce8": "Error in executing code: \nnonlinear cross-term: a*x", "12c118c9cc6c4af3bd7602c59ab77ba9": "20", "258ad9faf0d3410b8c7d8acaf3bb589a": "1981", "a7c3912b386f4828bb1ef96006b20a11": "121", "fc21aac3ddd247a38011b46e9fee9f0e": "Monday", "94bc81269e764dc2b9fef8acda65f9ae": "16.6153846153846", "ff808081488801c601488c21d9250d70": "1450", "3c2d78925afa453b83b8fd6d290e7e32": "Error in executing code: multiple generators [n, floor((Mod(n, 20))/10), floor(n/20)]\nNo algorithms are implemented to solve equation -n**2 + 20*floor(n/20) + 10*floor((Mod(n, 20))/10) + 10*floor((Mod(n, 20))/10)", "7ee368dd4dd646b3b5ac086a423c4223": "1", "147a3c4bfbb04160bfa0fc9a34a124f1": "200.0", "68bc080dc9b44144a7ad5b358daff359": "4.0", "9ef4d6b611a0498685551b8ab4eb0498": "86", "857d6bd1ac514fc786f9611a6784cce3": "18", "bc2c2b1b643240b18a03d87f4c211a44": "2017.015", "37a30fae830b48f4a2194416a95a9289": "60", "5779a5d8c25842029b5a59b1117bc98d": "31104", "abf121e4da344b549c185364ca427a4d": "Error in executing code: float division by zero", "980551b298ea40b8b6569c01d5a52f7c": "55", "44ff1931c86c4148a0cd2bc7d620b12c": "Error in executing code: list index out of range", "cf828c1bb21d4e488a6db404e1af5197": "None", "2f7c16f84407414b91f0e33dacc41f9d": "5", "6c45d90b7e4b40b99267c811dd726224": "Error in executing code: \nThe inequality, -x*(1 - 1/x) + log(x) >= 0, cannot be solved using\nsolve_univariate_inequality.", "c1d63d37f63a49a1a0b46e7b4c866554": "171.428571428571", "2709600ed43e42c8ae65ed0a15729e65": "16.0", "745109a81f9a475a99a9f3da8a0cac22": "3.0", "339219b59f6247bcb01b2ba1ab187405": "15", "95f7ac782cef4ed6bd959d7115bc0667": "700.000000000000", "67d5deba9e594ff89a1258b5c2ba200d": "10:06 AM", "533a0980dea34306b570cc40b321d244": "7", "3e110b8ee79f400f80c353342ddd8b98": "Error in executing code: list indices must be integers or slices, not Symbol", "e0b12775dcaf448d807e1f8c6799fa13": "360", "daa8dcd71f1e4aeea820ec9dc582ffd7": "1994.2999578635777", "56ed4d2583b2484a9a00f10af8874e0b": "71", "00df5dc9aa2d44fcbf87a9c9e075220a": "26", "f197ab93fd0743479e5100efe69880c4": "103", "52b09e924ea342f0ab6bef1cae2482d6": "Error in executing code: int() argument must be a string, a bytes-like object or a real number, not 'complex'", "4062c2d3ff06408fbece00bfbf9838f8": "24", "5e3d5fac79464602937e9ce939545137": "15", "1456854dd764430ab1a37f778144303a": "9", "d9703eff43ab4b488f3f2287263098ad": "240.0", "86e9cb0dd6884cf58983ccc8a6fafa3f": "7250.662105082821", "1b6ae8b4034b40c29f8d606062bd92f0": "2016", "92d2bd6c4fdc4b9683c284b7cf1caa8a": "96", "25c9bca1696744bca10617be7f931c17": "90.0", "0e4e8f089ece488eb1a3b1312edd7f65": "385", "a719f6a9ca74472299ea6b8f064aa8d1": "Error in executing code: cannot determine truth value of Relational", "b431d4d49e964562bcd21b6fdc823092": "197295", "696c6807743740ba9372a782212bb959": "96.0", "e3873416fa48413695c4c8feb9984632": "224", "216d24b482414c0d99ab2275519ada6a": "1500.0", "63f6289e313f48449ed01885e25869dd": "61", "2b30279b92154857861c73c9f686e879": "12026880", "3ffb0cbb282f4b489b9cc78a70cae79c": "15.2480000000000", "e1ef1f85bc734dcab1d3db425b6c444b": "8056", "71a4b295f9aa4b82802fc5d3df2ac368": "Error in executing code: cannot determine truth value of Relational", "c7ec8e6c60a14714be5b2d2c6394f118": "2520", "6de15a6ec14645c5be99a71f145cad0b": "1980", "61ac736d9add4e0f8b84316988447fd6": "64", "f6202beefbef49149da4f3d5747c4463": "149", "418e48863d554cf3b2a6920590f32664": "135", "9fc185af303e42dabd7e5335281de3f6": "792", "39f540f81a024a27ace3296b0f9698b0": "2514.0", "9d0915e1c73b425f9ed79f47c8c7db2f": "1.4", "c643df33f3aa4243a0c008a4696db04d": "-(-39)**(4/11)*11**(7/11)/39", "aa354a24f9c34f719bee17581caab8fc": "19", "41571ae4137c402d95a8c08203d3a5a8": "243", "f49483290f344946a2f9e9c932a00af5": "33.333333333333336", "825954bd19d24502a7444c86a1f397cf": "Error in executing code: Cannot initialize from 'dict' without generators", "dce2d4b568b048db929c5963571c2c41": "26", "9ecc5843e26b44c09e0d72b7f9817bea": "2", "0df1bf78997547679abefd51ea02e9ff": "-sqrt(4 - sqrt(7)) + sqrt(sqrt(7) + 4)", "c9742e856a1548e1b0436f9b7396203c": "17", "ce485093b7c942b29d602f19adf1cf26": "Error in executing code: list indices must be integers or slices, not Symbol", "8ddd28877bce466dbec946bba330e1fe": "0.9393939393939393", "e70fa23a9d56494d9cecb069438d2d8a": "50", "e65b25a124434dc1939c3cde61d4477a": "15.0", "4f11acd589ec4e68aee6908deba9559b": "-40", "d680ab9d3b2345b6a0d5398bf414a0c2": "23", "67f520947f87472293b538e132297310": "43.89000000000001", "599c093b7525470f940bedfa7c941c74": "3344", "f65197f26ff0489a973199369ae0682d": "9", "610c8eed7c9f4d62aa3cfd89d8e64967": "Error in executing code: could not solve 10*z + 5*floor(13/10 - z) - 8", "bc814db0a68247d7ae1921662db4ccd5": "50", "3dcb0819803b43078ae4ce9e5fd71ad4": "107", "bf0f88847d674a9e87563a0f12153b30": "0.0", "e44eb83fdde74ee083a9bd3e9554e80d": "11.999999999999998", "801338a2611b49ea88ff1ed30cb6015a": "24.0000000000000", "ce2e3d8335a747689cabb06eff35f82a": "35*n + 21", "1afa9685e1ca4e3da11ef2d05e20f874": "{30}", "3c73043a9d374ffbb06b40766580f24c": "262", "4567493c6db84345a7c5489eb82839b8": "24.0000000000000", "c8a9394d93884932b37426abcfabd03e": "11.52", "971e49d8fc91413dabb7a36a6200c084": "1", "bb1831b855714c55b546fe30dec9240e": "4", "746630ff38f3451483a1b04d3976af0d": "55.29", "cdcebefe297c4088847fb87ed4a80637": "19", "218c3710e8fb4b0380832e67a2fa0560": "5", "34fbf8de459f43b680d272a7e9866117": "1056", "46b0ab3d7465442e90d634ab5e09d166": "0", "811fdbd31a9040c7a706b17eb073920b": "None", "d8fceb89c0b74ae6a49f41666340e2c0": "5", "61f29823648c4a009df40067869530eb": "390.0", "92ab1607cc9d4d409fe1dea4aa9e8749": "15.789473684210526", "ff808081488801c601488c22a9b60e15": "3600.0", "5a13a78d498d415187666449dbede824": "96", "783e7fe09ef74be2b6f026e6ad9523bd": "504", "ff808081488801c601488c227c0e0deb": "45.0", "ecc53ffccc1241b4bf477e52f6550c8c": "738", "882e0d94a30b4014ac00630f611ed883": "Error in executing code: could not solve 3**l - 3**n - 10000*floor(3**l/10000) + 10000*floor(3**n/10000)", "84a462235b824808a37530e0e9aeff9d": "Error in executing code: name 'Eq' is not defined", "45f27f31a84c465e8f8e6d10a3fecee6": "Error in executing code: could not solve Mod(n, 7) - 1", "44a23985bcaf470b8cb8df6b8123561e": "7", "280c9c2b8ef847bc9cbbca8f28edae28": "10", "10a66296e9674e329b69555139d6df05": "592", "850c3e6cdfb842388b8cb9e3eddb5bc4": "Error in executing code: The computation had not completed because of the undecidable set membership is found in every candidates.", "945ef3405d8348eeaefea4757fc853bb": "700.0", "ec4a4509213942408c513418687a2855": "12.000000000000002", "a97a1e722d214c70a52a3746e31f270c": "9", "aae00458ddc24a0fa5910911489604b6": "7", "db33061ba22640aca3feeca03318549c": "443", "4a3912423eff459faf33b0048e3feb36": "3", "3e7c0c4090694fc58cddf06a3d4e2b1d": "11", "e0c30dd6df7d416683df116537ef8e37": "27.0", "2f4ccc2afc9e477089a2d01cd36c3a0b": "61", "4689c44241654c85868fddaae8e444d1": "9", "ff80808147e705d80147f100382a1601": "12.0", "149ad95d5238413d9eb954b22c74497b": "20.0", "c499fcb984904d82b73e7544c6900e2e": "([1, 2, 3, 4], 10)", "fc4fd52e4d4c4ec2bee02bbbfaa96ee3": "Error in executing code: list indices must be integers or slices, not Symbol", "3767b66f1b104429973c350d66e19ebb": "1612", "e1b626586f834c0d83ecded45e0264ac": "27.0", "e601d5a6b7184da1b77f6ab1272da0a7": "59", "56a7d573523f4bc8901a57805455a843": "3", "0ac2d207eb3a4a9db94ed87edabacb25": "37.5", "68133fcabc634a0eb281d2f9b3a82802": "82", "32966412456b4853a3ea7519c96384c0": "1", "3817784c09444a049f4ddfdef165c5fb": "Execution time exceeded the limit", "ff808081488801c601488c289a030fc4": "239.166666666667", "9b608bf81be646cea5009f573104e8ca": "Error in executing code: list index out of range", "8e621b0cb4974d47a689b64a60094d08": "100", "6ef2b10f26874c2bbc12614801d75ce9": "45", "93b66c2c89834019b2ac560e14a28a28": "2", "a4671cf5dd074278b3e9217cb442dc6f": "55434", "a0fffce9e34742178702dcfa0c17276f": "58", "30d2ab0e88d7424bbb6cbe67c059e691": "20", "30bd6c81800f4fb4934926d5509bc33f": "10", "5fbac15a5adb409f83c3f96cdbd7f211": "Error in executing code: tuple indices must be integers or slices, not Symbol", "10a316deb53f4e7a99f8c15d38a9081e": "-192.0", "dc959b51c9954cbb9b729e7f3b7db6be": "Error in executing code: pow expected 2 arguments, got 3", "0ddb79aae3ae4d5684173890ae8b6a07": "40.0", "d4569e6f291b45318cc8d51e9c190685": "598", "d0cf241494744d1089d3fea32ead9424": "Error in executing code: can only solve for one symbol at a time", "495f9b3a93024575a447e1055aa7246f": "92", "e88ded1d81a14a36b7e6641a9f70e942": "22", "954e0c192b1840ab8d5b3005ecf86125": "134", "ff80808148880257014888ac75b607da": "7", "f5efc53b77314a6a8744e492f9b24590": "12", "cf4703aeade34e90bb49ccff79022f70": "8", "a344b7dea7094e4b8570c7f6ac168d98": "152", "9347c5de871f46d2bd90f10387d8380a": "67", "ff80808149990d5e0149d15b4a436fac": "54.0000000000000", "a724a8e8f9f245b0a3f9360d17764ed9": "230", "d6acffe033f448bf8b99985df77b8148": "5781.25", "05fed5d075df43e3985cbf3a84e5a164": "14", "d3ae785152d54279a948c4cea56ccc93": "-1", "aa1ceeb05f1d4992a53b854be439dcd5": "1.8333333333333333", "61188dca5a2a43e5827f9c0c2e13410f": "7", "ff808081481c1eb501481eff536b00f1": "170", "efc3c576459c4ed3a186c05e9b318d9e": "[]", "035196fe3c8e401ca54220344c7fb13e": "('A', 1)", "dda76fa93bfc4d95bab72c197311e439": "38", "f487bf69576344959c76dc2f5a70441f": "29", "7170b8f30f3a4fd2af9916136149d76e": "75.0000000000000", "0b8a099e35ba48e2b5c51c228612e795": "9", "f19dbca3f27f4a918f71b808209cad93": "118", "d43f1d2365c7451ebdbcbfd559b11b61": "851.6666666666666", "222421105c68457387b8a8232d27cb0a": "3*Abs(x3 - 1) + 2*Abs(3*x3**2 - 6*x3 + 2)", "c51cab6fab144af3b43018ab35a61f1b": "35", "3dca0406897449f8a644331297f14201": "1107.0", "961a6d7293e3478aa714fc4fadf3cf7e": "385", "25bcacbe95264c9da875afb106cceec8": "1553", "f390c331db5143489ece0f7754f67ec1": "198", "e7c55de3cc1b4c409f14e95d00c9ac32": "119", "e2e66612210c40ec950704a39a958227": "-19.0", "f131d154de814811a1a07b0b9f6fe42f": "7", "9bb854b94b1b490ebfc08e1be4a6b4d0": "Error in executing code: 'And' object has no attribute 'as_real_imag'", "72e8e661433346729d437a1084d08a25": "4.2", "3142a9c45ccd4d6ca6614e121529b521": "1", "17b2403f080b4778b1d233cf041ab918": "0.9899999999999999", "de6752555c8c49498b13f0339be8d29c": "6", "720db66fb0b74aba9081baf0718d9004": "11", "18b2a868448a4e96afe8fe69ed7173ee": "24", "c9c161c5794045ccac79e0729d0539fb": "Execution time exceeded the limit", "ae539b024ef540f98828c2ad1668d571": "3", "57bc9c25319a4dd0809d43dbb94c611d": "5602", "77cd5a7950fe4ade9033bf54b53f5475": "3.0", "67dad3651c5047ea87bdb78ef13cd736": "1924", "5d9a5284216e47cdb3fcc63fcf790ff1": "390", "3e64d7cfc72f49478c446778a5374f2f": "53", "ad0f262227b84b1390244915d684ef81": "274", "3147402a3e06498a9b815352d3e6b6e0": "30", "41282f3b84b24c6b8f3d49930f44ca45": "6125.00000000000", "ff8080814559f57d01455f1e24d60485": "36", "5438898c77ab4dd684bd274bdfb62c47": "58", "1f0da919a9bb43bba07203d6cc400031": "25.0", "5793a57bbd0644a8b5b69cf3025d0691": "-13.7142857142857", "ff808081487d9a2b01487ebec112054e": "2", "e3973e41bca8487680706876625e2ed6": "3.0", "edaee6699b1e4c2e8794ced795e7e1dd": "5", "3a3115ebafe9458f8a09176cb7150fa6": "Error in executing code: name 'v' is not defined", "8eb67d4d261d4c0b918d49737fa1ab93": "625.0", "b3c7ec4a46144364921e0ee7964d905f": "30", "82f33bfa52af4e7481a8d540390dbcfd": "0", "9b3a8aea5f194792a7645225e67fb850": "1", "b237ef6e8c4946b3ad5bbba0a1145179": "77.69999999999999", "ff80808148880257014888ac659a07ce": "686", "2ae2c99edccb4445b772d7c31e0d64a2": "19", "eeed4fe72b564d06a4a43dbd86ab4f24": "36", "ae53e476c03d4701ac838acd5a08c658": "15", "8eb5dc8a11e54eb1b0e53f77d2c89962": "38", "7c2ddbd3e45547bb8e48e727fd91da4a": "38", "5d11f4ae62cd4d90857bfcababf1ccb9": "0", "869f925ce8c3422ea669aef5418697ef": "9.00000000000000", "2a647d9406f144cda9949506c6b757c7": "550", "003bd5727edb4a38bb1c1483bf0c4279": "Error in executing code: list index out of range", "d910ef84db5a4c3c861e4fddfbdf33ca": "257.75", "1a6635cf36ca46b3ac929e7c267e3af5": "4076361", "ff80808145933e8e01459840340708b1": "57.375", "19277b39c2d94dad8183d38983396b06": "2043231", "4fe034f6bcd04a10aea70bb8c0af61dc": "0.0123263888888889", "ff6cd546e4af412daffb43d7447da216": "16.516 - 0.318*I", "e14092716d4446a794250c9470fb00c7": "9.31818181818182", "ee80122147f84f429936483faae3eb08": "Error in executing code: list indices must be integers or slices, not Symbol", "22cbec35c2684b80be41fa7b61142bfc": "None", "97f3cc3dd7a24a8e84c804baf5ee4593": "99.99999999999999", "2305f759d4a549c389ce652c126f0ff9": "240", "b8f2c96500e74948b63b3bc258bee5e6": "58", "6471992bd562494da6aa5f2c1f1b9c48": "113", "379acd26a0bc4c0ea7ffd67467d4d06c": "42", "f72556b3a3c849e28381ddee32619428": "Error in executing code: name 'symbols' is not defined", "ef850e4c2dd14a0897c87776a38fbecf": "7.948717948717949", "55311a7ad9bb430f87aa3769d594f351": "1024", "f192ff6bdf9c46f5a9c4635557205692": "15", "ffb5afe53f3e4f09b8ce288887fba772": "-21", "eff3d7ba3d0149e4a1e880eafaf356a9": "3150", "0049ead997754aa08da5ec6cc2fecee7": "None", "fbd4a1682f1a490da409f9208f3f02d3": "34", "ff8080814502fa2401450bc73ec415d2": "4250.0", "84238b69b3844361a84a573e8236b743": "398.0", "547602ff5bbb49f2af52447467cf835e": "0.5", "92f650e75d0148c2bf535c8396f2c4f8": "0", "7ef6ff554ddc43d58b95ab1aea0f0695": "25.0", "a055e0edd4164cc7bb2b62844869dfad": "29", "69d6f186501c48579dec6f40054b5a54": "450.0", "f4b36a32cb044a8e9cebd5c8442a72ab": "20", "fc2709b5d002406391bc5f9594b2047e": "Error in executing code: list index out of range", "57720cd8f7e8425eb68546214a10325c": "3", "71c3878960fd4f2cb2099aac8985e482": "8", "7bf76f93ad724475b7a749c0deee00bc": "Error in executing code: Cannot convert expression to float", "b4a8cc072a38410aa712813b304e93d4": "None", "f6e0b2ded3f74163a5f04784d5e399c9": "10600.0", "68578527dddd4ae999d3b3890d317acb": "Error in executing code: name 'a' is not defined", "f68790461f4c4938bfa2be3ddb851f9e": "444", "1a47b1fd58f84217ba025666d064901c": "29", "974d6adacd3f4f21a5c32bd6e68de103": "20", "7170c2e771904429bf0a602807689192": "1985", "72cc4771678944fc84a60702c7bd1e71": "25", "e551a4ff5fd7451b97301173bf59dbf5": "608", "b7ca9561c25f4eaaa4839821575999c6": "Error in executing code: list index out of range", "167affd1feb54e8893cea6f293a5d6fb": "120", "727dcbcf597e42e0808bf3f23cdb6043": "10", "2ac3df3acf0443f39fda812ac41497e6": "Error in executing code: list index out of range", "8081bf268eae47ff85b53bef96da4157": "12", "615852a4340c4e2bad7f797aecc21ce3": "91.0", "4c65214d33e3452d89f984e08c8438bc": "1", "5e1605730f4d4ee1a5ad4fb1bdbd38f6": "540", "497b1231c16b4430a63ea6a6bf4badab": "55", "ba79592afadf4278951b8a5d7f1c67db": "21", "e01312b9fec341ceb772dd8bbe66558b": "2.0", "80da6f5276e6422692038b5059669517": "8.0", "3f46ba34c7a542b4a5f591a5d4de84db": "2", "b6df6116e43e4f028af0ada20001727b": "300.0", "ff80808147c4641f0147cf1a20161f3e": "15.7", "0bf58e3c35d34ecf917031be27b080de": "20000000.0000000", "9f985ef34e18401c8f4a89cee3a11b77": "3000", "b6caaa1dfeb54c6fb403c36bdeda4744": "Error in executing code: 'Symbol' object is not subscriptable", "0676d965036c4ec089aa0c76fb35935c": "93", "9c23c229cb3c4c77967041ee03ffc7bb": "Error in executing code: math range error", "b607296feedc4157b6c5af7f1d45d049": "-1.0", "bac5c6f603b747378f305ebf4eab0ec5": "10", "bf457f03e37c43e984e7565411f0f8e9": "336", "a93e5230b2664999a3ba07d0c39b0a39": "6", "16d0c23f6ec6430d82e50c6d8b61fcde": "1073", "7f7309bf74da44809dda63d18ceb9598": "33", "fd7731fc867e4aba9444f8cc8c56c4b6": "271", "01c3542b5b934d5893ea7b2024624a40": "1054", "e82117e4e0c249bd80d642ca12feabbd": "123", "efc3a715b68b42c78b610b8e6357d287": "False", "e6b7ca467a7143cba9e21ed82ebc29d4": "41", "ff80808145cb8ada0145cb8eec27002a": "0.300000000000000", "4becb545e81f463a92f611304742b5f7": "('Han Meimei', 5)", "debf8d8569db47d5ba4e78d2149f87c1": "360000", "a1ba036b7ccf4de9bfb03d00bfcbbc74": "15.0", "499e131399e8422fa105ea42779167fd": "35.0000000000000", "09635dc81cd94405b4528d421465000c": "118", "78c7cc9eabf24a9b9a1f8c4cea329bad": "3", "103398c4f9a345feb9eea24c93bd2498": "8", "ff808081488801c601488c223c580db4": "4.0", "15e71ad808cb4fd2b8e94c616fd75120": "36.0", "65120432214d430d9f0516893ccc310a": "Error in executing code: list indices must be integers or slices, not Symbol", "bdd7bbb827ad4179af2694c9ba0d7f87": "Execution time exceeded the limit", "5860a95ec66544f885b5fc43bdba1a7b": "37.0", "7f7334d66cda45a7a2a9251c3e3e4c0b": "None", "cd301a6aa8bf4a2f9e825a4ae2c12cb4": "3", "3e097248151b4ca2ab5737f4e4805d25": "(86, 103, 108)", "4a527b87383b4e9f96800f55a49a1577": "-184", "f7032f24028f4bc6a89e323e4a170f50": "3900.0", "9d7c4d114f2e407cb59e3e6ff948c615": "Error in executing code: list indices must be integers or slices, not Symbol", "e6f3275e5c4545e19dac753bea1f9346": "16", "bac41ad4fc0f48899d66b58ca4ce574e": "Error in executing code: tuple indices must be integers or slices, not Symbol", "5b781e815d3b437f84494be1dd8cc33f": "103.0", "77024903667c421aa9314568dfda0bbb": "43.0", "afa3ef24a1cf4e70abfb02fe834c2937": "9007", "b16dc1546c4442678eb785311b6dac9d": "577", "fe5850bf833442e9b3786c5078fb9ddb": "7", "17807e1b110746e99e9efc06754d1853": "120", "e58fc6b10adb47d3ac99457cfda7b08f": "0", "b7e4a603090444b8886c3879716e5887": "10", "6a01f14565d44d478e4edea209bef53a": "30", "c42a2b66122f425e818007c08bc5afe5": "Error in executing code: list indices must be integers or slices, not Symbol", "40a64e69ffa24d9c830ae468d9a0c626": "[10101, 10102, 10103, 10104, 10105, 10106, 10107, 10108, 10109, 10110, 10111, 10112, 10113, 10114, 10115, 10116, 10117, 10118, 10119, 10120, 10121, 10122, 10123, 10124, 10125, 10126, 10127, 10128, 10129, 10130, 10131, 10132, 10133, 10134, 10135, 10136, 10137, 10138, 10139, 10140, 10141, 10142, 10143, 10144, 10145, 10146, 10147, 10148, 10149, 10150, 10151, 10152, 10153, 10154, 10155, 10156, 10157, 10158, 10159, 10160, 10161, 10162, 10163, 10164, 10165, 10166, 10167, 10168, 10169, 10170, 10171, 10172, 10173, 10174, 10175, 10176, 10177, 10178, 10179, 10180, 10181, 10182, 10183, 10184, 10185, 10186, 10187, 10188, 10189, 10190, 10191, 10192, 10193, 10194, 10195, 10196, 10197, 10198, 10199, 10201, 10202, 10203, 10204, 10205, 10206, 10207, 10208, 10209, 10210, 10211, 10212, 10213, 10214, 10215, 10216, 10217, 10218, 10219, 10220, 10221, 10222, 10223, 10224, 10225, 10226, 10227, 10228, 10229, 10230, 10231, 10232, 10233, 10234, 10235, 10236, 10237, 10238, 10239, 10240, 10241, 10242, 10243, 10244, 10245, 10246, 10247, 10248, 10249, 10250, 10251, 10252, 10253, 10254, 10255, 10256, 10257, 10258, 10259, 10260, 10261, 10262, 10263, 10264, 10265, 10266, 10267, 10268, 10269, 10270, 10271, 10272, 10273, 10274, 10275, 10276, 10277, 10278, 10279, 10280, 10281, 10282, 10283, 10284, 10285, 10286, 10287, 10288, 10289, 10290, 10291, 10292, 10293, 10294, 10295, 10296, 10297, 10298, 10299, 10301, 10302, 10303, 10304, 10305, 10306, 10307, 10308, 10309, 10310, 10311, 10312, 10313, 10314, 10315, 10316, 10317, 10318, 10319, 10320, 10321, 10322, 10323, 10324, 10325, 10326, 10327, 10328, 10329, 10330, 10331, 10332, 10333, 10334, 10335, 10336, 10337, 10338, 10339, 10340, 10341, 10342, 10343, 10344, 10345, 10346, 10347, 10348, 10349, 10350, 10351, 10352, 10353, 10354, 10355, 10356, 10357, 10358, 10359, 10360, 10361, 10362, 10363, 10364, 10365, 10366, 10367, 10368, 10369, 10370, 10371, 10372, 10373, 10374, 10375, 10376, 10377, 10378, 10379, 10380, 10381, 10382, 10383, 10384, 10385, 10386, 10387, 10388, 10389, 10390, 10391, 10392, 10393, 10394, 10395, 10396, 10397, 10398, 10399, 10401, 10402, 10403, 10404, 10405, 10406, 10407, 10408, 10409, 10410, 10411, 10412, 10413, 10414, 10415, 10416, 10417, 10418, 10419, 10420, 10421, 10422, 10423, 10424, 10425, 10426, 10427, 10428, 10429, 10430, 10431, 10432, 10433, 10434, 10435, 10436, 10437, 10438, 10439, 10440, 10441, 10442, 10443, 10444, 10445, 10446, 10447, 10448, 10449, 10450, 10451, 10452, 10453, 10454, 10455, 10456, 10457, 10458, 10459, 10460, 10461, 10462, 10463, 10464, 10465, 10466, 10467, 10468, 10469, 10470, 10471, 10472, 10473, 10474, 10475, 10476, 10477, 10478, 10479, 10480, 10481, 10482, 10483, 10484, 10485, 10486, 10487, 10488, 10489, 10490, 10491, 10492, 10493, 10494, 10495, 10496, 10497, 10498, 10499, 10501, 10502, 10503, 10504, 10505, 10506, 10507, 10508, 10509, 10510, 10511, 10512, 10513, 10514, 10515, 10516, 10517, 10518, 10519, 10520, 10521, 10522, 10523, 10524, 10525, 10526, 10527, 10528, 10529, 10530, 10531, 10532, 10533, 10534, 10535, 10536, 10537, 10538, 10539, 10540, 10541, 10542, 10543, 10544, 10545, 10546, 10547, 10548, 10549, 10550, 10551, 10552, 10553, 10554, 10555, 10556, 10557, 10558, 10559, 10560, 10561, 10562, 10563, 10564, 10565, 10566, 10567, 10568, 10569, 10570, 10571, 10572, 10573, 10574, 10575, 10576, 10577, 10578, 10579, 10580, 10581, 10582, 10583, 10584, 10585, 10586, 10587, 10588, 10589, 10590, 10591, 10592, 10593, 10594, 10595, 10596, 10597, 10598, 10599, 10601, 10602, 10603, 10604, 10605, 10606, 10607, 10608, 10609, 10610, 10611, 10612, 10613, 10614, 10615, 10616, 10617, 10618, 10619, 10620, 10621, 10622, 10623, 10624, 10625, 10626, 10627, 10628, 10629, 10630, 10631, 10632, 10633, 10634, 10635, 10636, 10637, 10638, 10639, 10640, 10641, 10642, 10643, 10644, 10645, 10646, 10647, 10648, 10649, 10650, 10651, 10652, 10653, 10654, 10655, 10656, 10657, 10658, 10659, 10660, 10661, 10662, 10663, 10664, 10665, 10666, 10667, 10668, 10669, 10670, 10671, 10672, 10673, 10674, 10675, 10676, 10677, 10678, 10679, 10680, 10681, 10682, 10683, 10684, 10685, 10686, 10687, 10688, 10689, 10690, 10691, 10692, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 10701, 10702, 10703, 10704, 10705, 10706, 10707, 10708, 10709, 10710, 10711, 10712, 10713, 10714, 10715, 10716, 10717, 10718, 10719, 10720, 10721, 10722, 10723, 10724, 10725, 10726, 10727, 10728, 10729, 10730, 10731, 10732, 10733, 10734, 10735, 10736, 10737, 10738, 10739, 10740, 10741, 10742, 10743, 10744, 10745, 10746, 10747, 10748, 10749, 10750, 10751, 10752, 10753, 10754, 10755, 10756, 10757, 10758, 10759, 10760, 10761, 10762, 10763, 10764, 10765, 10766, 10767, 10768, 10769, 10770, 10771, 10772, 10773, 10774, 10775, 10776, 10777, 10778, 10779, 10780, 10781, 10782, 10783, 10784, 10785, 10786, 10787, 10788, 10789, 10790, 10791, 10792, 10793, 10794, 10795, 10796, 10797, 10798, 10799, 10801, 10802, 10803, 10804, 10805, 10806, 10807, 10808, 10809, 10810, 10811, 10812, 10813, 10814, 10815, 10816, 10817, 10818, 10819, 10820, 10821, 10822, 10823, 10824, 10825, 10826, 10827, 10828, 10829, 10830, 10831, 10832, 10833, 10834, 10835, 10836, 10837, 10838, 10839, 10840, 10841, 10842, 10843, 10844, 10845, 10846, 10847, 10848, 10849, 10850, 10851, 10852, 10853, 10854, 10855, 10856, 10857, 10858, 10859, 10860, 10861, 10862, 10863, 10864, 10865, 10866, 10867, 10868, 10869, 10870, 10871, 10872, 10873, 10874, 10875, 10876, 10877, 10878, 10879, 10880, 10881, 10882, 10883, 10884, 10885, 10886, 10887, 10888, 10889, 10890, 10891, 10892, 10893, 10894, 10895, 10896, 10897, 10898, 10899, 10901, 10902, 10903, 10904, 10905, 10906, 10907, 10908, 10909, 10910, 10911, 10912, 10913, 10914, 10915, 10916, 10917, 10918, 10919, 10920, 10921, 10922, 10923, 10924, 10925, 10926, 10927, 10928, 10929, 10930, 10931, 10932, 10933, 10934, 10935, 10936, 10937, 10938, 10939, 10940, 10941, 10942, 10943, 10944, 10945, 10946, 10947, 10948, 10949, 10950, 10951, 10952, 10953, 10954, 10955, 10956, 10957, 10958, 10959, 10960, 10961, 10962, 10963, 10964, 10965, 10966, 10967, 10968, 10969, 10970, 10971, 10972, 10973, 10974, 10975, 10976, 10977, 10978, 10979, 10980, 10981, 10982, 10983, 10984, 10985, 10986, 10987, 10988, 10989, 10990, 10991, 10992, 10993, 10994, 10995, 10996, 10997, 10998, 10999, 11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022, 11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030, 11031, 11032, 11033, 11034, 11035, 11036, 11037, 11038, 11039, 11040, 11041, 11042, 11043, 11044, 11045, 11046, 11047, 11048, 11049, 11050, 11051, 11052, 11053, 11054, 11055, 11056, 11057, 11058, 11059, 11060, 11061, 11062, 11063, 11064, 11065, 11066, 11067, 11068, 11069, 11070, 11071, 11072, 11073, 11074, 11075, 11076, 11077, 11078, 11079, 11080, 11081, 11082, 11083, 11084, 11085, 11086, 11087, 11088, 11089, 11090, 11091, 11092, 11093, 11094, 11095, 11096, 11097, 11098, 11099, 11101, 11102, 11103, 11104, 11105, 11106, 11107, 11108, 11109, 11110, 11111, 11112, 11113, 11114, 11115, 11116, 11117, 11118, 11119, 11120, 11121, 11122, 11123, 11124, 11125, 11126, 11127, 11128, 11129, 11130, 11131, 11132, 11133, 11134, 11135, 11136, 11137, 11138, 11139, 11140, 11141, 11142, 11143, 11144, 11145, 11146, 11147, 11148, 11149, 11150, 11151, 11152, 11153, 11154, 11155, 11156, 11157, 11158, 11159, 11160, 11161, 11162, 11163, 11164, 11165, 11166, 11167, 11168, 11169, 11170, 11171, 11172, 11173, 11174, 11175, 11176, 11177, 11178, 11179, 11180, 11181, 11182, 11183, 11184, 11185, 11186, 11187, 11188, 11189, 11190, 11191, 11192, 11193, 11194, 11195, 11196, 11197, 11198, 11199, 11201, 11202, 11203, 11204, 11205, 11206, 11207, 11208, 11209, 11210, 11211, 11212, 11213, 11214, 11215, 11216, 11217, 11218, 11219, 11220, 11221, 11222, 11223, 11224, 11225, 11226, 11227, 11228, 11229, 11230, 11231, 11232, 11233, 11234, 11235, 11236, 11237, 11238, 11239, 11240, 11241, 11242, 11243, 11244, 11245, 11246, 11247, 11248, 11249, 11250, 11251, 11252, 11253, 11254, 11255, 11256, 11257, 11258, 11259, 11260, 11261, 11262, 11263, 11264, 11265, 11266, 11267, 11268, 11269, 11270, 11271, 11272, 11273, 11274, 11275, 11276, 11277, 11278, 11279, 11280, 11281, 11282, 11283, 11284, 11285, 11286, 11287, 11288, 11289, 11290, 11291, 11292, 11293, 11294, 11295, 11296, 11297, 11298, 11299, 11301, 11302, 11303, 11304, 11305, 11306, 11307, 11308, 11309, 11310, 11311, 11312, 11313, 11314, 11315, 11316, 11317, 11318, 11319, 11320, 11321, 11322, 11323, 11324, 11325, 11326, 11327, 11328, 11329, 11330, 11331, 11332, 11333, 11334, 11335, 11336, 11337, 11338, 11339, 11340, 11341, 11342, 11343, 11344, 11345, 11346, 11347, 11348, 11349, 11350, 11351, 11352, 11353, 11354, 11355, 11356, 11357, 11358, 11359, 11360, 11361, 11362, 11363, 11364, 11365, 11366, 11367, 11368, 11369, 11370, 11371, 11372, 11373, 11374, 11375, 11376, 11377, 11378, 11379, 11380, 11381, 11382, 11383, 11384, 11385, 11386, 11387, 11388, 11389, 11390, 11391, 11392, 11393, 11394, 11395, 11396, 11397, 11398, 11399, 11401, 11402, 11403, 11404, 11405, 11406, 11407, 11408, 11409, 11410, 11411, 11412, 11413, 11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421, 11422, 11423, 11424, 11425, 11426, 11427, 11428, 11429, 11430, 11431, 11432, 11433, 11434, 11435, 11436, 11437, 11438, 11439, 11440, 11441, 11442, 11443, 11444, 11445, 11446, 11447, 11448, 11449, 11450, 11451, 11452, 11453, 11454, 11455, 11456, 11457, 11458, 11459, 11460, 11461, 11462, 11463, 11464, 11465, 11466, 11467, 11468, 11469, 11470, 11471, 11472, 11473, 11474, 11475, 11476, 11477, 11478, 11479, 11480, 11481, 11482, 11483, 11484, 11485, 11486, 11487, 11488, 11489, 11490, 11491, 11492, 11493, 11494, 11495, 11496, 11497, 11498, 11499, 11501, 11502, 11503, 11504, 11505, 11506, 11507, 11508, 11509, 11510, 11511, 11512, 11513, 11514, 11515, 11516, 11517, 11518, 11519, 11520, 11521, 11522, 11523, 11524, 11525, 11526, 11527, 11528, 11529, 11530, 11531, 11532, 11533, 11534, 11535, 11536, 11537, 11538, 11539, 11540, 11541, 11542, 11543, 11544, 11545, 11546, 11547, 11548, 11549, 11550, 11551, 11552, 11553, 11554, 11555, 11556, 11557, 11558, 11559, 11560, 11561, 11562, 11563, 11564, 11565, 11566, 11567, 11568, 11569, 11570, 11571, 11572, 11573, 11574, 11575, 11576, 11577, 11578, 11579, 11580, 11581, 11582, 11583, 11584, 11585, 11586, 11587, 11588, 11589, 11590, 11591, 11592, 11593, 11594, 11595, 11596, 11597, 11598, 11599, 11601, 11602, 11603, 11604, 11605, 11606, 11607, 11608, 11609, 11610, 11611, 11612, 11613, 11614, 11615, 11616, 11617, 11618, 11619, 11620, 11621, 11622, 11623, 11624, 11625, 11626, 11627, 11628, 11629, 11630, 11631, 11632, 11633, 11634, 11635, 11636, 11637, 11638, 11639, 11640, 11641, 11642, 11643, 11644, 11645, 11646, 11647, 11648, 11649, 11650, 11651, 11652, 11653, 11654, 11655, 11656, 11657, 11658, 11659, 11660, 11661, 11662, 11663, 11664, 11665, 11666, 11667, 11668, 11669, 11670, 11671, 11672, 11673, 11674, 11675, 11676, 11677, 11678, 11679, 11680, 11681, 11682, 11683, 11684, 11685, 11686, 11687, 11688, 11689, 11690, 11691, 11692, 11693, 11694, 11695, 11696, 11697, 11698, 11699, 11701, 11702, 11703, 11704, 11705, 11706, 11707, 11708, 11709, 11710, 11711, 11712, 11713, 11714, 11715, 11716, 11717, 11718, 11719, 11720, 11721, 11722, 11723, 11724, 11725, 11726, 11727, 11728, 11729, 11730, 11731, 11732, 11733, 11734, 11735, 11736, 11737, 11738, 11739, 11740, 11741, 11742, 11743, 11744, 11745, 11746, 11747, 11748, 11749, 11750, 11751, 11752, 11753, 11754, 11755, 11756, 11757, 11758, 11759, 11760, 11761, 11762, 11763, 11764, 11765, 11766, 11767, 11768, 11769, 11770, 11771, 11772, 11773, 11774, 11775, 11776, 11777, 11778, 11779, 11780, 11781, 11782, 11783, 11784, 11785, 11786, 11787, 11788, 11789, 11790, 11791, 11792, 11793, 11794, 11795, 11796, 11797, 11798, 11799, 11801, 11802, 11803, 11804, 11805, 11806, 11807, 11808, 11809, 11810, 11811, 11812, 11813, 11814, 11815, 11816, 11817, 11818, 11819, 11820, 11821, 11822, 11823, 11824, 11825, 11826, 11827, 11828, 11829, 11830, 11831, 11832, 11833, 11834, 11835, 11836, 11837, 11838, 11839, 11840, 11841, 11842, 11843, 11844, 11845, 11846, 11847, 11848, 11849, 11850, 11851, 11852, 11853, 11854, 11855, 11856, 11857, 11858, 11859, 11860, 11861, 11862, 11863, 11864, 11865, 11866, 11867, 11868, 11869, 11870, 11871, 11872, 11873, 11874, 11875, 11876, 11877, 11878, 11879, 11880, 11881, 11882, 11883, 11884, 11885, 11886, 11887, 11888, 11889, 11890, 11891, 11892, 11893, 11894, 11895, 11896, 11897, 11898, 11899, 11901, 11902, 11903, 11904, 11905, 11906, 11907, 11908, 11909, 11910, 11911, 11912, 11913, 11914, 11915, 11916, 11917, 11918, 11919, 11920, 11921, 11922, 11923, 11924, 11925, 11926, 11927, 11928, 11929, 11930, 11931, 11932, 11933, 11934, 11935, 11936, 11937, 11938, 11939, 11940, 11941, 11942, 11943, 11944, 11945, 11946, 11947, 11948, 11949, 11950, 11951, 11952, 11953, 11954, 11955, 11956, 11957, 11958, 11959, 11960, 11961, 11962, 11963, 11964, 11965, 11966, 11967, 11968, 11969, 11970, 11971, 11972, 11973, 11974, 11975, 11976, 11977, 11978, 11979, 11980, 11981, 11982, 11983, 11984, 11985, 11986, 11987, 11988, 11989, 11990, 11991, 11992, 11993, 11994, 11995, 11996, 11997, 11998, 11999, 12001, 12002, 12003, 12004, 12005, 12006, 12007, 12008, 12009, 12010, 12011, 12012, 12013, 12014, 12015, 12016, 12017, 12018, 12019, 12020, 12021, 12022, 12023, 12024, 12025, 12026, 12027, 12028, 12029, 12030, 12031, 12032, 12033, 12034, 12035, 12036, 12037, 12038, 12039, 12040, 12041, 12042, 12043, 12044, 12045, 12046, 12047, 12048, 12049, 12050, 12051, 12052, 12053, 12054, 12055, 12056, 12057, 12058, 12059, 12060, 12061, 12062, 12063, 12064, 12065, 12066, 12067, 12068, 12069, 12070, 12071, 12072, 12073, 12074, 12075, 12076, 12077, 12078, 12079, 12080, 12081, 12082, 12083, 12084, 12085, 12086, 12087, 12088, 12089, 12090, 12091, 12092, 12093, 12094, 12095, 12096, 12097, 12098, 12099, 12101, 12102, 12103, 12104, 12105, 12106, 12107, 12108, 12109, 12110, 12111, 12112, 12113, 12114, 12115, 12116, 12117, 12118, 12119, 12120, 12121, 12122, 12123, 12124, 12125, 12126, 12127, 12128, 12129, 12130, 12131, 12132, 12133, 12134, 12135, 12136, 12137, 12138, 12139, 12140, 12141, 12142, 12143, 12144, 12145, 12146, 12147, 12148, 12149, 12150, 12151, 12152, 12153, 12154, 12155, 12156, 12157, 12158, 12159, 12160, 12161, 12162, 12163, 12164, 12165, 12166, 12167, 12168, 12169, 12170, 12171, 12172, 12173, 12174, 12175, 12176, 12177, 12178, 12179, 12180, 12181, 12182, 12183, 12184, 12185, 12186, 12187, 12188, 12189, 12190, 12191, 12192, 12193, 12194, 12195, 12196, 12197, 12198, 12199, 12201, 12202, 12203, 12204, 12205, 12206, 12207, 12208, 12209, 12210, 12211, 12212, 12213, 12214, 12215, 12216, 12217, 12218, 12219, 12220, 12221, 12222, 12223, 12224, 12225, 12226, 12227, 12228, 12229, 12230, 12231, 12232, 12233, 12234, 12235, 12236, 12237, 12238, 12239, 12240, 12241, 12242, 12243, 12244, 12245, 12246, 12247, 12248, 12249, 12250, 12251, 12252, 12253, 12254, 12255, 12256, 12257, 12258, 12259, 12260, 12261, 12262, 12263, 12264, 12265, 12266, 12267, 12268, 12269, 12270, 12271, 12272, 12273, 12274, 12275, 12276, 12277, 12278, 12279, 12280, 12281, 12282, 12283, 12284, 12285, 12286, 12287, 12288, 12289, 12290, 12291, 12292, 12293, 12294, 12295, 12296, 12297, 12298, 12299, 12301, 12302, 12303, 12304, 12305, 12306, 12307, 12308, 12309, 12310, 12311, 12312, 12313, 12314, 12315, 12316, 12317, 12318, 12319, 12320, 12321, 12322, 12323, 12324, 12325, 12326, 12327, 12328, 12329, 12330, 12331, 12332, 12333, 12334, 12335, 12336, 12337, 12338, 12339, 12340, 12341, 12342, 12343, 12344, 12345, 12346, 12347, 12348, 12349, 12350, 12351, 12352, 12353, 12354, 12355, 12356, 12357, 12358, 12359, 12360, 12361, 12362, 12363, 12364, 12365, 12366, 12367, 12368, 12369, 12370, 12371, 12372, 12373, 12374, 12375, 12376, 12377, 12378, 12379, 12380, 12381, 12382, 12383, 12384, 12385, 12386, 12387, 12388, 12389, 12390, 12391, 12392, 12393, 12394, 12395, 12396, 12397, 12398, 12399, 12401, 12402, 12403, 12404, 12405, 12406, 12407, 12408, 12409, 12410, 12411, 12412, 12413, 12414, 12415, 12416, 12417, 12418, 12419, 12420, 12421, 12422, 12423, 12424, 12425, 12426, 12427, 12428, 12429, 12430, 12431, 12432, 12433, 12434, 12435, 12436, 12437, 12438, 12439, 12440, 12441, 12442, 12443, 12444, 12445, 12446, 12447, 12448, 12449, 12450, 12451, 12452, 12453, 12454, 12455, 12456, 12457, 12458, 12459, 12460, 12461, 12462, 12463, 12464, 12465, 12466, 12467, 12468, 12469, 12470, 12471, 12472, 12473, 12474, 12475, 12476, 12477, 12478, 12479, 12480, 12481, 12482, 12483, 12484, 12485, 12486, 12487, 12488, 12489, 12490, 12491, 12492, 12493, 12494, 12495, 12496, 12497, 12498, 12499, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512, 12513, 12514, 12515, 12516, 12517, 12518, 12519, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528, 12529, 12530, 12531, 12532, 12533, 12534, 12535, 12536, 12537, 12538, 12539, 12540, 12541, 12542, 12543, 12544, 12545, 12546, 12547, 12548, 12549, 12550, 12551, 12552, 12553, 12554, 12555, 12556, 12557, 12558, 12559, 12560, 12561, 12562, 12563, 12564, 12565, 12566, 12567, 12568, 12569, 12570, 12571, 12572, 12573, 12574, 12575, 12576, 12577, 12578, 12579, 12580, 12581, 12582, 12583, 12584, 12585, 12586, 12587, 12588, 12589, 12590, 12591, 12592, 12593, 12594, 12595, 12596, 12597, 12598, 12599, 12601, 12602, 12603, 12604, 12605, 12606, 12607, 12608, 12609, 12610, 12611, 12612, 12613, 12614, 12615, 12616, 12617, 12618, 12619, 12620, 12621, 12622, 12623, 12624, 12625, 12626, 12627, 12628, 12629, 12630, 12631, 12632, 12633, 12634, 12635, 12636, 12637, 12638, 12639, 12640, 12641, 12642, 12643, 12644, 12645, 12646, 12647, 12648, 12649, 12650, 12651, 12652, 12653, 12654, 12655, 12656, 12657, 12658, 12659, 12660, 12661, 12662, 12663, 12664, 12665, 12666, 12667, 12668, 12669, 12670, 12671, 12672, 12673, 12674, 12675, 12676, 12677, 12678, 12679, 12680, 12681, 12682, 12683, 12684, 12685, 12686, 12687, 12688, 12689, 12690, 12691, 12692, 12693, 12694, 12695, 12696, 12697, 12698, 12699, 12701, 12702, 12703, 12704, 12705, 12706, 12707, 12708, 12709, 12710, 12711, 12712, 12713, 12714, 12715, 12716, 12717, 12718, 12719, 12720, 12721, 12722, 12723, 12724, 12725, 12726, 12727, 12728, 12729, 12730, 12731, 12732, 12733, 12734, 12735, 12736, 12737, 12738, 12739, 12740, 12741, 12742, 12743, 12744, 12745, 12746, 12747, 12748, 12749, 12750, 12751, 12752, 12753, 12754, 12755, 12756, 12757, 12758, 12759, 12760, 12761, 12762, 12763, 12764, 12765, 12766, 12767, 12768, 12769, 12770, 12771, 12772, 12773, 12774, 12775, 12776, 12777, 12778, 12779, 12780, 12781, 12782, 12783, 12784, 12785, 12786, 12787, 12788, 12789, 12790, 12791, 12792, 12793, 12794, 12795, 12796, 12797, 12798, 12799, 12801, 12802, 12803, 12804, 12805, 12806, 12807, 12808, 12809, 12810, 12811, 12812, 12813, 12814, 12815, 12816, 12817, 12818, 12819, 12820, 12821, 12822, 12823, 12824, 12825, 12826, 12827, 12828, 12829, 12830, 12831, 12832, 12833, 12834, 12835, 12836, 12837, 12838, 12839, 12840, 12841, 12842, 12843, 12844, 12845, 12846, 12847, 12848, 12849, 12850, 12851, 12852, 12853, 12854, 12855, 12856, 12857, 12858, 12859, 12860, 12861, 12862, 12863, 12864, 12865, 12866, 12867, 12868, 12869, 12870, 12871, 12872, 12873, 12874, 12875, 12876, 12877, 12878, 12879, 12880, 12881, 12882, 12883, 12884, 12885, 12886, 12887, 12888, 12889, 12890, 12891, 12892, 12893, 12894, 12895, 12896, 12897, 12898, 12899, 12901, 12902, 12903, 12904, 12905, 12906, 12907, 12908, 12909, 12910, 12911, 12912, 12913, 12914, 12915, 12916, 12917, 12918, 12919, 12920, 12921, 12922, 12923, 12924, 12925, 12926, 12927, 12928, 12929, 12930, 12931, 12932, 12933, 12934, 12935, 12936, 12937, 12938, 12939, 12940, 12941, 12942, 12943, 12944, 12945, 12946, 12947, 12948, 12949, 12950, 12951, 12952, 12953, 12954, 12955, 12956, 12957, 12958, 12959, 12960, 12961, 12962, 12963, 12964, 12965, 12966, 12967, 12968, 12969, 12970, 12971, 12972, 12973, 12974, 12975, 12976, 12977, 12978, 12979, 12980, 12981, 12982, 12983, 12984, 12985, 12986, 12987, 12988, 12989, 12990, 12991, 12992, 12993, 12994, 12995, 12996, 12997, 12998, 12999, 13001, 13002, 13003, 13004, 13005, 13006, 13007, 13008, 13009, 13010, 13011, 13012, 13013, 13014, 13015, 13016, 13017, 13018, 13019, 13020, 13021, 13022, 13023, 13024, 13025, 13026, 13027, 13028, 13029, 13030, 13031, 13032, 13033, 13034, 13035, 13036, 13037, 13038, 13039, 13040, 13041, 13042, 13043, 13044, 13045, 13046, 13047, 13048, 13049, 13050, 13051, 13052, 13053, 13054, 13055, 13056, 13057, 13058, 13059, 13060, 13061, 13062, 13063, 13064, 13065, 13066, 13067, 13068, 13069, 13070, 13071, 13072, 13073, 13074, 13075, 13076, 13077, 13078, 13079, 13080, 13081, 13082, 13083, 13084, 13085, 13086, 13087, 13088, 13089, 13090, 13091, 13092, 13093, 13094, 13095, 13096, 13097, 13098, 13099, 13101, 13102, 13103, 13104, 13105, 13106, 13107, 13108, 13109, 13110, 13111, 13112, 13113, 13114, 13115, 13116, 13117, 13118, 13119, 13120, 13121, 13122, 13123, 13124, 13125, 13126, 13127, 13128, 13129, 13130, 13131, 13132, 13133, 13134, 13135, 13136, 13137, 13138, 13139, 13140, 13141, 13142, 13143, 13144, 13145, 13146, 13147, 13148, 13149, 13150, 13151, 13152, 13153, 13154, 13155, 13156, 13157, 13158, 13159, 13160, 13161, 13162, 13163, 13164, 13165, 13166, 13167, 13168, 13169, 13170, 13171, 13172, 13173, 13174, 13175, 13176, 13177, 13178, 13179, 13180, 13181, 13182, 13183, 13184, 13185, 13186, 13187, 13188, 13189, 13190, 13191, 13192, 13193, 13194, 13195, 13196, 13197, 13198, 13199, 13201, 13202, 13203, 13204, 13205, 13206, 13207, 13208, 13209, 13210, 13211, 13212, 13213, 13214, 13215, 13216, 13217, 13218, 13219, 13220, 13221, 13222, 13223, 13224, 13225, 13226, 13227, 13228, 13229, 13230, 13231, 13232, 13233, 13234, 13235, 13236, 13237, 13238, 13239, 13240, 13241, 13242, 13243, 13244, 13245, 13246, 13247, 13248, 13249, 13250, 13251, 13252, 13253, 13254, 13255, 13256, 13257, 13258, 13259, 13260, 13261, 13262, 13263, 13264, 13265, 13266, 13267, 13268, 13269, 13270, 13271, 13272, 13273, 13274, 13275, 13276, 13277, 13278, 13279, 13280, 13281, 13282, 13283, 13284, 13285, 13286, 13287, 13288, 13289, 13290, 13291, 13292, 13293, 13294, 13295, 13296, 13297, 13298, 13299, 13301, 13302, 13303, 13304, 13305, 13306, 13307, 13308, 13309, 13310, 13311, 13312, 13313, 13314, 13315, 13316, 13317, 13318, 13319, 13320, 13321, 13322, 13323, 13324, 13325, 13326, 13327, 13328, 13329, 13330, 13331, 13332, 13333, 13334, 13335, 13336, 13337, 13338, 13339, 13340, 13341, 13342, 13343, 13344, 13345, 13346, 13347, 13348, 13349, 13350, 13351, 13352, 13353, 13354, 13355, 13356, 13357, 13358, 13359, 13360, 13361, 13362, 13363, 13364, 13365, 13366, 13367, 13368, 13369, 13370, 13371, 13372, 13373, 13374, 13375, 13376, 13377, 13378, 13379, 13380, 13381, 13382, 13383, 13384, 13385, 13386, 13387, 13388, 13389, 13390, 13391, 13392, 13393, 13394, 13395, 13396, 13397, 13398, 13399, 13401, 13402, 13403, 13404, 13405, 13406, 13407, 13408, 13409, 13410, 13411, 13412, 13413, 13414, 13415, 13416, 13417, 13418, 13419, 13420, 13421, 13422, 13423, 13424, 13425, 13426, 13427, 13428, 13429, 13430, 13431, 13432, 13433, 13434, 13435, 13436, 13437, 13438, 13439, 13440, 13441, 13442, 13443, 13444, 13445, 13446, 13447, 13448, 13449, 13450, 13451, 13452, 13453, 13454, 13455, 13456, 13457, 13458, 13459, 13460, 13461, 13462, 13463, 13464, 13465, 13466, 13467, 13468, 13469, 13470, 13471, 13472, 13473, 13474, 13475, 13476, 13477, 13478, 13479, 13480, 13481, 13482, 13483, 13484, 13485, 13486, 13487, 13488, 13489, 13490, 13491, 13492, 13493, 13494, 13495, 13496, 13497, 13498, 13499, 13501, 13502, 13503, 13504, 13505, 13506, 13507, 13508, 13509, 13510, 13511, 13512, 13513, 13514, 13515, 13516, 13517, 13518, 13519, 13520, 13521, 13522, 13523, 13524, 13525, 13526, 13527, 13528, 13529, 13530, 13531, 13532, 13533, 13534, 13535, 13536, 13537, 13538, 13539, 13540, 13541, 13542, 13543, 13544, 13545, 13546, 13547, 13548, 13549, 13550, 13551, 13552, 13553, 13554, 13555, 13556, 13557, 13558, 13559, 13560, 13561, 13562, 13563, 13564, 13565, 13566, 13567, 13568, 13569, 13570, 13571, 13572, 13573, 13574, 13575, 13576, 13577, 13578, 13579, 13580, 13581, 13582, 13583, 13584, 13585, 13586, 13587, 13588, 13589, 13590, 13591, 13592, 13593, 13594, 13595, 13596, 13597, 13598, 13599, 13601, 13602, 13603, 13604, 13605, 13606, 13607, 13608, 13609, 13610, 13611, 13612, 13613, 13614, 13615, 13616, 13617, 13618, 13619, 13620, 13621, 13622, 13623, 13624, 13625, 13626, 13627, 13628, 13629, 13630, 13631, 13632, 13633, 13634, 13635, 13636, 13637, 13638, 13639, 13640, 13641, 13642, 13643, 13644, 13645, 13646, 13647, 13648, 13649, 13650, 13651, 13652, 13653, 13654, 13655, 13656, 13657, 13658, 13659, 13660, 13661, 13662, 13663, 13664, 13665, 13666, 13667, 13668, 13669, 13670, 13671, 13672, 13673, 13674, 13675, 13676, 13677, 13678, 13679, 13680, 13681, 13682, 13683, 13684, 13685, 13686, 13687, 13688, 13689, 13690, 13691, 13692, 13693, 13694, 13695, 13696, 13697, 13698, 13699, 13701, 13702, 13703, 13704, 13705, 13706, 13707, 13708, 13709, 13710, 13711, 13712, 13713, 13714, 13715, 13716, 13717, 13718, 13719, 13720, 13721, 13722, 13723, 13724, 13725, 13726, 13727, 13728, 13729, 13730, 13731, 13732, 13733, 13734, 13735, 13736, 13737, 13738, 13739, 13740, 13741, 13742, 13743, 13744, 13745, 13746, 13747, 13748, 13749, 13750, 13751, 13752, 13753, 13754, 13755, 13756, 13757, 13758, 13759, 13760, 13761, 13762, 13763, 13764, 13765, 13766, 13767, 13768, 13769, 13770, 13771, 13772, 13773, 13774, 13775, 13776, 13777, 13778, 13779, 13780, 13781, 13782, 13783, 13784, 13785, 13786, 13787, 13788, 13789, 13790, 13791, 13792, 13793, 13794, 13795, 13796, 13797, 13798, 13799, 13801, 13802, 13803, 13804, 13805, 13806, 13807, 13808, 13809, 13810, 13811, 13812, 13813, 13814, 13815, 13816, 13817, 13818, 13819, 13820, 13821, 13822, 13823, 13824, 13825, 13826, 13827, 13828, 13829, 13830, 13831, 13832, 13833, 13834, 13835, 13836, 13837, 13838, 13839, 13840, 13841, 13842, 13843, 13844, 13845, 13846, 13847, 13848, 13849, 13850, 13851, 13852, 13853, 13854, 13855, 13856, 13857, 13858, 13859, 13860, 13861, 13862, 13863, 13864, 13865, 13866, 13867, 13868, 13869, 13870, 13871, 13872, 13873, 13874, 13875, 13876, 13877, 13878, 13879, 13880, 13881, 13882, 13883, 13884, 13885, 13886, 13887, 13888, 13889, 13890, 13891, 13892, 13893, 13894, 13895, 13896, 13897, 13898, 13899, 13901, 13902, 13903, 13904, 13905, 13906, 13907, 13908, 13909, 13910, 13911, 13912, 13913, 13914, 13915, 13916, 13917, 13918, 13919, 13920, 13921, 13922, 13923, 13924, 13925, 13926, 13927, 13928, 13929, 13930, 13931, 13932, 13933, 13934, 13935, 13936, 13937, 13938, 13939, 13940, 13941, 13942, 13943, 13944, 13945, 13946, 13947, 13948, 13949, 13950, 13951, 13952, 13953, 13954, 13955, 13956, 13957, 13958, 13959, 13960, 13961, 13962, 13963, 13964, 13965, 13966, 13967, 13968, 13969, 13970, 13971, 13972, 13973, 13974, 13975, 13976, 13977, 13978, 13979, 13980, 13981, 13982, 13983, 13984, 13985, 13986, 13987, 13988, 13989, 13990, 13991, 13992, 13993, 13994, 13995, 13996, 13997, 13998, 13999, 14001, 14002, 14003, 14004, 14005, 14006, 14007, 14008, 14009, 14010, 14011, 14012, 14013, 14014, 14015, 14016, 14017, 14018, 14019, 14020, 14021, 14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029, 14030, 14031, 14032, 14033, 14034, 14035, 14036, 14037, 14038, 14039, 14040, 14041, 14042, 14043, 14044, 14045, 14046, 14047, 14048, 14049, 14050, 14051, 14052, 14053, 14054, 14055, 14056, 14057, 14058, 14059, 14060, 14061, 14062, 14063, 14064, 14065, 14066, 14067, 14068, 14069, 14070, 14071, 14072, 14073, 14074, 14075, 14076, 14077, 14078, 14079, 14080, 14081, 14082, 14083, 14084, 14085, 14086, 14087, 14088, 14089, 14090, 14091, 14092, 14093, 14094, 14095, 14096, 14097, 14098, 14099, 14101, 14102, 14103, 14104, 14105, 14106, 14107, 14108, 14109, 14110, 14111, 14112, 14113, 14114, 14115, 14116, 14117, 14118, 14119, 14120, 14121, 14122, 14123, 14124, 14125, 14126, 14127, 14128, 14129, 14130, 14131, 14132, 14133, 14134, 14135, 14136, 14137, 14138, 14139, 14140, 14141, 14142, 14143, 14144, 14145, 14146, 14147, 14148, 14149, 14150, 14151, 14152, 14153, 14154, 14155, 14156, 14157, 14158, 14159, 14160, 14161, 14162, 14163, 14164, 14165, 14166, 14167, 14168, 14169, 14170, 14171, 14172, 14173, 14174, 14175, 14176, 14177, 14178, 14179, 14180, 14181, 14182, 14183, 14184, 14185, 14186, 14187, 14188, 14189, 14190, 14191, 14192, 14193, 14194, 14195, 14196, 14197, 14198, 14199, 14201, 14202, 14203, 14204, 14205, 14206, 14207, 14208, 14209, 14210, 14211, 14212, 14213, 14214, 14215, 14216, 14217, 14218, 14219, 14220, 14221, 14222, 14223, 14224, 14225, 14226, 14227, 14228, 14229, 14230, 14231, 14232, 14233, 14234, 14235, 14236, 14237, 14238, 14239, 14240, 14241, 14242, 14243, 14244, 14245, 14246, 14247, 14248, 14249, 14250, 14251, 14252, 14253, 14254, 14255, 14256, 14257, 14258, 14259, 14260, 14261, 14262, 14263, 14264, 14265, 14266, 14267, 14268, 14269, 14270, 14271, 14272, 14273, 14274, 14275, 14276, 14277, 14278, 14279, 14280, 14281, 14282, 14283, 14284, 14285, 14286, 14287, 14288, 14289, 14290, 14291, 14292, 14293, 14294, 14295, 14296, 14297, 14298, 14299, 14301, 14302, 14303, 14304, 14305, 14306, 14307, 14308, 14309, 14310, 14311, 14312, 14313, 14314, 14315, 14316, 14317, 14318, 14319, 14320, 14321, 14322, 14323, 14324, 14325, 14326, 14327, 14328, 14329, 14330, 14331, 14332, 14333, 14334, 14335, 14336, 14337, 14338, 14339, 14340, 14341, 14342, 14343, 14344, 14345, 14346, 14347, 14348, 14349, 14350, 14351, 14352, 14353, 14354, 14355, 14356, 14357, 14358, 14359, 14360, 14361, 14362, 14363, 14364, 14365, 14366, 14367, 14368, 14369, 14370, 14371, 14372, 14373, 14374, 14375, 14376, 14377, 14378, 14379, 14380, 14381, 14382, 14383, 14384, 14385, 14386, 14387, 14388, 14389, 14390, 14391, 14392, 14393, 14394, 14395, 14396, 14397, 14398, 14399, 14401, 14402, 14403, 14404, 14405, 14406, 14407, 14408, 14409, 14410, 14411, 14412, 14413, 14414, 14415, 14416, 14417, 14418, 14419, 14420, 14421, 14422, 14423, 14424, 14425, 14426, 14427, 14428, 14429, 14430, 14431, 14432, 14433, 14434, 14435, 14436, 14437, 14438, 14439, 14440, 14441, 14442, 14443, 14444, 14445, 14446, 14447, 14448, 14449, 14450, 14451, 14452, 14453, 14454, 14455, 14456, 14457, 14458, 14459, 14460, 14461, 14462, 14463, 14464, 14465, 14466, 14467, 14468, 14469, 14470, 14471, 14472, 14473, 14474, 14475, 14476, 14477, 14478, 14479, 14480, 14481, 14482, 14483, 14484, 14485, 14486, 14487, 14488, 14489, 14490, 14491, 14492, 14493, 14494, 14495, 14496, 14497, 14498, 14499, 14501, 14502, 14503, 14504, 14505, 14506, 14507, 14508, 14509, 14510, 14511, 14512, 14513, 14514, 14515, 14516, 14517, 14518, 14519, 14520, 14521, 14522, 14523, 14524, 14525, 14526, 14527, 14528, 14529, 14530, 14531, 14532, 14533, 14534, 14535, 14536, 14537, 14538, 14539, 14540, 14541, 14542, 14543, 14544, 14545, 14546, 14547, 14548, 14549, 14550, 14551, 14552, 14553, 14554, 14555, 14556, 14557, 14558, 14559, 14560, 14561, 14562, 14563, 14564, 14565, 14566, 14567, 14568, 14569, 14570, 14571, 14572, 14573, 14574, 14575, 14576, 14577, 14578, 14579, 14580, 14581, 14582, 14583, 14584, 14585, 14586, 14587, 14588, 14589, 14590, 14591, 14592, 14593, 14594, 14595, 14596, 14597, 14598, 14599, 14601, 14602, 14603, 14604, 14605, 14606, 14607, 14608, 14609, 14610, 14611, 14612, 14613, 14614, 14615, 14616, 14617, 14618, 14619, 14620, 14621, 14622, 14623, 14624, 14625, 14626, 14627, 14628, 14629, 14630, 14631, 14632, 14633, 14634, 14635, 14636, 14637, 14638, 14639, 14640, 14641, 14642, 14643, 14644, 14645, 14646, 14647, 14648, 14649, 14650, 14651, 14652, 14653, 14654, 14655, 14656, 14657, 14658, 14659, 14660, 14661, 14662, 14663, 14664, 14665, 14666, 14667, 14668, 14669, 14670, 14671, 14672, 14673, 14674, 14675, 14676, 14677, 14678, 14679, 14680, 14681, 14682, 14683, 14684, 14685, 14686, 14687, 14688, 14689, 14690, 14691, 14692, 14693, 14694, 14695, 14696, 14697, 14698, 14699, 14701, 14702, 14703, 14704, 14705, 14706, 14707, 14708, 14709, 14710, 14711, 14712, 14713, 14714, 14715, 14716, 14717, 14718, 14719, 14720, 14721, 14722, 14723, 14724, 14725, 14726, 14727, 14728, 14729, 14730, 14731, 14732, 14733, 14734, 14735, 14736, 14737, 14738, 14739, 14740, 14741, 14742, 14743, 14744, 14745, 14746, 14747, 14748, 14749, 14750, 14751, 14752, 14753, 14754, 14755, 14756, 14757, 14758, 14759, 14760, 14761, 14762, 14763, 14764, 14765, 14766, 14767, 14768, 14769, 14770, 14771, 14772, 14773, 14774, 14775, 14776, 14777, 14778, 14779, 14780, 14781, 14782, 14783, 14784, 14785, 14786, 14787, 14788, 14789, 14790, 14791, 14792, 14793, 14794, 14795, 14796, 14797, 14798, 14799, 14801, 14802, 14803, 14804, 14805, 14806, 14807, 14808, 14809, 14810, 14811, 14812, 14813, 14814, 14815, 14816, 14817, 14818, 14819, 14820, 14821, 14822, 14823, 14824, 14825, 14826, 14827, 14828, 14829, 14830, 14831, 14832, 14833, 14834, 14835, 14836, 14837, 14838, 14839, 14840, 14841, 14842, 14843, 14844, 14845, 14846, 14847, 14848, 14849, 14850, 14851, 14852, 14853, 14854, 14855, 14856, 14857, 14858, 14859, 14860, 14861, 14862, 14863, 14864, 14865, 14866, 14867, 14868, 14869, 14870, 14871, 14872, 14873, 14874, 14875, 14876, 14877, 14878, 14879, 14880, 14881, 14882, 14883, 14884, 14885, 14886, 14887, 14888, 14889, 14890, 14891, 14892, 14893, 14894, 14895, 14896, 14897, 14898, 14899, 14901, 14902, 14903, 14904, 14905, 14906, 14907, 14908, 14909, 14910, 14911, 14912, 14913, 14914, 14915, 14916, 14917, 14918, 14919, 14920, 14921, 14922, 14923, 14924, 14925, 14926, 14927, 14928, 14929, 14930, 14931, 14932, 14933, 14934, 14935, 14936, 14937, 14938, 14939, 14940, 14941, 14942, 14943, 14944, 14945, 14946, 14947, 14948, 14949, 14950, 14951, 14952, 14953, 14954, 14955, 14956, 14957, 14958, 14959, 14960, 14961, 14962, 14963, 14964, 14965, 14966, 14967, 14968, 14969, 14970, 14971, 14972, 14973, 14974, 14975, 14976, 14977, 14978, 14979, 14980, 14981, 14982, 14983, 14984, 14985, 14986, 14987, 14988, 14989, 14990, 14991, 14992, 14993, 14994, 14995, 14996, 14997, 14998, 14999, 15001, 15002, 15003, 15004, 15005, 15006, 15007, 15008, 15009, 15010, 15011, 15012, 15013, 15014, 15015, 15016, 15017, 15018, 15019, 15020, 15021, 15022, 15023, 15024, 15025, 15026, 15027, 15028, 15029, 15030, 15031, 15032, 15033, 15034, 15035, 15036, 15037, 15038, 15039, 15040, 15041, 15042, 15043, 15044, 15045, 15046, 15047, 15048, 15049, 15050, 15051, 15052, 15053, 15054, 15055, 15056, 15057, 15058, 15059, 15060, 15061, 15062, 15063, 15064, 15065, 15066, 15067, 15068, 15069, 15070, 15071, 15072, 15073, 15074, 15075, 15076, 15077, 15078, 15079, 15080, 15081, 15082, 15083, 15084, 15085, 15086, 15087, 15088, 15089, 15090, 15091, 15092, 15093, 15094, 15095, 15096, 15097, 15098, 15099, 15101, 15102, 15103, 15104, 15105, 15106, 15107, 15108, 15109, 15110, 15111, 15112, 15113, 15114, 15115, 15116, 15117, 15118, 15119, 15120, 15121, 15122, 15123, 15124, 15125, 15126, 15127, 15128, 15129, 15130, 15131, 15132, 15133, 15134, 15135, 15136, 15137, 15138, 15139, 15140, 15141, 15142, 15143, 15144, 15145, 15146, 15147, 15148, 15149, 15150, 15151, 15152, 15153, 15154, 15155, 15156, 15157, 15158, 15159, 15160, 15161, 15162, 15163, 15164, 15165, 15166, 15167, 15168, 15169, 15170, 15171, 15172, 15173, 15174, 15175, 15176, 15177, 15178, 15179, 15180, 15181, 15182, 15183, 15184, 15185, 15186, 15187, 15188, 15189, 15190, 15191, 15192, 15193, 15194, 15195, 15196, 15197, 15198, 15199, 15201, 15202, 15203, 15204, 15205, 15206, 15207, 15208, 15209, 15210, 15211, 15212, 15213, 15214, 15215, 15216, 15217, 15218, 15219, 15220, 15221, 15222, 15223, 15224, 15225, 15226, 15227, 15228, 15229, 15230, 15231, 15232, 15233, 15234, 15235, 15236, 15237, 15238, 15239, 15240, 15241, 15242, 15243, 15244, 15245, 15246, 15247, 15248, 15249, 15250, 15251, 15252, 15253, 15254, 15255, 15256, 15257, 15258, 15259, 15260, 15261, 15262, 15263, 15264, 15265, 15266, 15267, 15268, 15269, 15270, 15271, 15272, 15273, 15274, 15275, 15276, 15277, 15278, 15279, 15280, 15281, 15282, 15283, 15284, 15285, 15286, 15287, 15288, 15289, 15290, 15291, 15292, 15293, 15294, 15295, 15296, 15297, 15298, 15299, 15301, 15302, 15303, 15304, 15305, 15306, 15307, 15308, 15309, 15310, 15311, 15312, 15313, 15314, 15315, 15316, 15317, 15318, 15319, 15320, 15321, 15322, 15323, 15324, 15325, 15326, 15327, 15328, 15329, 15330, 15331, 15332, 15333, 15334, 15335, 15336, 15337, 15338, 15339, 15340, 15341, 15342, 15343, 15344, 15345, 15346, 15347, 15348, 15349, 15350, 15351, 15352, 15353, 15354, 15355, 15356, 15357, 15358, 15359, 15360, 15361, 15362, 15363, 15364, 15365, 15366, 15367, 15368, 15369, 15370, 15371, 15372, 15373, 15374, 15375, 15376, 15377, 15378, 15379, 15380, 15381, 15382, 15383, 15384, 15385, 15386, 15387, 15388, 15389, 15390, 15391, 15392, 15393, 15394, 15395, 15396, 15397, 15398, 15399, 15401, 15402, 15403, 15404, 15405, 15406, 15407, 15408, 15409, 15410, 15411, 15412, 15413, 15414, 15415, 15416, 15417, 15418, 15419, 15420, 15421, 15422, 15423, 15424, 15425, 15426, 15427, 15428, 15429, 15430, 15431, 15432, 15433, 15434, 15435, 15436, 15437, 15438, 15439, 15440, 15441, 15442, 15443, 15444, 15445, 15446, 15447, 15448, 15449, 15450, 15451, 15452, 15453, 15454, 15455, 15456, 15457, 15458, 15459, 15460, 15461, 15462, 15463, 15464, 15465, 15466, 15467, 15468, 15469, 15470, 15471, 15472, 15473, 15474, 15475, 15476, 15477, 15478, 15479, 15480, 15481, 15482, 15483, 15484, 15485, 15486, 15487, 15488, 15489, 15490, 15491, 15492, 15493, 15494, 15495, 15496, 15497, 15498, 15499, 15501, 15502, 15503, 15504, 15505, 15506, 15507, 15508, 15509, 15510, 15511, 15512, 15513, 15514, 15515, 15516, 15517, 15518, 15519, 15520, 15521, 15522, 15523, 15524, 15525, 15526, 15527, 15528, 15529, 15530, 15531, 15532, 15533, 15534, 15535, 15536, 15537, 15538, 15539, 15540, 15541, 15542, 15543, 15544, 15545, 15546, 15547, 15548, 15549, 15550, 15551, 15552, 15553, 15554, 15555, 15556, 15557, 15558, 15559, 15560, 15561, 15562, 15563, 15564, 15565, 15566, 15567, 15568, 15569, 15570, 15571, 15572, 15573, 15574, 15575, 15576, 15577, 15578, 15579, 15580, 15581, 15582, 15583, 15584, 15585, 15586, 15587, 15588, 15589, 15590, 15591, 15592, 15593, 15594, 15595, 15596, 15597, 15598, 15599, 15601, 15602, 15603, 15604, 15605, 15606, 15607, 15608, 15609, 15610, 15611, 15612, 15613, 15614, 15615, 15616, 15617, 15618, 15619, 15620, 15621, 15622, 15623, 15624, 15625, 15626, 15627, 15628, 15629, 15630, 15631, 15632, 15633, 15634, 15635, 15636, 15637, 15638, 15639, 15640, 15641, 15642, 15643, 15644, 15645, 15646, 15647, 15648, 15649, 15650, 15651, 15652, 15653, 15654, 15655, 15656, 15657, 15658, 15659, 15660, 15661, 15662, 15663, 15664, 15665, 15666, 15667, 15668, 15669, 15670, 15671, 15672, 15673, 15674, 15675, 15676, 15677, 15678, 15679, 15680, 15681, 15682, 15683, 15684, 15685, 15686, 15687, 15688, 15689, 15690, 15691, 15692, 15693, 15694, 15695, 15696, 15697, 15698, 15699, 15701, 15702, 15703, 15704, 15705, 15706, 15707, 15708, 15709, 15710, 15711, 15712, 15713, 15714, 15715, 15716, 15717, 15718, 15719, 15720, 15721, 15722, 15723, 15724, 15725, 15726, 15727, 15728, 15729, 15730, 15731, 15732, 15733, 15734, 15735, 15736, 15737, 15738, 15739, 15740, 15741, 15742, 15743, 15744, 15745, 15746, 15747, 15748, 15749, 15750, 15751, 15752, 15753, 15754, 15755, 15756, 15757, 15758, 15759, 15760, 15761, 15762, 15763, 15764, 15765, 15766, 15767, 15768, 15769, 15770, 15771, 15772, 15773, 15774, 15775, 15776, 15777, 15778, 15779, 15780, 15781, 15782, 15783, 15784, 15785, 15786, 15787, 15788, 15789, 15790, 15791, 15792, 15793, 15794, 15795, 15796, 15797, 15798, 15799, 15801, 15802, 15803, 15804, 15805, 15806, 15807, 15808, 15809, 15810, 15811, 15812, 15813, 15814, 15815, 15816, 15817, 15818, 15819, 15820, 15821, 15822, 15823, 15824, 15825, 15826, 15827, 15828, 15829, 15830, 15831, 15832, 15833, 15834, 15835, 15836, 15837, 15838, 15839, 15840, 15841, 15842, 15843, 15844, 15845, 15846, 15847, 15848, 15849, 15850, 15851, 15852, 15853, 15854, 15855, 15856, 15857, 15858, 15859, 15860, 15861, 15862, 15863, 15864, 15865, 15866, 15867, 15868, 15869, 15870, 15871, 15872, 15873, 15874, 15875, 15876, 15877, 15878, 15879, 15880, 15881, 15882, 15883, 15884, 15885, 15886, 15887, 15888, 15889, 15890, 15891, 15892, 15893, 15894, 15895, 15896, 15897, 15898, 15899, 15901, 15902, 15903, 15904, 15905, 15906, 15907, 15908, 15909, 15910, 15911, 15912, 15913, 15914, 15915, 15916, 15917, 15918, 15919, 15920, 15921, 15922, 15923, 15924, 15925, 15926, 15927, 15928, 15929, 15930, 15931, 15932, 15933, 15934, 15935, 15936, 15937, 15938, 15939, 15940, 15941, 15942, 15943, 15944, 15945, 15946, 15947, 15948, 15949, 15950, 15951, 15952, 15953, 15954, 15955, 15956, 15957, 15958, 15959, 15960, 15961, 15962, 15963, 15964, 15965, 15966, 15967, 15968, 15969, 15970, 15971, 15972, 15973, 15974, 15975, 15976, 15977, 15978, 15979, 15980, 15981, 15982, 15983, 15984, 15985, 15986, 15987, 15988, 15989, 15990, 15991, 15992, 15993, 15994, 15995, 15996, 15997, 15998, 15999, 16001, 16002, 16003, 16004, 16005, 16006, 16007, 16008, 16009, 16010, 16011, 16012, 16013, 16014, 16015, 16016, 16017, 16018, 16019, 16020, 16021, 16022, 16023, 16024, 16025, 16026, 16027, 16028, 16029, 16030, 16031, 16032, 16033, 16034, 16035, 16036, 16037, 16038, 16039, 16040, 16041, 16042, 16043, 16044, 16045, 16046, 16047, 16048, 16049, 16050, 16051, 16052, 16053, 16054, 16055, 16056, 16057, 16058, 16059, 16060, 16061, 16062, 16063, 16064, 16065, 16066, 16067, 16068, 16069, 16070, 16071, 16072, 16073, 16074, 16075, 16076, 16077, 16078, 16079, 16080, 16081, 16082, 16083, 16084, 16085, 16086, 16087, 16088, 16089, 16090, 16091, 16092, 16093, 16094, 16095, 16096, 16097, 16098, 16099, 16101, 16102, 16103, 16104, 16105, 16106, 16107, 16108, 16109, 16110, 16111, 16112, 16113, 16114, 16115, 16116, 16117, 16118, 16119, 16120, 16121, 16122, 16123, 16124, 16125, 16126, 16127, 16128, 16129, 16130, 16131, 16132, 16133, 16134, 16135, 16136, 16137, 16138, 16139, 16140, 16141, 16142, 16143, 16144, 16145, 16146, 16147, 16148, 16149, 16150, 16151, 16152, 16153, 16154, 16155, 16156, 16157, 16158, 16159, 16160, 16161, 16162, 16163, 16164, 16165, 16166, 16167, 16168, 16169, 16170, 16171, 16172, 16173, 16174, 16175, 16176, 16177, 16178, 16179, 16180, 16181, 16182, 16183, 16184, 16185, 16186, 16187, 16188, 16189, 16190, 16191, 16192, 16193, 16194, 16195, 16196, 16197, 16198, 16199, 16201, 16202, 16203, 16204, 16205, 16206, 16207, 16208, 16209, 16210, 16211, 16212, 16213, 16214, 16215, 16216, 16217, 16218, 16219, 16220, 16221, 16222, 16223, 16224, 16225, 16226, 16227, 16228, 16229, 16230, 16231, 16232, 16233, 16234, 16235, 16236, 16237, 16238, 16239, 16240, 16241, 16242, 16243, 16244, 16245, 16246, 16247, 16248, 16249, 16250, 16251, 16252, 16253, 16254, 16255, 16256, 16257, 16258, 16259, 16260, 16261, 16262, 16263, 16264, 16265, 16266, 16267, 16268, 16269, 16270, 16271, 16272, 16273, 16274, 16275, 16276, 16277, 16278, 16279, 16280, 16281, 16282, 16283, 16284, 16285, 16286, 16287, 16288, 16289, 16290, 16291, 16292, 16293, 16294, 16295, 16296, 16297, 16298, 16299, 16301, 16302, 16303, 16304, 16305, 16306, 16307, 16308, 16309, 16310, 16311, 16312, 16313, 16314, 16315, 16316, 16317, 16318, 16319, 16320, 16321, 16322, 16323, 16324, 16325, 16326, 16327, 16328, 16329, 16330, 16331, 16332, 16333, 16334, 16335, 16336, 16337, 16338, 16339, 16340, 16341, 16342, 16343, 16344, 16345, 16346, 16347, 16348, 16349, 16350, 16351, 16352, 16353, 16354, 16355, 16356, 16357, 16358, 16359, 16360, 16361, 16362, 16363, 16364, 16365, 16366, 16367, 16368, 16369, 16370, 16371, 16372, 16373, 16374, 16375, 16376, 16377, 16378, 16379, 16380, 16381, 16382, 16383, 16384, 16385, 16386, 16387, 16388, 16389, 16390, 16391, 16392, 16393, 16394, 16395, 16396, 16397, 16398, 16399, 16401, 16402, 16403, 16404, 16405, 16406, 16407, 16408, 16409, 16410, 16411, 16412, 16413, 16414, 16415, 16416, 16417, 16418, 16419, 16420, 16421, 16422, 16423, 16424, 16425, 16426, 16427, 16428, 16429, 16430, 16431, 16432, 16433, 16434, 16435, 16436, 16437, 16438, 16439, 16440, 16441, 16442, 16443, 16444, 16445, 16446, 16447, 16448, 16449, 16450, 16451, 16452, 16453, 16454, 16455, 16456, 16457, 16458, 16459, 16460, 16461, 16462, 16463, 16464, 16465, 16466, 16467, 16468, 16469, 16470, 16471, 16472, 16473, 16474, 16475, 16476, 16477, 16478, 16479, 16480, 16481, 16482, 16483, 16484, 16485, 16486, 16487, 16488, 16489, 16490, 16491, 16492, 16493, 16494, 16495, 16496, 16497, 16498, 16499, 16501, 16502, 16503, 16504, 16505, 16506, 16507, 16508, 16509, 16510, 16511, 16512, 16513, 16514, 16515, 16516, 16517, 16518, 16519, 16520, 16521, 16522, 16523, 16524, 16525, 16526, 16527, 16528, 16529, 16530, 16531, 16532, 16533, 16534, 16535, 16536, 16537, 16538, 16539, 16540, 16541, 16542, 16543, 16544, 16545, 16546, 16547, 16548, 16549, 16550, 16551, 16552, 16553, 16554, 16555, 16556, 16557, 16558, 16559, 16560, 16561, 16562, 16563, 16564, 16565, 16566, 16567, 16568, 16569, 16570, 16571, 16572, 16573, 16574, 16575, 16576, 16577, 16578, 16579, 16580, 16581, 16582, 16583, 16584, 16585, 16586, 16587, 16588, 16589, 16590, 16591, 16592, 16593, 16594, 16595, 16596, 16597, 16598, 16599, 16601, 16602, 16603, 16604, 16605, 16606, 16607, 16608, 16609, 16610, 16611, 16612, 16613, 16614, 16615, 16616, 16617, 16618, 16619, 16620, 16621, 16622, 16623, 16624, 16625, 16626, 16627, 16628, 16629, 16630, 16631, 16632, 16633, 16634, 16635, 16636, 16637, 16638, 16639, 16640, 16641, 16642, 16643, 16644, 16645, 16646, 16647, 16648, 16649, 16650, 16651, 16652, 16653, 16654, 16655, 16656, 16657, 16658, 16659, 16660, 16661, 16662, 16663, 16664, 16665, 16666, 16667, 16668, 16669, 16670, 16671, 16672, 16673, 16674, 16675, 16676, 16677, 16678, 16679, 16680, 16681, 16682, 16683, 16684, 16685, 16686, 16687, 16688, 16689, 16690, 16691, 16692, 16693, 16694, 16695, 16696, 16697, 16698, 16699, 16701, 16702, 16703, 16704, 16705, 16706, 16707, 16708, 16709, 16710, 16711, 16712, 16713, 16714, 16715, 16716, 16717, 16718, 16719, 16720, 16721, 16722, 16723, 16724, 16725, 16726, 16727, 16728, 16729, 16730, 16731, 16732, 16733, 16734, 16735, 16736, 16737, 16738, 16739, 16740, 16741, 16742, 16743, 16744, 16745, 16746, 16747, 16748, 16749, 16750, 16751, 16752, 16753, 16754, 16755, 16756, 16757, 16758, 16759, 16760, 16761, 16762, 16763, 16764, 16765, 16766, 16767, 16768, 16769, 16770, 16771, 16772, 16773, 16774, 16775, 16776, 16777, 16778, 16779, 16780, 16781, 16782, 16783, 16784, 16785, 16786, 16787, 16788, 16789, 16790, 16791, 16792, 16793, 16794, 16795, 16796, 16797, 16798, 16799, 16801, 16802, 16803, 16804, 16805, 16806, 16807, 16808, 16809, 16810, 16811, 16812, 16813, 16814, 16815, 16816, 16817, 16818, 16819, 16820, 16821, 16822, 16823, 16824, 16825, 16826, 16827, 16828, 16829, 16830, 16831, 16832, 16833, 16834, 16835, 16836, 16837, 16838, 16839, 16840, 16841, 16842, 16843, 16844, 16845, 16846, 16847, 16848, 16849, 16850, 16851, 16852, 16853, 16854, 16855, 16856, 16857, 16858, 16859, 16860, 16861, 16862, 16863, 16864, 16865, 16866, 16867, 16868, 16869, 16870, 16871, 16872, 16873, 16874, 16875, 16876, 16877, 16878, 16879, 16880, 16881, 16882, 16883, 16884, 16885, 16886, 16887, 16888, 16889, 16890, 16891, 16892, 16893, 16894, 16895, 16896, 16897, 16898, 16899, 16901, 16902, 16903, 16904, 16905, 16906, 16907, 16908, 16909, 16910, 16911, 16912, 16913, 16914, 16915, 16916, 16917, 16918, 16919, 16920, 16921, 16922, 16923, 16924, 16925, 16926, 16927, 16928, 16929, 16930, 16931, 16932, 16933, 16934, 16935, 16936, 16937, 16938, 16939, 16940, 16941, 16942, 16943, 16944, 16945, 16946, 16947, 16948, 16949, 16950, 16951, 16952, 16953, 16954, 16955, 16956, 16957, 16958, 16959, 16960, 16961, 16962, 16963, 16964, 16965, 16966, 16967, 16968, 16969, 16970, 16971, 16972, 16973, 16974, 16975, 16976, 16977, 16978, 16979, 16980, 16981, 16982, 16983, 16984, 16985, 16986, 16987, 16988, 16989, 16990, 16991, 16992, 16993, 16994, 16995, 16996, 16997, 16998, 16999, 17001, 17002, 17003, 17004, 17005, 17006, 17007, 17008, 17009, 17010, 17011, 17012, 17013, 17014, 17015, 17016, 17017, 17018, 17019, 17020, 17021, 17022, 17023, 17024, 17025, 17026, 17027, 17028, 17029, 17030, 17031, 17032, 17033, 17034, 17035, 17036, 17037, 17038, 17039, 17040, 17041, 17042, 17043, 17044, 17045, 17046, 17047, 17048, 17049, 17050, 17051, 17052, 17053, 17054, 17055, 17056, 17057, 17058, 17059, 17060, 17061, 17062, 17063, 17064, 17065, 17066, 17067, 17068, 17069, 17070, 17071, 17072, 17073, 17074, 17075, 17076, 17077, 17078, 17079, 17080, 17081, 17082, 17083, 17084, 17085, 17086, 17087, 17088, 17089, 17090, 17091, 17092, 17093, 17094, 17095, 17096, 17097, 17098, 17099, 17101, 17102, 17103, 17104, 17105, 17106, 17107, 17108, 17109, 17110, 17111, 17112, 17113, 17114, 17115, 17116, 17117, 17118, 17119, 17120, 17121, 17122, 17123, 17124, 17125, 17126, 17127, 17128, 17129, 17130, 17131, 17132, 17133, 17134, 17135, 17136, 17137, 17138, 17139, 17140, 17141, 17142, 17143, 17144, 17145, 17146, 17147, 17148, 17149, 17150, 17151, 17152, 17153, 17154, 17155, 17156, 17157, 17158, 17159, 17160, 17161, 17162, 17163, 17164, 17165, 17166, 17167, 17168, 17169, 17170, 17171, 17172, 17173, 17174, 17175, 17176, 17177, 17178, 17179, 17180, 17181, 17182, 17183, 17184, 17185, 17186, 17187, 17188, 17189, 17190, 17191, 17192, 17193, 17194, 17195, 17196, 17197, 17198, 17199, 17201, 17202, 17203, 17204, 17205, 17206, 17207, 17208, 17209, 17210, 17211, 17212, 17213, 17214, 17215, 17216, 17217, 17218, 17219, 17220, 17221, 17222, 17223, 17224, 17225, 17226, 17227, 17228, 17229, 17230, 17231, 17232, 17233, 17234, 17235, 17236, 17237, 17238, 17239, 17240, 17241, 17242, 17243, 17244, 17245, 17246, 17247, 17248, 17249, 17250, 17251, 17252, 17253, 17254, 17255, 17256, 17257, 17258, 17259, 17260, 17261, 17262, 17263, 17264, 17265, 17266, 17267, 17268, 17269, 17270, 17271, 17272, 17273, 17274, 17275, 17276, 17277, 17278, 17279, 17280, 17281, 17282, 17283, 17284, 17285, 17286, 17287, 17288, 17289, 17290, 17291, 17292, 17293, 17294, 17295, 17296, 17297, 17298, 17299, 17301, 17302, 17303, 17304, 17305, 17306, 17307, 17308, 17309, 17310, 17311, 17312, 17313, 17314, 17315, 17316, 17317, 17318, 17319, 17320, 17321, 17322, 17323, 17324, 17325, 17326, 17327, 17328, 17329, 17330, 17331, 17332, 17333, 17334, 17335, 17336, 17337, 17338, 17339, 17340, 17341, 17342, 17343, 17344, 17345, 17346, 17347, 17348, 17349, 17350, 17351, 17352, 17353, 17354, 17355, 17356, 17357, 17358, 17359, 17360, 17361, 17362, 17363, 17364, 17365, 17366, 17367, 17368, 17369, 17370, 17371, 17372, 17373, 17374, 17375, 17376, 17377, 17378, 17379, 17380, 17381, 17382, 17383, 17384, 17385, 17386, 17387, 17388, 17389, 17390, 17391, 17392, 17393, 17394, 17395, 17396, 17397, 17398, 17399, 17401, 17402, 17403, 17404, 17405, 17406, 17407, 17408, 17409, 17410, 17411, 17412, 17413, 17414, 17415, 17416, 17417, 17418, 17419, 17420, 17421, 17422, 17423, 17424, 17425, 17426, 17427, 17428, 17429, 17430, 17431, 17432, 17433, 17434, 17435, 17436, 17437, 17438, 17439, 17440, 17441, 17442, 17443, 17444, 17445, 17446, 17447, 17448, 17449, 17450, 17451, 17452, 17453, 17454, 17455, 17456, 17457, 17458, 17459, 17460, 17461, 17462, 17463, 17464, 17465, 17466, 17467, 17468, 17469, 17470, 17471, 17472, 17473, 17474, 17475, 17476, 17477, 17478, 17479, 17480, 17481, 17482, 17483, 17484, 17485, 17486, 17487, 17488, 17489, 17490, 17491, 17492, 17493, 17494, 17495, 17496, 17497, 17498, 17499, 17501, 17502, 17503, 17504, 17505, 17506, 17507, 17508, 17509, 17510, 17511, 17512, 17513, 17514, 17515, 17516, 17517, 17518, 17519, 17520, 17521, 17522, 17523, 17524, 17525, 17526, 17527, 17528, 17529, 17530, 17531, 17532, 17533, 17534, 17535, 17536, 17537, 17538, 17539, 17540, 17541, 17542, 17543, 17544, 17545, 17546, 17547, 17548, 17549, 17550, 17551, 17552, 17553, 17554, 17555, 17556, 17557, 17558, 17559, 17560, 17561, 17562, 17563, 17564, 17565, 17566, 17567, 17568, 17569, 17570, 17571, 17572, 17573, 17574, 17575, 17576, 17577, 17578, 17579, 17580, 17581, 17582, 17583, 17584, 17585, 17586, 17587, 17588, 17589, 17590, 17591, 17592, 17593, 17594, 17595, 17596, 17597, 17598, 17599, 17601, 17602, 17603, 17604, 17605, 17606, 17607, 17608, 17609, 17610, 17611, 17612, 17613, 17614, 17615, 17616, 17617, 17618, 17619, 17620, 17621, 17622, 17623, 17624, 17625, 17626, 17627, 17628, 17629, 17630, 17631, 17632, 17633, 17634, 17635, 17636, 17637, 17638, 17639, 17640, 17641, 17642, 17643, 17644, 17645, 17646, 17647, 17648, 17649, 17650, 17651, 17652, 17653, 17654, 17655, 17656, 17657, 17658, 17659, 17660, 17661, 17662, 17663, 17664, 17665, 17666, 17667, 17668, 17669, 17670, 17671, 17672, 17673, 17674, 17675, 17676, 17677, 17678, 17679, 17680, 17681, 17682, 17683, 17684, 17685, 17686, 17687, 17688, 17689, 17690, 17691, 17692, 17693, 17694, 17695, 17696, 17697, 17698, 17699, 17701, 17702, 17703, 17704, 17705, 17706, 17707, 17708, 17709, 17710, 17711, 17712, 17713, 17714, 17715, 17716, 17717, 17718, 17719, 17720, 17721, 17722, 17723, 17724, 17725, 17726, 17727, 17728, 17729, 17730, 17731, 17732, 17733, 17734, 17735, 17736, 17737, 17738, 17739, 17740, 17741, 17742, 17743, 17744, 17745, 17746, 17747, 17748, 17749, 17750, 17751, 17752, 17753, 17754, 17755, 17756, 17757, 17758, 17759, 17760, 17761, 17762, 17763, 17764, 17765, 17766, 17767, 17768, 17769, 17770, 17771, 17772, 17773, 17774, 17775, 17776, 17777, 17778, 17779, 17780, 17781, 17782, 17783, 17784, 17785, 17786, 17787, 17788, 17789, 17790, 17791, 17792, 17793, 17794, 17795, 17796, 17797, 17798, 17799, 17801, 17802, 17803, 17804, 17805, 17806, 17807, 17808, 17809, 17810, 17811, 17812, 17813, 17814, 17815, 17816, 17817, 17818, 17819, 17820, 17821, 17822, 17823, 17824, 17825, 17826, 17827, 17828, 17829, 17830, 17831, 17832, 17833, 17834, 17835, 17836, 17837, 17838, 17839, 17840, 17841, 17842, 17843, 17844, 17845, 17846, 17847, 17848, 17849, 17850, 17851, 17852, 17853, 17854, 17855, 17856, 17857, 17858, 17859, 17860, 17861, 17862, 17863, 17864, 17865, 17866, 17867, 17868, 17869, 17870, 17871, 17872, 17873, 17874, 17875, 17876, 17877, 17878, 17879, 17880, 17881, 17882, 17883, 17884, 17885, 17886, 17887, 17888, 17889, 17890, 17891, 17892, 17893, 17894, 17895, 17896, 17897, 17898, 17899, 17901, 17902, 17903, 17904, 17905, 17906, 17907, 17908, 17909, 17910, 17911, 17912, 17913, 17914, 17915, 17916, 17917, 17918, 17919, 17920, 17921, 17922, 17923, 17924, 17925, 17926, 17927, 17928, 17929, 17930, 17931, 17932, 17933, 17934, 17935, 17936, 17937, 17938, 17939, 17940, 17941, 17942, 17943, 17944, 17945, 17946, 17947, 17948, 17949, 17950, 17951, 17952, 17953, 17954, 17955, 17956, 17957, 17958, 17959, 17960, 17961, 17962, 17963, 17964, 17965, 17966, 17967, 17968, 17969, 17970, 17971, 17972, 17973, 17974, 17975, 17976, 17977, 17978, 17979, 17980, 17981, 17982, 17983, 17984, 17985, 17986, 17987, 17988, 17989, 17990, 17991, 17992, 17993, 17994, 17995, 17996, 17997, 17998, 17999, 18001, 18002, 18003, 18004, 18005, 18006, 18007, 18008, 18009, 18010, 18011, 18012, 18013, 18014, 18015, 18016, 18017, 18018, 18019, 18020, 18021, 18022, 18023, 18024, 18025, 18026, 18027, 18028, 18029, 18030, 18031, 18032, 18033, 18034, 18035, 18036, 18037, 18038, 18039, 18040, 18041, 18042, 18043, 18044, 18045, 18046, 18047, 18048, 18049, 18050, 18051, 18052, 18053, 18054, 18055, 18056, 18057, 18058, 18059, 18060, 18061, 18062, 18063, 18064, 18065, 18066, 18067, 18068, 18069, 18070, 18071, 18072, 18073, 18074, 18075, 18076, 18077, 18078, 18079, 18080, 18081, 18082, 18083, 18084, 18085, 18086, 18087, 18088, 18089, 18090, 18091, 18092, 18093, 18094, 18095, 18096, 18097, 18098, 18099, 18101, 18102, 18103, 18104, 18105, 18106, 18107, 18108, 18109, 18110, 18111, 18112, 18113, 18114, 18115, 18116, 18117, 18118, 18119, 18120, 18121, 18122, 18123, 18124, 18125, 18126, 18127, 18128, 18129, 18130, 18131, 18132, 18133, 18134, 18135, 18136, 18137, 18138, 18139, 18140, 18141, 18142, 18143, 18144, 18145, 18146, 18147, 18148, 18149, 18150, 18151, 18152, 18153, 18154, 18155, 18156, 18157, 18158, 18159, 18160, 18161, 18162, 18163, 18164, 18165, 18166, 18167, 18168, 18169, 18170, 18171, 18172, 18173, 18174, 18175, 18176, 18177, 18178, 18179, 18180, 18181, 18182, 18183, 18184, 18185, 18186, 18187, 18188, 18189, 18190, 18191, 18192, 18193, 18194, 18195, 18196, 18197, 18198, 18199, 18201, 18202, 18203, 18204, 18205, 18206, 18207, 18208, 18209, 18210, 18211, 18212, 18213, 18214, 18215, 18216, 18217, 18218, 18219, 18220, 18221, 18222, 18223, 18224, 18225, 18226, 18227, 18228, 18229, 18230, 18231, 18232, 18233, 18234, 18235, 18236, 18237, 18238, 18239, 18240, 18241, 18242, 18243, 18244, 18245, 18246, 18247, 18248, 18249, 18250, 18251, 18252, 18253, 18254, 18255, 18256, 18257, 18258, 18259, 18260, 18261, 18262, 18263, 18264, 18265, 18266, 18267, 18268, 18269, 18270, 18271, 18272, 18273, 18274, 18275, 18276, 18277, 18278, 18279, 18280, 18281, 18282, 18283, 18284, 18285, 18286, 18287, 18288, 18289, 18290, 18291, 18292, 18293, 18294, 18295, 18296, 18297, 18298, 18299, 18301, 18302, 18303, 18304, 18305, 18306, 18307, 18308, 18309, 18310, 18311, 18312, 18313, 18314, 18315, 18316, 18317, 18318, 18319, 18320, 18321, 18322, 18323, 18324, 18325, 18326, 18327, 18328, 18329, 18330, 18331, 18332, 18333, 18334, 18335, 18336, 18337, 18338, 18339, 18340, 18341, 18342, 18343, 18344, 18345, 18346, 18347, 18348, 18349, 18350, 18351, 18352, 18353, 18354, 18355, 18356, 18357, 18358, 18359, 18360, 18361, 18362, 18363, 18364, 18365, 18366, 18367, 18368, 18369, 18370, 18371, 18372, 18373, 18374, 18375, 18376, 18377, 18378, 18379, 18380, 18381, 18382, 18383, 18384, 18385, 18386, 18387, 18388, 18389, 18390, 18391, 18392, 18393, 18394, 18395, 18396, 18397, 18398, 18399, 18401, 18402, 18403, 18404, 18405, 18406, 18407, 18408, 18409, 18410, 18411, 18412, 18413, 18414, 18415, 18416, 18417, 18418, 18419, 18420, 18421, 18422, 18423, 18424, 18425, 18426, 18427, 18428, 18429, 18430, 18431, 18432, 18433, 18434, 18435, 18436, 18437, 18438, 18439, 18440, 18441, 18442, 18443, 18444, 18445, 18446, 18447, 18448, 18449, 18450, 18451, 18452, 18453, 18454, 18455, 18456, 18457, 18458, 18459, 18460, 18461, 18462, 18463, 18464, 18465, 18466, 18467, 18468, 18469, 18470, 18471, 18472, 18473, 18474, 18475, 18476, 18477, 18478, 18479, 18480, 18481, 18482, 18483, 18484, 18485, 18486, 18487, 18488, 18489, 18490, 18491, 18492, 18493, 18494, 18495, 18496, 18497, 18498, 18499, 18501, 18502, 18503, 18504, 18505, 18506, 18507, 18508, 18509, 18510, 18511, 18512, 18513, 18514, 18515, 18516, 18517, 18518, 18519, 18520, 18521, 18522, 18523, 18524, 18525, 18526, 18527, 18528, 18529, 18530, 18531, 18532, 18533, 18534, 18535, 18536, 18537, 18538, 18539, 18540, 18541, 18542, 18543, 18544, 18545, 18546, 18547, 18548, 18549, 18550, 18551, 18552, 18553, 18554, 18555, 18556, 18557, 18558, 18559, 18560, 18561, 18562, 18563, 18564, 18565, 18566, 18567, 18568, 18569, 18570, 18571, 18572, 18573, 18574, 18575, 18576, 18577, 18578, 18579, 18580, 18581, 18582, 18583, 18584, 18585, 18586, 18587, 18588, 18589, 18590, 18591, 18592, 18593, 18594, 18595, 18596, 18597, 18598, 18599, 18601, 18602, 18603, 18604, 18605, 18606, 18607, 18608, 18609, 18610, 18611, 18612, 18613, 18614, 18615, 18616, 18617, 18618, 18619, 18620, 18621, 18622, 18623, 18624, 18625, 18626, 18627, 18628, 18629, 18630, 18631, 18632, 18633, 18634, 18635, 18636, 18637, 18638, 18639, 18640, 18641, 18642, 18643, 18644, 18645, 18646, 18647, 18648, 18649, 18650, 18651, 18652, 18653, 18654, 18655, 18656, 18657, 18658, 18659, 18660, 18661, 18662, 18663, 18664, 18665, 18666, 18667, 18668, 18669, 18670, 18671, 18672, 18673, 18674, 18675, 18676, 18677, 18678, 18679, 18680, 18681, 18682, 18683, 18684, 18685, 18686, 18687, 18688, 18689, 18690, 18691, 18692, 18693, 18694, 18695, 18696, 18697, 18698, 18699, 18701, 18702, 18703, 18704, 18705, 18706, 18707, 18708, 18709, 18710, 18711, 18712, 18713, 18714, 18715, 18716, 18717, 18718, 18719, 18720, 18721, 18722, 18723, 18724, 18725, 18726, 18727, 18728, 18729, 18730, 18731, 18732, 18733, 18734, 18735, 18736, 18737, 18738, 18739, 18740, 18741, 18742, 18743, 18744, 18745, 18746, 18747, 18748, 18749, 18750, 18751, 18752, 18753, 18754, 18755, 18756, 18757, 18758, 18759, 18760, 18761, 18762, 18763, 18764, 18765, 18766, 18767, 18768, 18769, 18770, 18771, 18772, 18773, 18774, 18775, 18776, 18777, 18778, 18779, 18780, 18781, 18782, 18783, 18784, 18785, 18786, 18787, 18788, 18789, 18790, 18791, 18792, 18793, 18794, 18795, 18796, 18797, 18798, 18799, 18801, 18802, 18803, 18804, 18805, 18806, 18807, 18808, 18809, 18810, 18811, 18812, 18813, 18814, 18815, 18816, 18817, 18818, 18819, 18820, 18821, 18822, 18823, 18824, 18825, 18826, 18827, 18828, 18829, 18830, 18831, 18832, 18833, 18834, 18835, 18836, 18837, 18838, 18839, 18840, 18841, 18842, 18843, 18844, 18845, 18846, 18847, 18848, 18849, 18850, 18851, 18852, 18853, 18854, 18855, 18856, 18857, 18858, 18859, 18860, 18861, 18862, 18863, 18864, 18865, 18866, 18867, 18868, 18869, 18870, 18871, 18872, 18873, 18874, 18875, 18876, 18877, 18878, 18879, 18880, 18881, 18882, 18883, 18884, 18885, 18886, 18887, 18888, 18889, 18890, 18891, 18892, 18893, 18894, 18895, 18896, 18897, 18898, 18899, 18901, 18902, 18903, 18904, 18905, 18906, 18907, 18908, 18909, 18910, 18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920, 18921, 18922, 18923, 18924, 18925, 18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18936, 18937, 18938, 18939, 18940, 18941, 18942, 18943, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951, 18952, 18953, 18954, 18955, 18956, 18957, 18958, 18959, 18960, 18961, 18962, 18963, 18964, 18965, 18966, 18967, 18968, 18969, 18970, 18971, 18972, 18973, 18974, 18975, 18976, 18977, 18978, 18979, 18980, 18981, 18982, 18983, 18984, 18985, 18986, 18987, 18988, 18989, 18990, 18991, 18992, 18993, 18994, 18995, 18996, 18997, 18998, 18999, 19001, 19002, 19003, 19004, 19005, 19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035, 19036, 19037, 19038, 19039, 19040, 19041, 19042, 19043, 19044, 19045, 19046, 19047, 19048, 19049, 19050, 19051, 19052, 19053, 19054, 19055, 19056, 19057, 19058, 19059, 19060, 19061, 19062, 19063, 19064, 19065, 19066, 19067, 19068, 19069, 19070, 19071, 19072, 19073, 19074, 19075, 19076, 19077, 19078, 19079, 19080, 19081, 19082, 19083, 19084, 19085, 19086, 19087, 19088, 19089, 19090, 19091, 19092, 19093, 19094, 19095, 19096, 19097, 19098, 19099, 19101, 19102, 19103, 19104, 19105, 19106, 19107, 19108, 19109, 19110, 19111, 19112, 19113, 19114, 19115, 19116, 19117, 19118, 19119, 19120, 19121, 19122, 19123, 19124, 19125, 19126, 19127, 19128, 19129, 19130, 19131, 19132, 19133, 19134, 19135, 19136, 19137, 19138, 19139, 19140, 19141, 19142, 19143, 19144, 19145, 19146, 19147, 19148, 19149, 19150, 19151, 19152, 19153, 19154, 19155, 19156, 19157, 19158, 19159, 19160, 19161, 19162, 19163, 19164, 19165, 19166, 19167, 19168, 19169, 19170, 19171, 19172, 19173, 19174, 19175, 19176, 19177, 19178, 19179, 19180, 19181, 19182, 19183, 19184, 19185, 19186, 19187, 19188, 19189, 19190, 19191, 19192, 19193, 19194, 19195, 19196, 19197, 19198, 19199, 19201, 19202, 19203, 19204, 19205, 19206, 19207, 19208, 19209, 19210, 19211, 19212, 19213, 19214, 19215, 19216, 19217, 19218, 19219, 19220, 19221, 19222, 19223, 19224, 19225, 19226, 19227, 19228, 19229, 19230, 19231, 19232, 19233, 19234, 19235, 19236, 19237, 19238, 19239, 19240, 19241, 19242, 19243, 19244, 19245, 19246, 19247, 19248, 19249, 19250, 19251, 19252, 19253, 19254, 19255, 19256, 19257, 19258, 19259, 19260, 19261, 19262, 19263, 19264, 19265, 19266, 19267, 19268, 19269, 19270, 19271, 19272, 19273, 19274, 19275, 19276, 19277, 19278, 19279, 19280, 19281, 19282, 19283, 19284, 19285, 19286, 19287, 19288, 19289, 19290, 19291, 19292, 19293, 19294, 19295, 19296, 19297, 19298, 19299, 19301, 19302, 19303, 19304, 19305, 19306, 19307, 19308, 19309, 19310, 19311, 19312, 19313, 19314, 19315, 19316, 19317, 19318, 19319, 19320, 19321, 19322, 19323, 19324, 19325, 19326, 19327, 19328, 19329, 19330, 19331, 19332, 19333, 19334, 19335, 19336, 19337, 19338, 19339, 19340, 19341, 19342, 19343, 19344, 19345, 19346, 19347, 19348, 19349, 19350, 19351, 19352, 19353, 19354, 19355, 19356, 19357, 19358, 19359, 19360, 19361, 19362, 19363, 19364, 19365, 19366, 19367, 19368, 19369, 19370, 19371, 19372, 19373, 19374, 19375, 19376, 19377, 19378, 19379, 19380, 19381, 19382, 19383, 19384, 19385, 19386, 19387, 19388, 19389, 19390, 19391, 19392, 19393, 19394, 19395, 19396, 19397, 19398, 19399, 19401, 19402, 19403, 19404, 19405, 19406, 19407, 19408, 19409, 19410, 19411, 19412, 19413, 19414, 19415, 19416, 19417, 19418, 19419, 19420, 19421, 19422, 19423, 19424, 19425, 19426, 19427, 19428, 19429, 19430, 19431, 19432, 19433, 19434, 19435, 19436, 19437, 19438, 19439, 19440, 19441, 19442, 19443, 19444, 19445, 19446, 19447, 19448, 19449, 19450, 19451, 19452, 19453, 19454, 19455, 19456, 19457, 19458, 19459, 19460, 19461, 19462, 19463, 19464, 19465, 19466, 19467, 19468, 19469, 19470, 19471, 19472, 19473, 19474, 19475, 19476, 19477, 19478, 19479, 19480, 19481, 19482, 19483, 19484, 19485, 19486, 19487, 19488, 19489, 19490, 19491, 19492, 19493, 19494, 19495, 19496, 19497, 19498, 19499, 19501, 19502, 19503, 19504, 19505, 19506, 19507, 19508, 19509, 19510, 19511, 19512, 19513, 19514, 19515, 19516, 19517, 19518, 19519, 19520, 19521, 19522, 19523, 19524, 19525, 19526, 19527, 19528, 19529, 19530, 19531, 19532, 19533, 19534, 19535, 19536, 19537, 19538, 19539, 19540, 19541, 19542, 19543, 19544, 19545, 19546, 19547, 19548, 19549, 19550, 19551, 19552, 19553, 19554, 19555, 19556, 19557, 19558, 19559, 19560, 19561, 19562, 19563, 19564, 19565, 19566, 19567, 19568, 19569, 19570, 19571, 19572, 19573, 19574, 19575, 19576, 19577, 19578, 19579, 19580, 19581, 19582, 19583, 19584, 19585, 19586, 19587, 19588, 19589, 19590, 19591, 19592, 19593, 19594, 19595, 19596, 19597, 19598, 19599, 19601, 19602, 19603, 19604, 19605, 19606, 19607, 19608, 19609, 19610, 19611, 19612, 19613, 19614, 19615, 19616, 19617, 19618, 19619, 19620, 19621, 19622, 19623, 19624, 19625, 19626, 19627, 19628, 19629, 19630, 19631, 19632, 19633, 19634, 19635, 19636, 19637, 19638, 19639, 19640, 19641, 19642, 19643, 19644, 19645, 19646, 19647, 19648, 19649, 19650, 19651, 19652, 19653, 19654, 19655, 19656, 19657, 19658, 19659, 19660, 19661, 19662, 19663, 19664, 19665, 19666, 19667, 19668, 19669, 19670, 19671, 19672, 19673, 19674, 19675, 19676, 19677, 19678, 19679, 19680, 19681, 19682, 19683, 19684, 19685, 19686, 19687, 19688, 19689, 19690, 19691, 19692, 19693, 19694, 19695, 19696, 19697, 19698, 19699, 19701, 19702, 19703, 19704, 19705, 19706, 19707, 19708, 19709, 19710, 19711, 19712, 19713, 19714, 19715, 19716, 19717, 19718, 19719, 19720, 19721, 19722, 19723, 19724, 19725, 19726, 19727, 19728, 19729, 19730, 19731, 19732, 19733, 19734, 19735, 19736, 19737, 19738, 19739, 19740, 19741, 19742, 19743, 19744, 19745, 19746, 19747, 19748, 19749, 19750, 19751, 19752, 19753, 19754, 19755, 19756, 19757, 19758, 19759, 19760, 19761, 19762, 19763, 19764, 19765, 19766, 19767, 19768, 19769, 19770, 19771, 19772, 19773, 19774, 19775, 19776, 19777, 19778, 19779, 19780, 19781, 19782, 19783, 19784, 19785, 19786, 19787, 19788, 19789, 19790, 19791, 19792, 19793, 19794, 19795, 19796, 19797, 19798, 19799, 19801, 19802, 19803, 19804, 19805, 19806, 19807, 19808, 19809, 19810, 19811, 19812, 19813, 19814, 19815, 19816, 19817, 19818, 19819, 19820, 19821, 19822, 19823, 19824, 19825, 19826, 19827, 19828, 19829, 19830, 19831, 19832, 19833, 19834, 19835, 19836, 19837, 19838, 19839, 19840, 19841, 19842, 19843, 19844, 19845, 19846, 19847, 19848, 19849, 19850, 19851, 19852, 19853, 19854, 19855, 19856, 19857, 19858, 19859, 19860, 19861, 19862, 19863, 19864, 19865, 19866, 19867, 19868, 19869, 19870, 19871, 19872, 19873, 19874, 19875, 19876, 19877, 19878, 19879, 19880, 19881, 19882, 19883, 19884, 19885, 19886, 19887, 19888, 19889, 19890, 19891, 19892, 19893, 19894, 19895, 19896, 19897, 19898, 19899, 19901, 19902, 19903, 19904, 19905, 19906, 19907, 19908, 19909, 19910, 19911, 19912, 19913, 19914, 19915, 19916, 19917, 19918, 19919, 19920, 19921, 19922, 19923, 19924, 19925, 19926, 19927, 19928, 19929, 19930, 19931, 19932, 19933, 19934, 19935, 19936, 19937, 19938, 19939, 19940, 19941, 19942, 19943, 19944, 19945, 19946, 19947, 19948, 19949, 19950, 19951, 19952, 19953, 19954, 19955, 19956, 19957, 19958, 19959, 19960, 19961, 19962, 19963, 19964, 19965, 19966, 19967, 19968, 19969, 19970, 19971, 19972, 19973, 19974, 19975, 19976, 19977, 19978, 19979, 19980, 19981, 19982, 19983, 19984, 19985, 19986, 19987, 19988, 19989, 19990, 19991, 19992, 19993, 19994, 19995, 19996, 19997, 19998, 19999]", "e12fcd1b737b4bbeafe67184c490e46a": "54.0", "90d5798592b744c3b798d926381166b5": "Error in executing code: list indices must be integers or slices, not Symbol", "8c0b5ceac4534637bb34dc2c55855c39": "12500", "25c20b27f6634316983231f3da51b23d": "480.0", "0e3155b00bb044e283fe439683771990": "6.0", "401e9155de3d408ba75dd5a5d8e52c88": "4.0", "0d89fe43dbf64cae8ed7aa3e3491a49f": "60.0000000000000", "919ad0c8d06b41dbb3aabfab06d2d083": "48", "5f5954178117472094a9b4efc77145cb": "None", "e2a4230a326c44b495bb632e4e943f4a": "Error in executing code: no valid subset found", "6e05c0990d344a228414aa37303f9d3d": "10", "b92849910bca45baaa3e4321272fed38": "149", "d8a3bd21f0114a78859f80dc7808390a": "28.0", "859a85f83efa438a890511e9713aa1b2": "10000", "13585a80f7f44124a9ca04ce48162473": "541", "bda07670ccc2470cbe19d6eaf188b777": "8.0", "24191a9613144aeb93f76a38442d7f1e": "12", "85cf3757925940459295cfd2a71ea1e0": "312", "90b1aa696333451b9971fda098c30ac2": "25.0", "94979a8929f843ae8c9e59732a2a231f": "1370.974", "394610cafb3f4598931b396e62f6f5d6": "10", "5517441fe6fd4d4d990b6d062ca59200": "347", "bab5fe23a04445d1822d7804251af7d4": "81836", "aef1401fc2334d9dbc3454a42bd64268": "13", "448a9abd1633455683d7ef89d7aac22f": "-10.0", "c14f475802e849ccbef83c4bb05e28c7": "7", "4c38cdb357884facb6ea80c1292d1feb": "Error in executing code: name 'symbols' is not defined", "36e718499dfa4f0bb274475464c1cbaa": "Interval.open(2, oo)", "9884680e95324e809d1d7667dd477444": "36", "2037aadfe0b647ea9fed8ff3693344ab": "105.600000000000", "e275311673124fbe833c8451ef3c278d": "15", "fc821de3c4f740a8a7a7de32106b8fa5": "25", "1b25acef8b4642408d4b54d8f2940956": "10571", "b053381c58ed4fba9195e13ea3013afe": "141", "1b4a08310f1a4ed79a6c2ce1963ef2ac": "21", "18763ab766c8481a92632537bca89953": "0.44999999999999996", "4e9abe0e44fe4995aac8ca4d343671b0": "314.0", "7f4fa2436f214a00a101835c9789475d": "9", "0dbd197943784139a43a2b7452670d6e": "2", "c76cb19e25b245528c26d125f2bf34a6": "15.0", "a1c08c048aa5461c8243652c6e481c1e": "(4, 67, 505)", "b933b158a4c1461098338fafa2304c24": "5", "92082aaa59d04f6aaaa8097b69eae773": "2.119999999999999", "468d92ac9dd640de8d7d966d3df9bed6": "Error in executing code: tuple indices must be integers or slices, not Symbol", "cea359614e9f455d971931ff6402193b": "Error in executing code: name 'symbols' is not defined", "8fc94b87c99f4b15a3a6f3d994e43155": "1616", "cbdf9bddf5a24ac795a9075e22cf9c34": "12470", "dd2b7ab30ddc4ec2a3dd0979fa475563": "1200.0000000000002", "faa72de2d9e24d16998fab355f075ba0": "6", "999fbfdb6925419c9954c193988af693": "25", "d3f06ea4149a47a8ab6cfc8d81c70af2": "1", "9987d7b4f65c4fce9e3408bf37e34468": "29.400000000000002", "3f2c0fa552bd483c9e1149c88fc8f6a0": "Error in executing code: list indices must be integers or slices, not Symbol", "373e69bacc6a4e13bf649d710567a991": "Error in executing code: name 'symbols' is not defined", "e82418e2839a4ffe9703752af5298809": "24", "9cff1109b15349ae96e66066d98a6a19": "Error in executing code: pow expected 2 arguments, got 3", "9d5d9b190d4244279b05cc392d81dd17": "70", "d2467d4a24bc4dd6afb7191e934c5fa2": "115", "f74711bba8f146a3945e902a3451dabf": "3", "8fb592838c8444a193f5540212766ebd": "3.9379999999999997", "5cee7643db84400cafb8ea02df87f237": "156", "609145a064604f76a9cdabae6ecb1160": "105", "05813b32c7404408a267bf1b5b4b56bc": "5051", "483074fae18f41afb463602c96d6abf7": "285.0", "8ac44b9cb04a42878ddc056a5a7d02bb": "10.5", "750477110d4a4d3d8a21f7b5be78fa5f": "55.99", "55812c9e78c54dc6bb0faef0ba7fc169": "4", "cb3c9f8e0d384549b161608dc75d5e69": "2.0", "00f83fc1ab194d95a29747cc874b31b1": "7", "f6920c9aefd1444ba933779be100be30": "Error in executing code: list indices must be integers or slices, not Symbol", "f091573667b6491db678276c4143eb0f": "63.0", "c1530256102e421084bbb164cf48f848": "15", "3ca55752d8064454851178c72bd952c9": "2019.0", "cff030e5988947bcbde4d57377e477a6": "-200.0", "e371743870f146f1b53162199e0a2d80": "1046", "f4848671aeca409f8569f0a60b4b3578": "1854", "fd2630d9816f4b20b93314a6f99cf40a": "14", "fdc61a4da7b34a2d98744987de4bf05f": "5189", "ca962ca8315a4f08ac707eb7ddca67c4": "3225.0", "29c87e759cdc458499ea0a0811320197": "1111104", "5f4c3119a4a44e44885e4bfff8bc739a": "Error in executing code: cannot determine truth value of Relational", "573c0bc4fad64db1a8aa284674220fc0": "-5.0", "d8b11e7c6bf346bb8b58e3b05dfbfee3": "0", "49c0059aa9c84f11a448d608cc749951": "2009", "668429d551764db7b679edc30e35e1a0": "80", "346e95bd1031464aa22198732afcf0c6": "10", "ca05f5b986194e68a588a7865f8d0f9f": "-47", "344505d46fcb4af88411e3d16060b9b2": "5040", "747cb68f360a4e09a57a3ab77ce42025": "4", "e64f6db79c1242f68c91c8276dfea38d": "15", "878b544337834127ba695a6c8933cbd8": "7", "62e81b77f36e4ea68abe749b4db82245": "900", "e55927c84f684d69b5c913d639b91179": "2", "79f8e951c41d4f9fbea62f90356f81c2": "1634", "d66d21c5ac3d47459767c97189da34a4": "109", "d3a7369a01a74e8b87e1a6a98ad27460": "4036", "d9a64f6a7e3d448ba6868500d7241883": "Error in executing code: cannot access local variable 'x' where it is not associated with a value", "8e1f1de856e5477aade074e32f9c59a2": "7", "513033cc0dfd435e8a4512488baa7f80": "120.0", "d253502577104c5cb24ea61bdfbca5e9": "3090.909090909091", "1f9829ca7449490c97ab8ba01f4afa23": "17", "20b9dab45b844b31bdf766c497a16f85": "480.0", "914cf6f935da4d7ea1c2ba8d2931421a": "Error in executing code: cannot determine truth value of Relational", "8a4ded73fffc4ae69acc69a0c50a561a": "36", "a0e4f39233324f5bbc89d202d11aa98c": "600.0", "f86a58479a9446b69469ed125d086e4e": "81", "d927c34362734bf183ea6c7bbe854b19": "28", "d9440b1753724ba880a5727a3c4ad7ce": "Error in executing code: 'Symbol' object is not subscriptable", "d814d4155670459aac204a6c94742f6e": "23430", "e7a179472f9d4a7cb97d22467acdbcc8": "16", "3f342769afc84fe6a403f953972503f4": "Error in executing code: list indices must be integers or slices, not Symbol", "acd5ad11fd504f3ea7c7df0990ec9104": "Error in executing code: 'Integer' object has no attribute 'is_multiple'", "b6c694b26c6c4ae88e13ea37cf464e2a": "398.0", "ff8080814a3c39c1014a58bc3c02457e": "34", "2b90102d8ef241c2a376cf5942fd0ae4": "-6.0", "4032b0c61f264bbc8df6498fce032d75": "8", "5569306ac8444be7a8980475a5db7c31": "325", "8aac50a751148307015114d0d7b50368": "2025", "b45f99bcf9424e1f8d5a598e17c8d67a": "6", "acf7b250446f48da99b9d06870bbdf54": "93.0", "a63c2f99d4e647dfb955b4084f1b496f": "30.0", "7dc087a08d934e81be3163d788e1bf1e": "7254400.0", "0b151241cb7a4f7c840c7643a916e175": "4060", "540fc99f19ba4b58b73154f5d5049d63": "5.0*x + 4.0", "ac26ea01d0674d34af051ee052a3e1e2": "30", "ff80808148880257014888ac79a407e4": "10", "df988796b13a4438bec8f6825e9aab99": "Error in executing code: list indices must be integers or slices, not Symbol", "b003ec21ec9d4d368d4d8fe908f1c8cc": "6", "1fc23e2bb0354e4e9224d88f4a21b36d": "5152", "b469ba64fa9d41d5af48ce5c6371a716": "35", "f68d035b832542fda7796e8933a971f9": "7", "3342914c89bd46de99c7e04906934599": "144", "d09fb961fba64234b3b3cc497e7edebb": "Error in executing code: list index out of range", "2e341b2ec9bf4ab687cbf0a4762605e4": "3.9299999999999997", "2a54557bf600427a9b7866b70ee576d4": "Error in executing code: list index out of range", "940e054583254838884b20f0a61f46d2": "66.0", "95b94e7034824f8e9df531328ae02ef7": "44", "a0db250afbd44aae9ecf6db0f52bca6c": "210", "9bfcffca29134a78969634e71df6aa26": "49", "18d40f4d49534043acccbd5798714a57": "3300.0000000000005", "e05666a80f8042bd882bba680aa6143f": "240.000000000000", "7c8266c3083c479e953ae72ebb0e9210": "0.0009765625", "1cd2194dc96743b0bbfce86a8c2b4659": "780", "53630b90beb14344b6ffc4a5410bd83b": "135.000000000000", "daf4b1b0f5134210bb845e35c4f204aa": "145", "8937d66a913245d2bd7f4c827c41d163": "265", "22d69068b4284670903ddb4aaa88473d": "84", "ff80808148880257014888a874f5056a": "7", "af45582c0b624df7a42c1b0c593c3736": "50", "17b2af81b5b342c890ed386767d72ed6": "4.0*(9.0*m*n - 24.0*m - 24.0*n + 64.0)/(13.0*m*n - 36.0*m - 36.0*n + 96.0)", "ce533c9f714a47438fb4881c7cb39063": "None", "581f58ebc21141e59b3f688cdbced93b": "-80.0000000000000", "12973138ebae41c2a404b631e36d2287": "4245.0", "d15e6420ab56436aa7670cc480cd3e1a": "10", "9fa2e11f3fd4418ebd0efa5129c8acab": "36", "50fce0fb467d4e609da1db573ef223f5": "475", "59c8e67c2478424086b4145eb8e471c0": "1147", "18891dd703a542d0a0fbaa5905a3c3cf": "144", "ff80808148880257014888ac64e107cc": "43", "e3ba3bde7fab4ad8b1797e646ec62327": "-1", "4002d72ec1484cb6858d05af1cad246d": "85.0", "ff80808147c465b80147c6890014039a": "('Person A', 1151.2080000000005)", "b6be5b270a50439a93cf19f8579a864f": "4", "ff2b6c2f565c4f269995a4ea294df3d9": "90", "b24f746bed7f41cbbe8b531dc1ba77fc": "Error in executing code: cannot access local variable 'symbols' where it is not associated with a value", "e6b3caa3aa8f429c9d2b6b0a4f42d13d": "3136", "f41c96bdde8e47edb3d7e94a8c8fcb27": "-900.9999999999999", "67daea11820b4c19b90f8c97bca63a32": "1160", "e795d388056048589041f0fe05eafd4f": "970", "47a0961b667040318d72ce364163868a": "240", "6bb46f7b01334566871eaaeb16ab8fc8": "15", "ef923c858f364a70909806d7a36af572": "[1]", "d6e069787d0e48ad94da736141d8b969": "('D', 24)", "2d05406bfe494e45a047ebdfb3c6254f": "0", "9ce27d26c4d742889286023846e7bd6b": "Error in executing code: list indices must be integers or slices, not Symbol", "53dfbfa722b14e4c91dd13fe046b1266": "847", "980c78d69ece45f894bbb18f61e0c36f": "Error in executing code: name 'symbols' is not defined", "17ac53097cb04c018744b8e1ec5f9922": "(0, 0)", "3b45334090b84895ac50015e5a5ed17c": "20", "77019a3dffd647e0bba0c47dda728304": "36", "45a2adb3ad414947bbcb1e6aae7e840e": "1", "25c7890f25ad469783a852d06279e133": "18", "d362ad32c27e4d6691f252dc9a20423d": "0", "542faf1c8e3249b28f5beaf2fa8a6509": "Error in executing code: list indices must be integers or slices, not Symbol", "ee800a3628434c54b199ffb077fd0dbe": "20", "a37dab6e23794138bd4c6c93d1c3870c": "6552", "b073471e007c47919a2aadc4bffa6686": "30", "8ed7ab1cd57b44239b8b22f2b08f8673": "10.526315789473685", "d0c66642c5b94da6b67ef0d0223d0c9d": "37.196400000000004", "693626410c984740905c60cd2a425907": "3", "ff1ddbaee1664f3fa2136b646937b1d6": "Error in executing code: pow expected 2 arguments, got 3", "c4112bab93e1490189209381d9fb11af": "1178", "41e97e7cd5ce493ba09e09c304c70a42": "146.0", "31b02f59e2f6406c8749aad691e10d77": "182", "efb2278d831248d3acfd3f1680f767be": "17", "76a9b433051641c8ab4f12fc67dd5d0e": "240.000000000000", "840b709da7264ca9b72d777a45a0b037": "Error in executing code: invalid input: x", "2b32f6d52ce14ceab77b9d5f06194ea0": "37.0", "1682bd7c2d2d4e2791b7646ab5e81dc3": "160", "e79ee6cfff3a457199b34288594f1fef": "-12.0", "b51fafe058d240bcbdedba55240292a2": "None", "4fac6bf84498470ab7853642d64744e3": "12345678901234", "dd2beaf778434fb9a780c847a34c7d92": "31", "6dab01f0e9d549efb784c50f0300c260": "73", "a58e5b55280047d2a3b8c9ea8cc6be21": "4", "111ae81e847b464a93465c1216d4a663": "Execution time exceeded the limit", "67677fd43899453e8116dd82749d6afe": "8", "a8690858b60c468b8df5285e39fda6cf": "0", "46d6fe71a7d249888b865cb4ad53673d": "3", "59966ee9ab89440380a75d330f6ec951": "81", "431f5fd4d8d24ad1a18d23ba317df6a6": "149", "e5a132a0c1ac4ee9a1c2cd4ac8463f5a": "149", "d6cd6e90fc584196b1f4e3541793e198": "333000", "bfbb3c304a4d4693ad54e6006751c56c": "Error in executing code: cannot determine truth value of Relational", "82fb9e65d4eb485294c4b8bedef6bde4": "243", "e336be66a849476d9e5811ec6c407e7b": "327", "510c74c2cc2741bc89d68fc9ec869506": "241", "ff8080814623402701462cc736330c6d": "7920", "b5d54c1290e7451f909aa45e227da9b0": "76", "89815970ea564ae3ac45e27ca246ed15": "3997.999", "79eeb2cf8916448a95180c3e5fdf7132": "36", "31796f5ec4514098b42a0fd146e1619e": "22", "be62c4576a724c3aa53c23b5a394e852": "Error in executing code: list index out of range", "013cd5f9dbe447c8958f2ccd5baa6785": "Error in executing code: list indices must be integers or slices, not Symbol", "ff80808145f5210e0145fb8c538a0a03": "None", "f691ba41685c484c9d1e3bfe88b806da": "218", "3a55315e6bcd46f3bb2dd0866ff0eb57": "19", "769577902ea94d5fa0ae252a3d04bf17": "18", "0f22bd6ff63649be80cfc68d231eae8d": "Error in executing code: piglet", "08e255395dcf4a06ba77abf447bcab87": "7", "05072bbccc324874bfc76f3176818938": "66", "be9cd5d487c1438cbf66d27f6a2e3b78": "20", "329e1dd174b144f0a6d594de2b780b38": "7", "b21f3ebb6f514c42ba9012ef990d732b": "57", "d9b0b0241b5541c8b0b7b95bed4cc2ea": "246824682468", "529c1f53992948e0ba4be3ef99f8ac9e": "9930", "28b4ad0d567942af8d7fc58682395dd5": "40586162239", "6f48938b8bf049419c38c04763ab9e23": "6", "0b359c294ee442059c618aea2b8f5e63": "5.0", "dc5fe546afb44d9a975bd3b2d74a86a5": "20149", "827b5b2c79c6477fb5a8931cd931bbae": "28.0", "dc6fa8e5eb364fbb93b53bcc5b310f4c": "4", "a4df7600b73a473c9a85e4c1a8b311ab": "Error in executing code: list indices must be integers or slices, not Symbol", "3dc36adc55ee4e9eb03d39e5475aedc0": "25", "4afa02f5476b428e9f5fcf9c3fbe5c12": "Error in executing code: list indices must be integers or slices, not Symbol", "39c53ba549d14511b4245866a3bc5959": "720.0", "00ff73e8250d471a8cab46aa6693bc2a": "4", "e9033f87565b42e4ad495d21eda34128": "600", "8356d70207c24b26af60b338f8a58098": "12.0", "9e4509fb8577446da84973dd5b8b5274": "2.0", "6146cbdfc0404837b78a54086d37d4ce": "-3437430009670313", "81ef3c0592a445f885154ad2db585123": "3", "81c239139f0f4dd0a9da8f29f89486fa": "80", "9c59f9af0a7a4252aa698f316b472dda": "36", "cf6ed6c8ba294494a178ff7cf9cd1196": "2080.0", "d1df7bb771d24bccbea09ee99e196cd2": "Error in executing code: max() arg is an empty sequence", "23d6edc0148d4811a2dd9a7f04292581": "22", "c1ca470b5fbd4c0db1218ad7327b9409": "20.0", "afa3c6c98ea4448da81cef3145619849": "7", "9fb9d2b1a4b5475a9edf20ffde2e075a": "25.0", "5043afdf118948a491016650993f403c": "4", "9bc4ce0c714b44ed8aa05ef42f2529c4": "60", "d840aa2c49204d7f90166fd866797bd7": "0", "4544ab86f320493085956ae3e92ba198": "-1", "528746f725a248adb5ac5de0a87b81ac": "Error in executing code: list index out of range", "5fb937597f4f4bcf88632e320675913c": "142", "c70700ed6cb545f2bb5deb6e2ec145d0": "27", "54e6a5fe3c65417a85e03c8fba03d52e": "36", "8adece6a2a2d4a4da758f8431dd099da": "156", "109518eef85c48f4941462004a8d690c": "78.0", "e2d636a94af2434f94a8340f463665df": "32/5", "ee37855d7b7f47a9acc047df9e886174": "None", "d4807b8ae7c14f39bc5a3c5e68c77d44": "15", "f703096afcba4cae89086c5228c21c25": "93", "0530e46e35904c2487982cc81cfdf947": "1.407", "0e559b985e9148d3890906610373b19b": "6", "ff356367155e4e3e9f7468bec7c9406c": "0", "7c93518bfc204e0ea97b94c6da6f083a": "Error in executing code: could not solve Mod(x, 4) - 26", "ba23b090e98049898ce66601615a5f20": "Execution time exceeded the limit", "9a4ba647bfbf443b9e58f9a19db74627": "15", "9b6d998a70474569a6ab4195fb1e1de3": "1", "32a32d81868347ec83361170a1db9f33": "20", "880323e2ef424dc2845c66dabedab806": "-25.7757764091344", "b027db0f7a6c47d3ab41f5f5e81a702c": "30240", "a1761aa7fed244629a6727e144d72c11": "1213", "2f775fe4e87c4d01958c3b09050eddb3": "48.0000000000000", "ff8080814559f57d01455f1daf310478": "1716.0000000000002", "5cee28513afc41b5b14172d8faf6c066": "Error in executing code: integer division or modulo by zero", "3fe4eb38d85c494788500222961810dd": "36.0", "7c733af72a94430eab3f52f0100e6210": "7", "9e1bf4108c4d4cb49eebf4405c9ab10b": "11", "057781cfb75e40728ac8ba10d60a82b0": "62", "ff80808147e705d80147f0ff957415cb": "57.69230769230769", "380bc795b3864c338a35c04c89b53389": "2", "1e84a199744a47cbb5e64a5c442a9879": "3036", "be090aec97d34056a8779a3afddde352": "Error in executing code: name 'symbols' is not defined", "efd5af23eeb64fc6a554bbbf771ac58d": "4.00000000000000", "9d6b9632f65343ff9a3d0a0b1d6ca069": "18", "da350c5acb044c4f9960ba0f2cd180dd": "2015", "e79ad06e9321405eaedca4ecf4e1c0c8": "17", "159d67100bc5468dbfb48da716747a17": "Error in executing code: list index out of range", "ff8080814613dae9014621b74d620c93": "4", "6d4e10f9d7aa40d183b70b7d114411da": "232", "b1891c7257bc4db493ea24fe4b33e523": "-79.99999999999999", "50575c677b75490f9df8aeac219f1f27": "32.0", "09e08817fbcc4f8490a553446b99de3e": "50/7", "b1c621934e3e4fb384089263ae0094a4": "173316", "1c7bae6df8a14640a1e0d082a426219b": "24", "ff808081488801c601488c28ad640fd9": "24.0", "3cfde3f7d7804ceca820d415ce9badf7": "-1", "7de2b7a8a6cb41839adaa7e8ba97015b": "('M', 378)", "ca7df36e54a14098b6976f455e639c09": "5.0", "cf64a0d9719043c6ada22161e17f3c3a": "Error in executing code: cannot access local variable 'b_value' where it is not associated with a value", "9b8865ecb8ca4a62868a4ae9c40edd8f": "Error in executing code: name 'symbols' is not defined", "437aa5c122694658a2edf23f9348bbfd": "56", "c086c81c5bfa4d14846afcdaf8b9cda0": "32", "21c53b63c2834942b5761cecffa8998e": "639", "13d1500e78c740768746bd06dbf764b0": "5194", "a061a20397e941afbdfc0a19e5456281": "9.0", "a67a0a6dffd6415ba28a195ffe98b98b": "0.9637391", "7bfcc46c0bf84c10b35bfaf571a9eb59": "3", "08fde5e091b2460895e101197d075259": "4076362", "dc41f394144f4d17a8a090e618cb1e4f": "1980", "bc55abf12638456e8e28a8be1c4f1adc": "Error in executing code: name 'Eq' is not defined", "298f403432594ca6aa957f3864224263": "4", "0defc1efafdd4ae99448c93ad4a42910": "134", "cebeb85b127b4d90a97afed62e64b1c4": "Execution time exceeded the limit", "27349d2d56cb40c6bb8166669a977d26": "31684", "7f71110349464c43acdeb174aa911f8f": "601", "56d4cc1796c8469da55742f1f204e341": "Error in executing code: cannot determine truth value of Relational", "c1db1f942427419cb670c61077f2aced": "210.0", "322b6404e86d4ab39dbd1f5ade0ece30": "0", "43e07e51034740e989619e3465e5b93a": "1213", "de0f9c3d9f734eeba4b24a84f463c03d": "3", "803c96be12ea4c20b20f27d5b171ef23": "5900/491", "e8eb56afeaba491d9bc3d41f894deb47": "340", "7265c5c99da740f1bda8e269b47287c0": "293.225", "658a9556c27248258741bcff29ed694d": "414", "c34f03fb0137487ab6f794e7533a6568": "25.0", "edaad90a289846d282b35364e24686e0": "2018", "4328c5ea74454397b4a217c9092d754a": "-5", "b1c39c05d4cd4f40b6aa2ff98e998d69": "7.0", "a2f13a417e4e4fe1aca3c7a743aa0894": "Error in executing code: max() arg is an empty sequence", "40d330ac703348eb9cd7217e22bc8a39": "Error in executing code: list indices must be integers or slices, not Symbol", "f87f841f41bf4c938561ef19b37e1a24": "12", "ff80808147248448014724de526f015f": "25", "e4a9da0c58de4cab8b3929bdb4a724d2": "330.000000000000", "fff0f2a656d84dcd83e0dd153f20eb68": "Error in executing code: list indices must be integers or slices, not Symbol", "7735dff88221442489f00dd4fe9d13b1": "252", "ff8080814559f57d01455f1db588047a": "29.999999999999996", "15ac588808c14776a6227e8c1f250cfc": "20.0", "a585b00304954a949ccd8bd45e0b7262": "55", "b93a200cfad3469493c3580e4feed403": "3125.0", "a6769cb9fb95469391674675a110f52e": "34", "1774ce04e89c4406b7aa18c9f5f3c2be": "Error in executing code: float division by zero", "86b12e9181a946e68109757805f23751": "24", "ff8080814502fa240145080be2f50ef5": "8.0", "7ca4741d34d14154ade4092a18228e5e": "0", "1ae98a8b445149728204e032b3aa0433": "8", "87bf06687e444287a9a32c143348a378": "738", "788823e7ec314c2cb2ee00a4a6b8f58b": "45", "78ff22db4bab4704afaa41674eb498f6": "4896", "7376e87afc4d4a3dafdef929c6a85cd5": "45.0", "7bd274c0200347858902cb5e887598ba": "6.133333333333333", "0871c5428786443786da32050b7115c1": "Error in executing code: z", "ff8080814526d2f401452794ff0e0416": "60", "8323bf5edb2a485fa4a3ac08c1e6489a": "12.5", "1f9f90062edb480ead8905754406cf11": "Error in executing code: list indices must be integers or slices, not Symbol", "72d26a13b9a74fc489fc8a38201a4149": "400", "6a46da05a9df463caf606aa1ec82630c": "67", "838abdebcf8b4ffa85eb118546a2a4d6": "34", "4dc38143cb6f457aa33f25cd63859ab6": "9", "ccb0273bde0e4864825ec12070823f0e": "100", "3e61405e1d7847caac75b4c2e274bea2": "163", "ed9aed3a041046ed99f3492e8dbe1adb": "Error in executing code: list indices must be integers or slices, not Symbol", "95597ccf8c7e4a7db7553019ac290d91": "Error in executing code: list indices must be integers or slices, not Symbol", "1c0734f3a21242b6b786e8b44eb9d279": "120", "6a049e2cbebb47819352d44fc6d18164": "13", "281d6e9500a04154886fad809d2a1c39": "396", "edbcd004f2864105899f407cd5cea3ae": "1", "2041b82db71f42a4bf860ef5fe795b99": "1773", "9bbf9def22c64f058a561bd2f418f0d4": "180.0", "48d6e9feac7247c8ba15a775bec82584": "720.000000000000", "26f08b4208ba455db8e4df62cfb107fb": "5.0", "dbf1b508b8774558a195484fd64f6004": "21.0", "18587114a6964e1c9d984785138105e7": "68", "ff8080814526d2f4014527946de303ef": "1", "14e43b7743f64d28aa0253a784a41f7d": "11", "ac552a47163b42db8cd78021a9d49efa": "3", "a3bae010a05448d68736111c30a055cd": "1980", "c3ef0f7559a849218d193ea066462534": "32.0", "76b10d658c0246d392ea1a914af7b01d": "7.000000000000001", "8aecddc6355449f39588a0db3357b5b1": "109472", "9cb67dd84f3e4c95b6054260d4d6ba3b": "0.0", "85cec4ddd80a49dab7cf77a23d413f47": "80", "6e435cc5199b46f6bb00bc56b29c0afb": "91", "04b1b1ece5334bfe8a92e877508ceb6b": "59", "73a26743eada45c3984820f5ab585dca": "2", "98b1ad8a765a4ed882941eda66b4fe29": "1993.9999999999998", "bddb911619c94700bbf337b5443f53f8": "48.00000000000004", "ff808081471efe4e01472014f3380181": "4", "d76c58bcfa5e41c685c7a3a9a343a157": "448.95000000000516", "0f91f8d952d640e188e2f8b14feb44fd": "150.0", "f753f0aba2bb477da24148a2618b1820": "45.699999999999996", "ff8080814518d524014526a6ce4c1935": "5039", "cbda947e90cb4486833569983356881a": "10718", "264fe0adec8b4d13b25805018926993f": "17", "24717b895d694ad0a5ad2bf856bd80c3": "0", "086dbcc47d104fb9bb09c8fc53fc5a99": "0", "033c64ee1fb3496385aa0cff00674c38": "22", "ff8080814694a4c30146a96ef9e031d2": "10.0", "048d08d65ec74cfba0509e61febcd61d": "2020.0", "06a474ee44434d0593563dbebb80ea8d": "5.0", "ff808081488801c601488c21e86e0d7b": "27.0", "f2901f9041454ca6a59b95ffa77ddf43": "50", "77cb70246c024321b8b552749e1b85fc": "12", "68dc3a92d37f470cb12d5b0757991bfe": "5", "7e05046af5274a74ab7483ee737eaaa3": "88", "37e732dc16a24c878c99a9bd7aab069a": "11.999999999999998", "6df4bb1471f3460586b6848dae50b689": "120", "d686c3bb971f44db998d461369e2e124": "11", "add03ee1297c4e10a943550f5ffda746": "8280", "ff80808147d925870147da3c4f53017c": "4", "b46dc191973343909799559ae8646af6": "33100.00000000003", "9e4db521ce344beca89fd15cf1d7c283": "12.384615384615385", "11bfdaf4511a4e8c87f48d9264065438": "40.0", "75553d9ef8ac4192ac773423bbac2153": "8", "79e856ffdfc340cc95d02d2ca62a1f59": "1/(0.1 - c)", "85eb3fb38e21422799a9a7de457b715e": "1019090", "af1ed5e7030c45c1a69410ae1b91172a": "56.0", "6748b9bb8c1543948bd981c98d4209b9": "1", "f38fa94b189b42cc8b8685a20a0d758f": "-12.0", "4f275d1f154a4df19789c0fa9d3a4618": "260", "1f04a6efe51843ef9f8be0e8518b67fa": "955", "9c7d25f9e9eb4818826cc4ca670f5837": "94", "ff80808149f0d67d0149f4d9d1fc043e": "600.0", "f3407467d16c47b989af8a84030d3523": "Execution time exceeded the limit", "96c568dc15654147a009c9b6312a85a7": "1.0", "56544f2e7dde44dcb63c9190151a07b1": "None", "01f6f103178842a1ac3c923ae28491c1": "5.0", "7dc8c1a1db0a4323bd4ad96621f17d89": "1.96961861667744 + 2.07652126849899*I", "1bf9123f04b549f898f227021273fb9e": "Execution time exceeded the limit", "caa7b87a451443ff82e6d427add83baa": "Error in executing code: 'Symbol' object is not subscriptable", "ad21e63e73d4464180e208e024c7395d": "25.0", "2cad9f430edb4f4486cabc4724d7401e": "3523", "e319208852434b3ca3c8d2861b9101d8": "Error in executing code: pow expected 2 arguments, got 3", "142c94d27a6840ceb56f6503d72bf0c9": "15", "bb3f7585ce2a4947824fac79968f8e0c": "18", "927d2ef449314ebc8a4ac889df963212": "72", "ec744c56f70d4f6c88388ef912d67652": "275.0", "3d43d14b5ecc4d7ebc8c2d6faea68585": "10100", "fc833d74097043b39901d3ba30848593": "5000.0", "9b4e1a3a29c448c490ef23325d418619": "12.0", "dd0a2645d3ac4a78bb7f3b80da006f3f": "11.3684210526316", "1b7d2f283ebb47049cfd622f0b4ddf59": "38", "4a02c741d6a94e7390168130931127d4": "120.000000000000", "bf27e1aef872479faddcec1ca408f752": "-5335/4", "9b9eeb4d10b04f17a1c7d68fdfea9115": "30", "a00bbc70d23543938d2176ec1262121e": "15", "c775fff30be14bddaef843bea049a289": "10.0", "9342bef83e3e40cca35c12603543b4c4": "23", "53808620935443b58372d344e5dfc628": "6.40000000000000", "4ab13b9e711e452e924c503de56a23c8": "12.0", "86c16102e5bb42b6aa4a1dcf2edd1ab6": "None", "82ced61f6eb542aca244978d4b168556": "35", "b63ea54c9376440f9dccbab5a082e213": "5.0", "082bb4037eed4bcfb7d15bd9f06489e6": "2.5", "dc66b30be23a4ee7a4e9b28ab29d16c0": "None", "bd857f0e9ed049c2a6401f59fb1eed35": "122", "5eb5bcad16be4778b2ac104ca43bca41": "2399.9999999999986", "734c93ceca6048beab14a32665854482": "580.0", "2faed0fa12b942edbe64106a65ebf349": "232", "54bf550a1e464a7f9441c96f1a2b51c2": "0", "b646222aeb7647bf9f68c0cba1ed4b5a": "18", "285d54cfb83146bb844274090ebbec05": "3", "f3c252299101436cadc1584ee33ac34b": "Error in executing code: cannot access local variable 'lambda_min' where it is not associated with a value", "2805b08c89264f988e54d4de6faf15ee": "25", "b941fd1c81a94e269d2081f6a1e268ac": "21.0000000000000", "799430125d454e42b57d4a00c27b92e0": "27", "9f2b663309e141778f8210eb8df2fd94": "2017", "8f378a0d37214c64891d400586d902f4": "Error in executing code: list indices must be integers or slices, not Symbol", "e5802c85a97b41839c1783783ed3afd6": "14", "184f349910fb4eb5a44ba4684b56bb4c": "5.53", "a8fb8a7a131848d6b6aed3f1a02f3d00": "9.0", "e6b611a5de2a4f1491c1029a54a452f4": "14", "63a69d302cde4d948eb25716a1645ed7": "99900.0", "63912cfab72649339dae5236570269b9": "48", "9733e4c778f04c7e8345a3c78631d7fc": "18", "ea435da3b9c54c22aa3fd1328e325ae4": "-1", "a8ae07f1389e4361a5833dbe32ffe1f6": "0.1", "a07e36c09db5455185e3b0d690e111e2": "2", "ff80808148c43ff50148c971d4a40648": "4.0", "47bce664c7f448da84a2e1ec334c2571": "47.99999999999999", "767ed3aa50994873931cfe35b9c4028e": "28.0", "6b5dabec8bba45c0b1fc05320b3b1ae9": "-78", "9d87c4e2bfb84f3cb2b76c80b750754e": "2350.0", "4e6e6b45ab82403286a9f4f4688f548c": "18", "5328179a78ea4663bece5cac9d9025ce": "43", "ff8080814830aa3e01483f855d961a2d": "8.0", "b1bb578bb96047d9b9342bde62a11b9f": "0.16", "ff808081494160cb01494527f341061d": "468", "6d9629e3b74c4873b71d6830e672a17d": "4", "4827774120bb4b8bae115cdb4846807c": "0", "984f00a2783144bfa429b10eb15299bf": "3", "d80aee90948545fcb99fc76e5a142ceb": "Error in executing code: 'float' object has no attribute 'numerator'", "0a00cb24a92a439992fca16e58c09fb4": "60", "ba1d60716faa440d97897684ffd4f920": "50.00000000000001", "2343118a69a440e8956affc3df58e797": "7", "de009991ae7e4218b6db8a82b9f75858": "1.56000000000000", "d45667fc2d5047f7bfb0113613f2e7e8": "6", "80589d153f2447eea910bfa0247d092c": "32", "a6c940ec681549188d16540c3972dafe": "42", "b29a78bd9471495480cbb1b8bf2d86ce": "11", "ff8080814502fa2401450bc7db2115fa": "2222", "b72280858eb54ed68076be0030540dcf": "35", "c8f4044f190b44ba9dee0683f3905dff": "20.0", "babc9e6e98714c938304b8e68e6eeaee": "2867.0", "e31fa8b9af9f4b45a86e17723fe0204b": "37", "ac1557602f224319bacd5e64922fc2d7": "18", "28a18100f1514cf88c76692aafc33660": "12", "b4cbfeece8414a88ad3cea0bfde6e205": "247", "a902cf1eeb15409786265c4080e5e1aa": "Error in executing code: list index out of range", "72f75ee0afab47adbde05df73dccc8a0": "3634", "5dfcf5cf2c094e6f8c13217dc8f67151": "210017", "06ecc8c8725742b0a6a55dc79f7c99c8": "Error in executing code: ", "18c6e472ef404e438144c58a9674b285": "43", "587a177398f04668ad1dc41415a33da3": "Error in executing code: name 'Eq' is not defined", "a0302231e7cf4188bf64fe0560588185": "13.0", "2061efb43ec6457196a65734dfe842de": "17", "f9585e9f945842159f23273d47bfb1f9": "Error in executing code: name 'd' is not defined", "f5630c8467fe4f9d817a21c06589c5f0": "192", "ff808081488801c601488c2260b10dd5": "10", "d77725b3f70f4f05b52d52d2df89f083": "22", "991cfeaa9362409582d28d37fe7a0857": "66240", "e465c87ed0c84701987fc3085b1dfb8f": "19.0", "2a89d9ce839c4761bde873a14b6c7f35": "259.0", "ff80808149990d5e0149d2ea54987706": "10", "dd889016e2854c44aa709f527fd4dc39": "29", "4bc6df7e0f25454daf735b9b390389de": "17.28", "da54d0030c2a4debaedba241e51b674a": "10", "69c930e91f8f49709ed48980faa9cf61": "10*glass_cup + 9", "ec01d918a25b405287aed158bcb317e9": "5000.0", "65bbbb1cd5c64aa092eb37b4ee902c21": "1350.0", "fbecf54767d14645b7ff99727b769535": "60", "7849cb904a6f4027a5c9d450b7086ee7": "Error in executing code: list indices must be integers or slices, not Symbol", "047bcc26f7a948fc87d4df9a8c456a15": "76.0000000000000", "11ae629d8628479c86de4af7ec1b59b0": "1953", "ff8080814715301501471adbfcd604ef": "15", "ca6351f18a6542dfba9cf7521f195ea8": "101052", "33b55c9efc3443218a6f8d0e0a3a09b3": "940.0", "7e3785f820024746a665f77e488d94a0": "297", "9fee7d49525f4f1485a11b46fa7bcb98": "24.999999999999996", "7181f234c0ac4844af31d95f76a83dc9": "21", "fa2cf85e8f714352a05a4938fd9a1223": "15.0", "aa43ffe0ecd2475bb608160d92493174": "400.000000000001", "0aa8a93e9c164a1b9722843ab3e566a2": "3.00000000000000", "ff80808148880257014888a879160574": "1", "ff808081488801c601488c2296bf0df9": "70.0", "21ed5bce63074ecf9cf35584a5b318e1": "-18.0", "f029243034024b2984a06f5e1dffd0c2": "330", "a99a9d283983487aa2cb882831021fb6": "1045", "b99dde0b64404238b593111a1fe4433b": "(15, (49, 1944))", "2924c6c8a4c6410e86d31dbd516c9654": "Error in executing code: name 'symbols' is not defined", "dcec394ed9eb4bfab46f743898f0af89": "68", "a5dcef12d89144ff8ce8f2db27307615": "21", "156eeac5818a47da901d5da00c20feae": "-18.0000000000000", "3afb909791784d408ad7b53f413de66f": "Error in executing code: list indices must be integers or slices, not Symbol", "a84041010c574b6c86d21965abf940a9": "8069", "ca7f7eac875449f6b72bf59b7959d470": "9", "8fa55795009e404c9572b4cf31e1c81b": "3", "478694df1cf349348e845ea84ad74741": "None", "4d32aab7f5b14cd28d63ad3c0e7c3ae9": "36", "044a133f090641e68f3ddb81b4cc1d07": "Execution time exceeded the limit", "a7266e58f9994fb28da6483256673280": "6", "8ed3d9203c3c4f6d830a15cb59d56052": "4.0", "f2e28fc93d18419dad3cbf8f908b095f": "88", "bd286913a048486b96987331a06cb2d9": "3.0", "c524601db6324c34b00ac02872cea09d": "0.742187500000000", "3ede231e8a6c4a32bd944c5644001a40": "19", "a9141b43bfe64d799e2b28ccdf158ce7": "1.0666666666666669", "64c0eb53d9ef49deb0667c1c3463a0ab": "10", "f6f57380e8444fffae813275e70bfd21": "Error in executing code: name 'symbols' is not defined", "cc9ca73ac5344fe28e2227d2fbd1416b": "97", "1d75ab8be617453f891abd85daa90111": "0.33999999999999997", "01708c224d2145f0b10874fb7cb86bfe": "None", "cda3194013da4ab69da7717fd197fac1": "16.0", "7b6584c7fb3b4c33a28f8b2d539e1620": "21430", "d99069a705ce414b8782c2fb487efa7f": "Execution time exceeded the limit", "422ab5d6bcb64324a18d06f0f882a690": "Error in executing code: list indices must be integers or slices, not Symbol", "45f1d97ed06241ad8f777685fe28139e": "3", "29a24e04c0b9482484b2b0b3e908274e": "0", "d59843806101462fb451c2cec0692ff2": "1243.0", "567df9ed8e474345a42248eba6e526c8": "991.33", "daadf49a1c4a4ef3a1fb3cba8856e758": "7054320", "0ed2060507464417b7290049f8d25723": "None", "2c7e354efe5b46d7af164429be064f1c": "443", "089c2d98e23c4da2b1c01cd4aeb2c75d": "2310", "36ab76d6be39406bb57073f7621bb105": "28", "7c7c3c17b8b147a5ad8226adc2b45d8e": "-522", "6a17c290671c412fa22cfc13a893e6bb": "32.0", "8673f34b14074a91ba4ff1abdaeebe41": "-2521", "1d5dd9acd708464db805efdc5145567a": "64", "e590935d28e04f0e8764791a2981a9be": "270", "55bdb316706842c8b5cf7eb426eb1150": "271", "f7da1ba5cbc549738a97c75778577b2e": "Error in executing code: pow expected 2 arguments, got 3", "78acb06d79304817bd0877ae48ede883": "None", "5fa861e6fe984bc99ddbfbde5aa4ce08": "6", "9f516454144a4691b6fe2382fcc82468": "[1.00000000000000]", "b4cf1d62d630461cb607906e15dcce47": "34.58", "5afc28a9c00f434ca3e60a0b55cc43e7": "30", "212535a77bcf45ca9e490642e6212594": "-1384", "acff1f9ed3014abbac92802ec97169dd": "38", "0ba44677eb8e4ff5ab5eead14ddf820a": "60", "fc50dc88fd5b4312bed6c8315428e52f": "4", "da4b659157184de1a1dc29d012d9a37c": "150.000000000000", "c3dea7326cfe4582a71f34e05010ed09": "None", "e2c274b090a64987a081cdd2448d4299": "9*dog", "9b5722b3af424c3190e2286c408fade4": "69", "4015e3d04ca2494aab6358c82989aa81": "14.0", "9527b377858440139b85ee2081d462e0": "0.33999999999999997", "319cda79d97d454494c343772ceea2cf": "[1]", "343f68cc31c24ce2a764a845c64e460a": "84.0", "85817139f5a046619cf06cc310e0e3af": "432.0", "913388a7233e4ca7963e5538b3e29b43": "36000.0", "9c5720d33b72413a84dc47f09a9ca263": "1.28", "4876032f1b1a4da6ae02b0d41039c936": "9", "d9396c04284e4f94ad151868fe04106b": "683", "e94f617dbd094cd8b7900d7c9c63c273": "21", "cda690627ae046138fea1d58c0353272": "49", "a69f8ebc39bf4961acaa7f5dade681d0": "24", "ca1a3d9102d442978b8aa0d325d321ea": "560.9999999999999", "b61986fbbca24c0cb2f6b6c9a669bc4e": "1600", "0eb148c61dfa4d048225fecaf1e88e97": "4.61538461538461", "9c52529a45a443a494d4236e34909ecd": "24.0000000000000", "4518601bcec04000baf2390087df4a4f": "Error in executing code: unsupported operand type(s) for -: 'str' and 'float'", "09a028a3db35410488b3455b77b29837": "13", "faf357cc15704516b1c401d03a3bc3a6": "64", "ff80808149990d5e0149b3c3abb83249": "12.0", "f8d2f06a348c45569e05859fa5263638": "25", "9b4348d962f74fc58bf37b5cd77c9fd8": "360", "1ba524528ff2422790744a4ef9fde229": "6.666666666666668", "ead465860fad41e8ba718460d1b5be37": "30", "3dbe517f06a14586a70d1fbdc4fa18fc": "None", "7e7e511ad6f448ce82844b5885632915": "Error in executing code: list indices must be integers or slices, not Symbol", "d4b6e81c0fbb4ddeace09e1a37528bc5": "0", "58f5738065ed4a869395563dea70ed32": "2400", "c5e7b3c6d33c4c9d8ca201433fe9d0a1": "673", "c9add14d366a4270a1e3b117661780d3": "12.8", "5b01fb3fec53467d8fb2cf357359cc4e": "4", "ff808081488801c601488c2297780dfb": "(61.53846153846154, 49.9999999999992)", "272b240621254023b0ce794b3e73e3f2": "20", "e8c0b00a32524bf096732dd9cc2239f0": "0", "8aac50a75114830701511493a96200ca": "0.025", "638bd49d1f0b4555b50ee3d49b13cc41": "10", "fa6a83b7554d4bafa79610ac942e5108": "1356802260", "74ebf02cfe774a29a412960c00fe5a67": "18", "9677248cc28040e6add0f20976a5df47": "3000", "015be0c947ac4e78b4fe491f2fb34484": "2.0", "90e347fc5f47488698bf9f326be11039": "Error in executing code: No module named 'scipy'", "c9aec65fbbff4ca7935ff3458d731d02": "18", "b547eb5681884fd4ab83c99e2ecac2e6": "3", "48ee6f006688431facaa318ae855bb1e": "Error in executing code: factorial() not defined for negative values", "de914b8d1a1d4947b872dbe9b3dc6533": "nan", "444e5443075c410c9a15d158842c5d8c": "2003.0", "68090a4f73e74669b93c7f0a62c89f70": "9", "ec72940942f44cc0a559ff3b3baaa479": "72.0", "a193ba177e4845b8a8cab1682d9e4386": "60.0*filling_rate + 10.0", "ff80808145a7d1300145b12387b70772": "254.000000000000", "d51746019e994026b8889578a8ea46d8": "1990", "86a45554f0bc4ab0936229d26f23c651": "9", "c31c0002701447c1af3780106aeea19d": "Execution time exceeded the limit", "7b4dc003c60d4775bc08398ca39c20ad": "32.142857142857146", "90de174fccf54ec38afd8cc97c6aa859": "Execution time exceeded the limit", "02583e18756b42c4976cef6165dfdef9": "Error in executing code: can only solve for one symbol at a time", "0359796298314c83af427effbf2df7fc": "480", "c484f04a1a2948609b1cb763efce6b05": "4.0", "971889aade6a4446b7f5076746350169": "Error in executing code: pow expected 2 arguments, got 3", "fd6a276de7da490f90a6df5bf8a4d763": "108", "e17a7d0c533948ddb4ea15bde1d80ac9": "232.0", "00b124d2ca7e4dbbaf46be96657c891d": "46", "ee648fe2dbe24a26b9516644fffa1c97": "-1", "8d77289154044ee28fbcf2ac77f81f2d": "40", "2d1198b38a4c4986b66643e87f1e4b56": "None", "20182481240642e085ca8d0a94c729e7": "600.0", "ba30f43fb0f24f3db478bfa1e331d8a4": "None", "4faadbb35f044bbab45827a5e6f955f4": "26.73", "94ac156d4f8b4ae090d51314f4e99806": "62", "d949cfaa2e7945bcab12bea171f64989": "3024", "2053d2160f39490d96bb67a9b8a038ef": "1440", "1f28c8155fb84faa9d98e9980eb0906e": "30", "d67ed7a767ab4d619864bd05159e15e2": "Error in executing code: ", "56ae71ab4505481a823f1468e13116f5": "21", "d3b1dc2eb029416891e8c063f958b073": "924", "7990b2ae442443b5810b844f7a396b0f": "16", "157d3736115f4b728737ffa5da04f6d3": "40", "20c52be6a2a44555877c44d8e0a544bc": "1", "015d42cd45fd45a99060cc9a06b80450": "60", "ff8080814623402701462ccaf1f40d72": "120", "127fe1d01fd24114b6c2ee4d49b9b3c0": "144", "5bf66a5aec904f4584fd3bb864f808a8": "13", "7ceba9ed80184ee492be010f5bb1eca8": "320", "e7af081f06974161ac155c3447b11145": "2.001", "e45fc01ad26c4b1e9002ab4edd24bc49": "Error in executing code: name 'symbols' is not defined", "30d15e78cfcc42e39fd7eece917f6c08": "240", "b941621f6ef74b36b8321e09e5629cd6": "32", "3569372dc3654d30b08c22351318c0ed": "0", "c3c3de3bf53d4f8da1d637e2679ce079": "16", "73cf9e7a80b7416d9a9407c59fec44f6": "Error in executing code: 'float' object has no attribute 'numerator'", "df97f1bd2cdb4baebb2ad715706e9a6c": "51.0", "2c394269cd394c28afb6a3e656bffbee": "Error in executing code: unsupported operand type(s) for -: 'Equality' and 'Equality'", "d454afba50a34e8e8d8704a8f009db55": "Error in executing code: factorial() not defined for negative values", "a1cfbf9f28414def991bbc88480cc773": "995", "b60fb7afc8b5451a8ad8299064c2607a": "0.004", "bd71cd0709ed442dbc808fea5f642d18": "27", "2512012cee5b4e79a466302eb264d6d1": "987.5", "a17c21c0244242bc82ca5c84da68b632": "Error in executing code: ", "e0a5830c4cf449508b89ceea5448dc21": "1.1666666666666667", "45f5b91c57b74ff684c16894bd48c115": "96", "7fad3f8717904e06b0123077dc4dc040": "None", "6cb172a79f604428a3973ac019117248": "3", "81042ca499064651926b0e45b03d66c1": "95", "70b15c0bb3c44578869b36d3e57f7504": "12", "af3203aadecb45248db803ed34c00436": "418", "e8444a956356461fbd4be9d5cb743fe8": "9", "d2e2ed10f37240ef8499861055e5af73": "90", "9697b623f43c4879963a77b69ad62881": "-4", "1ae8d73a734d454b942837fd8e1a8b22": "Execution time exceeded the limit", "60e8f5e8a3054379bcb4ec5a3eb0630d": "Error in executing code: integer division result too large for a float", "f7868640b40b4d34ac430f731f7810ce": "43", "b8b06a5679784d3a9ea6171ba9d4f5e9": "45", "a963868cbfd84f86bcc61b54204fbb37": "7", "6d3cae549c2d4969ae2c1b07716b1632": "-88.0", "9b1e0df694c5414f85a8b95cc01eefa7": "1536", "392d32e400664aa29eb23c3c05be8f20": "12", "91208ef35b954ca2b731962b83d35def": "0", "ea86b38704a84cd089b855c700e7959c": "6051", "30d257011b3c4e2d80eadb0497de571b": "3", "e4fb6277bf604117a12f7030090f59b7": "96", "ff80808146dc2afe0146dc521d7f0235": "Error in executing code: cannot access local variable 'ans' where it is not associated with a value", "2278ab7a388f46c48125aea8413f2923": "1931", "1dc1a103b99a499faad993d6f0aed02c": "5000", "6f97dc4f60e44a99af1d483788c2e2b9": "64", "12522821941040849d485fa2e3a8d71c": "8", "969af10a731c4dcbbac7f5f8eddd81b4": "55", "75f83d263fff4a7699e17cc3dbe8db31": "28.0", "e25bf3522a4d47cfb4c3412d0dbc009f": "26", "cb5ce9c46157415bba1b2eae4e2ce917": "0.500000000000000", "69f272182bca47dd93932efe8fc64f78": "240.0", "67f35cbd5acd481b9def4c69a56a9b66": "10", "3165f1740ce4481f8ff2ef9e387ce602": "13.7", "41a5ff98bb81473faff22df37921a313": "126.000000000000", "2a7d886bddef4f04b2879ab8f2b4c45f": "-2", "99e4e0c5ed5d468eac436a123a77ffe0": "36.0", "c614a34d627e4da2930cad334b055dbb": "Error in executing code: invalid literal for int() with base 10: ''", "610f7c288b1243c288ab41ddbc5498b2": "525", "2593cd7e1733437ea84ffbbde975ffcd": "(0, [])", "2426512edbfd4a9fa0c6b354f8a5ae50": "6", "fa5774490e3b41ff8712d0894d83bc18": "28", "a856c674f5144e64983609583e5ba2e1": "17", "87aa67383b9441a3ba0c2eeadf58bc14": "59", "73f8261a81384a2a88efe1517fe49c07": "47", "fcb08bd97428466393487c5eee557f30": "5.0", "60de191ff7604753a3746d1fc820806c": "0.200000000000000", "41131ba1c6774669b5fc6df693264978": "278", "e11745824f114580b1fbfa42aec044e3": "16", "bbf7afea8a8c48729284aea3b5e6722b": "150.000000000000", "ea1af015df0641f6bb28a63e69d1b674": "65", "9d5135b3a889404eb9e93b092b7e59d1": "2058", "cf1cf1c103bb45319e551ac16d9269d0": "55.0", "20bd365ff3a84dfdaf70a142d7fe831e": "252", "402b4c03d3884f9e9a8ff76446685677": "8", "912723f588b64b6da6d3e18cb4f0af45": "86", "bb92bff4c9054d8c9d368549e04c81a4": "333333", "cb01d45420a24f969f8c67183c61b68b": "400000", "e961bc7273b74a3c8e3116e07779c81e": "Error in executing code: list indices must be integers or slices, not Symbol", "114644d4c28a4c29a05e512f1059c4ad": "Error in executing code: name 'symbols' is not defined", "ff8080814815760201481b09c04709a0": "Error in executing code: name 'symbols' is not defined", "91d70485441b475eaacd7101fb905a06": "5", "ef0fb27d3c2645889260e7dd04df4d3a": "Error in executing code: list index out of range", "b9ab57e50a0243fea6e10a475e45cda5": "63.0", "4939aa89b9a24d61aba059c68854b818": "9", "10578e9a1e2d4291b26fbe939f5999f6": "180.000000000000", "9756597d4d8a42b9a4d4ab052c38809a": "10", "a0c7e6b1e41e47cf9511a2282f335079": "31", "411a611cfe4e43d48c73a306684384c6": "Execution time exceeded the limit", "3b103081e6124ceca846776faa5ebfea": "Error in executing code: 'float' object has no attribute 'is_prime'", "226400c135b3425bb41a00a8247637f5": "Error in executing code: list indices must be integers or slices, not Symbol", "2bcad2ca01c348cf8262b5d0b7b24a40": "87", "02c2084cd79f40058a6d37c379cc816c": "18", "f8f578f7af7f4c76b95b4bd5c10260b6": "20.0000000000000", "e6ba3db5f0b842148194ca8a251f9069": "Error in executing code: name 'symbols' is not defined", "b6151cfc18064264a157183deef0108b": "Error in executing code: list indices must be integers or slices, not Symbol", "f14adceaa4544a01bb011376bbaf2b70": "1100.00000000000", "7a441f2e94ea4ab59a066db6d5caa450": "270", "b4c5e77ae84845c0895e4558c4239b2c": "3", "e8a8da49aa454f97be1ad52514b60ced": "5", "7812ee251b984251a82a0b6428cb2663": "3", "0795691eb41e4c97844bb1c18066a9ba": "660.000000000000", "db46e4934856495db3ff7e2c8b4c2430": "400", "63c03906d790494a94c9e2878c290611": "1345.0", "5988606d88bb4a9ca02e048448363840": "Error in executing code: name 'permutations' is not defined", "df4c0323842f4746bd73224725e94393": "-0.2799999999999999", "24b9eec4220b4353a44dab7df49b9c63": "48", "63729b5db48f4e8593bedeb61e00499a": "Error in executing code: cannot convert float infinity to integer", "82bdd363c9f84a869f8f97fa5689ca64": "61", "62e365f0e2684c56895499b840875bfc": "100", "6e69b8a6735042c28811fd21b80df410": "30.0", "8aac4907519fa10a0152350569757ea1": "5005", "37f200a3b60f4ce4bdec3b0ffb785c74": "None", "ff8080814a03dbc1014a04c548060071": "13.0", "06514b88d86b45eb8e1d06dec99e0b0d": "1716", "4614afaf7d76474289c8bd85cc5e1605": "13", "5bce50abb9ea4b5d89b48009aa270328": "2346", "395727df478344f1ae74f3e65e34e831": "35", "f24ec7e6b9cb4a98b718402ed2a59508": "1179.0", "a682238e4f9e4a90b2cf99f5a672ce01": "Error in executing code: solving Abs(c - b**2/(4*a)) when the argument is not real or imaginary.", "fbf3ef00d27041e59e50d946921fc04c": "12", "75301fef03014113a10d3aac4c97a8eb": "4", "7741f4c2ee01464bbce90fee19067bb2": "14", "f869fc2407e547bca7da900a9474424d": "29", "8ed1dd5526d344cda134b771488c9645": "1", "3cbcaefc3efa4ab88a64073cd952dbbf": "24.0", "ff80808145933e8e01459840743408bc": "8", "f38d58795a984b27903e8811a9348c9e": "365", "dfc0d897237d4a6ca02a06976f8376e5": "40.0", "a2923a2d6bcf4bafa9b1b7ec463d1935": "[1, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100]", "64cc4d5ff33e4a4681bebe891adb4da4": "30", "f989cb969b3941d19a001aec0e2136b6": "63", "982e3813ec444670972a980f76763991": "12.0", "a587cf4c535e4dbdb31df5c1dd1373be": "300.0", "a75a0f435b8f4b729a8aa80324e61cb3": "Error in executing code: twentyfive_cent", "fe6d386042db4a0f932b938f346bc3a3": "5", "8f44d8648cdb4795b4c61a2039c1d571": "40.0", "9bd3db1a7d294051955a2e413dd4c140": "93", "6f6a977ff1bf479dbc70f3040ec09724": "66.99999999999996", "38d4230d91e74f48bf9b333e65f8813a": "129", "ad59116cd86a4b7bb11c6b5cacfa382d": "Error in executing code: max() arg is an empty sequence", "b52b96563092470e8b627ee850e5def3": "285", "f46a80746ee449b9b0c2be6cef102625": "66", "50029420b6bf422f989214cff9907d1e": "100.0", "d444d542200d4af49fc09e3ce40a89c4": "20", "f3e2205eab584a2eba9ab0c9ffaf7d4b": "2", "545c8a97cf214795b4d5f97a2dd0cdfe": "0.0", "e5ced30a94394324bea2884afa871eee": "144", "318ef1dff531423c93864d59756269e2": "3", "05fc22f36d5449a0b78f66b41e6d739c": "8", "4f4ca95e5064436f8250fcb7b96a026c": "21", "c3a9dae92a584c3384749ca4bdd90a4e": "336", "655404eae59c446680c0c76e03e9494e": "144", "c6fc6289546a499ea13c05f1a7ba4e1b": "Error in executing code: tuple indices must be integers or slices, not Symbol", "9ddb8a446ffd480d9faa76eea9f2a2b4": "466", "38638ad7672c445bbbb238dc4f71c224": "113", "8a5232104f84432f8ce72bf6ddedeefe": "6972", "8f77ffff219547b9a4474c61a3baf566": "42.0", "c66f9bbb0d494931a38e1c4f41b0b1f0": "15", "574dfaff42e34928b0d3645dfb38580b": "25", "cf74b55ffee24592ad69682cd17001b1": "Error in executing code: list index out of range", "4084923e740449d0874d7d9bfc95e3c2": "700.0", "ea56a34f36bd4f519ee1d6711d0cf566": "Error in executing code: name 's' is not defined", "9eb1093d35664784bfcf1d6c3aaade49": "Error in executing code: 'Interval' object is not iterable", "a6c9f1845bac4545a8ba1ee5e0f7bda3": "2", "83bfc7146b4f48fbb2696721da4d096d": "32", "f61c6b5926a84a8b828b2a5e9dbf3503": "2.0", "8937c560228c43f28deb34886a6f2ac3": "42", "2bb5b712cb2c4db0b5ca19359e0c79ca": "31.04000000000001", "f42989ed79524521be5a797a2b5d4bdb": "13", "4dfc2ed4247b44eabb6f825e769a0cc6": "Error in executing code: float division by zero", "1ccf3d524ae2465ea6b088da0f893ee1": "46", "7ed2d3e0c12b41278f9870f22690419c": "0.3789845942148858", "eeca76a8ab8144a1bbc2fbbd83bd7891": "377", "835376944c264df9b621e64a518e6b8c": "548", "67c5563bc6724bf2943e08fa2b738615": "0", "ca6a2794c9264fcc9fc8a1a9928b8152": "395", "473154cb5be5404ea30e851067afccf7": "Error in executing code: name 'c' is not defined", "e6cd825343094b15a810508e62dccbce": "960", "0ed5a68bca7a492aa9ee14ddc6ab0fb2": "766", "c408ae17b6184f128294bc67f8e8b56a": "113", "4a5d7bd6de034a9fb7680aff2bf255dc": "7", "bb75cb6aed164e80838a7a86b94433a5": "67", "c8cf6608a8bc426ea34a42527df2222c": "Error in executing code: solving Abs(p - 11*q + 197) when the argument is not real or imaginary.", "dd37581de9b64db6a55fbca8ceb9a24b": "Error: Time mis-match", "c39b0290299a4d65a399d188422dbeed": "8.0", "3bebe6c4d4cd4aba91ce7856a481fc68": "-12", "3f9dc48a90044894988d9e8d9bd9dd43": "40.0", "5399198f8bb74617b8003e4ce24e44a2": "-1.2999999999999936", "b2fcc79140c84f4b88e1151ef90aada0": "[1, 9]", "d48a46e7ccf64e8482bcaee05f8d9a9b": "Error in executing code: name 'symbols' is not defined", "cd638d497f9d453fb05b3c9f70560190": "3333300000", "334b0b28d47d4207a349f6c06d6508b7": "4.0", "db67b43f6bf9435686cbda856b1bbe38": "120.0", "1d49b62e37394bf4a1fab9394e6e5275": "None", "3b31413757d74ee68a48bddacd32836f": "7", "8cf9a3d7864940d7b18027cb3bb8ef23": "76.0000000000000", "c8237a77c5634dacb1bee158581ed3fe": "45", "dbac408c1c20408287ad7028394226d2": "0.41", "4c29dd583bdb4ac89b7a4ceca4993ca8": "18", "8aac50a7519fa10a01519fb813590000": "33743", "eb0d1e0647ab4891a3d5235e2e4941a4": "750", "ef26b684b46d4affa1dcf439dae38062": "7500.0", "75958f9933a141baa223340c2570557c": "70", "ab8521e56883468c99f0d0617a5f8ed4": "2025", "c2c09f7c755d448aaf922dc8705f6a49": "4", "c174470b80d748db9c678f4174ec9333": "41", "65ce2d03cc3f438193942e6e2ccb0015": "16", "2d1dce76f0844a05b15cbe8d88b5f12e": "360.0", "bd0313e380a944d0a02630604c4e3a02": "2018", "3333808b976440369fbe383e43fa50b8": "Error in executing code: list indices must be integers or slices, not Symbol", "fd3a8ce0dcc3444f8930688e1f3e3f28": "7361", "127fded639fd4c6fb44469d134192317": "3", "c04a36f4cc6f442abdaf80421fc8f4a1": "Error in executing code: Cannot convert symbols to int", "522ce82360b54fe6a46ac2aade5a2d65": "278", "60f68dd3660f41149f59b1b1077e8eab": "5.0", "ff8080814518d524014526a7602d194c": "402", "049185fa80ae464e995a9c430dc0bb92": "72.0", "8fbdc3a01578404aa2073d3abf9aab90": "12", "2819525d2d5e43409410dfdce7c4b28b": "65", "ef7ad9ed05d2492483008b29c6e3f09f": "Error in executing code: multiple generators [t, Mod(t, 5), floor(t/5)]\nNo algorithms are implemented to solve equation -10*t + 40*(Mod(t, 5)) + 120*floor(t/5) + 2805/2", "0c924c75f1ed484dbbe126533479192b": "1056", "a2e65af8c06e47b483deae3ba5c605bc": "40.0", "e905be38afd44c5fbf02d436b5596a64": "466", "6af84a3b21454b3593bed3804ed08520": "750.0 - 0.4*distance", "4be19d19af0f45a781606426565089c1": "None", "197ee8371d064e57bc91648e3a3b9b50": "6.708333333333333", "935fb5cef13b4e1eac379405e1d67f7a": "Error in executing code: Cannot convert complex to int", "0b68251c5ef246a98f84a4d74ffefc7e": "2.0", "f3e177d28ab64709a1a7c9abac4db56c": "30", "ccc98270905b4a27aa0022ae83595265": "170", "8ea52e537b3b4329a390f8e86afd71d5": "-7", "5e7435042af441f79e33b12f24a57d99": "15", "2e5a83499af348679d7a17d4b4ea4b89": "570.0000000000005", "51c56990dab742f7ac1c988a688939ab": "0.250000000000000", "a6f1484dff1c4ccfa4a982a430f524a3": "1", "28deef2d78854bc087c1a8f6e3381e87": "11", "dd376562a45c4b57acc88ba387d150a8": "56", "599b4da4b81a406f8e120bcb7f052ec0": "83", "ff80808147342b7e01473885ea740664": "6.4", "5add9b399e414bcaa23024ff3247d580": "46", "6645d2462ce543f99832ad82f608e9de": "Error in executing code: equal function with more than 1 argument", "2f553440f38940dfa2b76b5166fb0782": "0", "f3bcad100233452bbb07b19848e82596": "50", "2b25af68b929430c8cc2df86792dae23": "85.0", "5ef04c365bc94c32bbbc7dbc70f566fb": "40", "53a298905e124de88687fdba43cd8c17": "Execution time exceeded the limit", "078be4a6d9e54bafb5bad30c60c99b6f": "500", "0765e1a375ac4cdca9ef202cd1042d4a": "462", "4f09025ebb58486ea36e1ac2b343b9ae": "8.099999999999994", "4ecf7c45c64b48e38ab7e98260c92a04": "20", "7a958b64264c4c4db55ed094d013f832": "-90.0000000000000", "2784b930a8b740a187de192a3dffa849": "175", "757986a07b1c45c8ae98c286df75dbf5": "657", "05a2fe4717484247b17ebe37c68a5de4": "40", "91d5aea457e44c899c2b65382b2a2630": "15.333333333333337", "4ac544d5219a4267870c4b739a47321f": "17.999999999999996", "fa7bd4219c094a5bae2fcf1acdc426a5": "12.5", "00f0a38dbe554c6ab04f4b575be9cf39": "3", "15d8ef64dbd34a248b27d60c42b5f83b": "10", "95d05c0dd1bb41ae87ac90b702d42eb0": "423600", "8b52791bb21a42d99e41d527f2319d6a": "1", "fac8aeded5ff42b486d0f155910391c6": "6", "c2a9115d3ae4436688e482b6be8b4cca": "14.564468211527036", "665732deb9174305a63826037346fdf6": "533222", "eac1c16e791f481582827705cf5262b8": "42.25", "3125ba9f0afe4c29a4be5dabe83e7036": "Error in executing code: maximum recursion depth exceeded while calling a Python object", "b20ceeceeedb4996b8fd0506c31cba6c": "Error in executing code: name 'symbols' is not defined", "e8737b0bcc0e43fabe9d3e25226e5e48": "1991010", "4e7c6cc867cc4a3ea594f9218a81d23b": "231", "b053ce2470bd4ee3ad7a760984647f1a": "24", "ad586ab4557e43eb8058f4eb4ab81c78": "10", "d6bab2a73e984bd0a66ee8ff1963157d": "132", "a17694284082435bb0655442626c0107": "334.0", "757d7e7abf6543c3aca9438519c3e04d": "49", "2b3ecabc968f4ca2a62704c4710d3119": "40.0", "13f64bf95e974a12b67e1507872c3e6f": "159", "0cd50b4c45944d2bb43c4456188a9a14": "Error in executing code: \nThe inequality, Eq(-x**2 - floor(1/x) + floor(x**2) + 1/x, 0), cannot\nbe solved using solve_univariate_inequality.", "a4dedf8c64b04ecd92fc7ca78298a1f3": "-2.5", "9d5337f208f847fcbcfe37bcc74b2b2a": "1", "68b18c776b4146fe97f1589b783dd105": "14", "1b6e69ceca294a9aa6cbb79ce3c66a9b": "18", "08354aa121b141cfb28f038bc965f4be": "Error in executing code: Generator expression must be parenthesized (<string>, line 9)", "60a98a3c8f1642e78807665b8ffcd620": "12", "0b0935576f80451289c0b2e00e321654": "392/5", "9a05a1a123934e87b8267d71b950c848": "Error in executing code: list index out of range", "d5dd12d1cb584a3e91756deffeed56b3": "3840.0", "cf53cef1df944ea9b790d528acbec20e": "105", "e704995a5715480fae243d5974012dde": "105", "98a150c820ed44ad9fce8af4ada1f122": "610", "e60ccc674f994ac5a9a897c7345d8675": "1", "9becff5619304610a90671c80b89a993": "142.11180124223603", "62ed3eb942ec41a2bf75b9b25b6e33f4": "7", "44ebed7e9fb54118ad177216ff8ddc29": "1.0", "67c1e7be952f4062bfe1da4f936e6a20": "-83", "35e8f320f20142a5be852407346e984b": "Error in executing code: name 'symbols' is not defined", "f097479b7654434ab84ade7ed0220c0c": "Error in executing code: tuple indices must be integers or slices, not Symbol", "8cdd754bb99c4279a89c2027951895f1": "657", "0cc1c35953474a2a93d8382fd7645583": "2", "dcac80e2e0304f2f86b0e90193ee5928": "88888873", "0e3802f30c5e40808d43d0ec1da683bd": "8.0", "501b11d9609c4e36a51531f8a30b227e": "Error in executing code: cannot determine truth value of Relational", "6bf1e31d03204ee4949d2f86dedd0232": "None", "e7629ccff7674c35a3b08ee6c84033d6": "18", "ffe4b6242e744514bfffce954e06e304": "1200", "e48330416ed7440eaca3f96c443914b2": "356000", "6f25a51f6b8b4554946906859d260693": "3025", "ac8384c7128b4539b2c6fdaa76031207": "15", "3b473e0abedb4fee82922b5fa3e45497": "Execution time exceeded the limit", "473d0fab8ecb4435b958ae1258a48606": "7.5", "4177d02b78cc427283e8e976f22b580f": "7", "04fbaeb0b2f84ce595857882043ba10b": "9", "4bea08869c534e7b884e5a8b89f73bd8": "40.330000000025606", "88ccf458ced04fa9a562f77cdf65e903": "4", "ff80808148880257014888a8dcff05a6": "7.0", "cfcaf7d2103d49cfa9fe0e1cd0783bf8": "336", "4dd643d60dc54bc3b9ef73b9893334a3": "13824.000000000004", "3b303440639947c6ae96d945e1df5dd6": "3", "3ba52fa1f3c241c8a40a228dc8217268": "26", "5fb02775eaea4c559c5024317192423b": "153", "156d0086fce042faaf2f35b9b66494f2": "8.0", "9bf98dfffb664dca9205647e98235e06": "424.0", "78a57bcb32614993a93df02987da28e6": "Error in executing code: min() arg is an empty sequence", "a9a2d74a1305423d91b2eded55309b1e": "2", "a76cc86e4e5b4f71bf1851cf2a34aadc": "None", "a01b7ed2c438443192e9337f649eb8a6": "58.0", "d761abd3fb8643998141beeceb72b199": "17", "6fd899acdd8a46d3b03ef66591dffd88": "8.00000000000000", "95dde40e098a4eb1a6cdbe5477a0913d": "33334445", "25d893932c1b480d8f50de6cfe406c0a": "12345678901234", "2ce765ae9dcf459fb33a0dbd95d47ec2": "26", "f48f34f6561d44009bdc00c4d55ffbcb": "28", "afef06344447456d8d407f685fc985c5": "36", "c04ad4e2c9c048f58fef3fa860814168": "4", "b7332be382ba471cb7ed8c59054b6222": "173316", "ff8080814502fa2401450be8abc61bd3": "10", "4cd43d331e6f465ab16ce36fb5c0d2cb": "80", "af465849651248409d49c4a8aec9793a": "Error in executing code: cannot access local variable 'fast_car_speed' where it is not associated with a value", "ca91c3ed97d040edbe4c57200c3dd897": "8", "35d8971b49fd4cc693afb5314d41d652": "49", "effc2db62d264034a3fff732ce157e7c": "240.0", "ff80808145f521570145f8ddf93802c9": "58", "1462102d11284a6f93cd875b8e0dab77": "240", "5b273080fbfe4a64b5fd7d123cb86277": "560", "b2240c5035b549848c5b24064f8cd8aa": "16", "cb761ed6cb654155a735d38601803b3b": "2222", "248b4f3f79dc45b0ab4e6010fb32c0d1": "21", "d853301f48af46b0b98733bb89de78b7": "41", "7f9ede0065404a12a646ab02dd1a3761": "12", "88892d877c4843cab158c0ba5c63b75d": "119", "6ad742a75588443bbe0b9a124ca9c1ee": "49", "0fd2737ec3f1421daea82ba6bda5b8bd": "Error in executing code: name 'k' is not defined", "eb8073b56af044c1aaa52ac5fe160bba": "8", "17f37ce4dc3e4ae593f73897b5cc8c5b": "1102", "fab2de203184488d8253863c64ad5a65": "755161", "e75eb97bf4c84c0693278b5f7fd39672": "100.0", "6d09a7f00b6b4b9891e2b20d89ae10f2": "15", "fdf6f587620b4c0085be602bd204931c": "981189", "c1b6ff395ebe496f980c376d9de6d739": "70.2", "b7cc673c4a6641e689f6ee6d2955b50c": "37", "da16fce6b03540e1ab3e514e60a727ad": "93", "bd2d24e3e5004e96a7eb620d81dce9a5": "690.000000000000", "5dd9926fd8d2448a807f5d6e1d6b467f": "35", "097a9cfe2cfc481aa0caac7018e6636b": "142", "ff80808147c465b80147c687def20387": "5247.54098360656", "222c802d9cfe400ba57621f18eb0c17b": "20.5", "278658e0ee894c9fbdf9c4f488fc1d48": "8434", "f5ad04f4ab094052aa454fad0ab84564": "29", "fa620202899d49fea3a8a61a473a8dd1": "1.0", "28461ef43c4e48bc86b6840207fd8c29": "36", "ba9f4ecb915d4f25bf121d388e649069": "165", "58bc3ba106a8458b8c70c151c3652ebf": "20/3 - 8*bronze/15", "22b0a11b37ac4272a167f94d7ab55a18": "15", "ea648d497acd49e081a13b465ed605bd": "2.0", "cd73de26f7114a6cb77471aaf2426dbe": "312", "41a07278aefa44489c3aac0fb4eff59b": "88", "865c7f37c16f4cceba85c76df95cb95a": "52", "4025023462e44d4d948d5aa24654ca23": "1", "06a88dd6fe1b44019d2cc038afbc741b": "50.0", "91e1008bb9844e139d02a32a01b8ae5a": "360", "b91643af163c472ca9f9caedc44b55a6": "74.4", "9d72e9b5b5654fc49cf65991bd6bfc04": "163", "0fa2144545b1417f8ea7e48f62664666": "(-oo, oo)", "580413be705e41e68ce1f586156d9838": "18.75", "063efffd55114fbc8d61d700f4d54693": "13.0158730158730", "1669e1c15cd3409d9b0a472da5f120c7": "2012", "6068b709e52c49b9856495ef27ea3ad2": "720.0", "a9d818241a3640209b3bbb02df36a8ac": "123454321", "5d5e7d4de95d40798b61d66fd8294262": "0.33999999999999997", "30bf430bd7eb403db5e10a8f3bbba0cd": "2", "855caf4abff443c6ad1d1d75331c3a43": "Error in executing code: list indices must be integers or slices, not Symbol", "6afe77353fd14825a106081c45de64b6": "50", "f37bb4fd59154a5da33063757ea7a15d": "16", "f728ce240af542808865800d0a547f01": "8.0", "ecb0aad4f73540a59b624cf6e2a4479d": "25", "d1ace3b9675c4c04a5c49d8501129f01": "27", "37883eef5deb4fc68d3b837fade2f857": "53.25", "b85a7a5900dd4969a21e2af63f5e5409": "52", "5979c45ef7184e63b8e3509b9af87eb7": "30.0", "c431c188c0614cd2be7c5f8f34a45df1": "-1.4285714285693878", "c82676658a9c4ff090c6079077b90394": "62", "8f46ac6cfeb241d6851d9cca91411a54": "10.0", "41a5e5fabe984996b2cdf40da62cdc8c": "32", "407d0f1bd76a400886677bd447f36987": "10", "ba03783cf91e415d8d41a18c74baf421": "Error in executing code: can only solve for one symbol at a time", "f22cbc9836204ba1968d485b90af50db": "7", "806f5762bb364c95a53de56cacb8282c": "20.0", "2672f95a35b24f7cb4fc5b5a5f284db7": "173", "61073fca4497493486451dc6f44a3084": "20", "845fdbd6668b4de2a00d27d7406ad070": "3", "761370e51cae44989a04edc49b52eca7": "910.0000000000001", "f43db24a1dc047e7a3bc615c55e4b119": "Execution time exceeded the limit", "306e1fc33bb44aeaabbb0ea864469367": "Error in executing code: cannot determine truth value of Relational", "63b15af9aea74a78b9e7e8afa67d4165": "90.0", "da1a533e6ab3449488525aa876364e19": "800", "922fe8e487cf42e9b741265704c3afde": "1200", "ff8080814623402701462cc71b150c64": "15", "7a5c5908ce3d422b9a5a408858682903": "114", "be789109c1f249ceb6a22944300da47a": "12", "86fad609a9964856b91ac58b1388b28b": "64.0000000000000", "0a270ece5e55461fa8657c610ad650e2": "34", "4f60278827a949cc9561b040b758a7f7": "132.625", "eb1ea2dab83b44b0b1d33a72b7176662": "27.0000000000000", "b03351862d3041f596df099a4217423b": "22", "17514fcd7c664e7ea2671d8311608e02": "145", "9cf75fec7159495583e0634f0b7f560f": "3.000000000000001", "3354327d28fd4481a8e5660be1dc14b4": "4", "eb6044fa5cf14b9c817a97ee3b0c4589": "10", "f7399a3f91ca4ee5affaf7f6fcd68c6f": "577", "8d9ab9f54ed3402cbe9a78ccb20bad85": "11110", "30fba4c0bd7e41fd8b2e4f9b526c36d3": "228.000000000000", "ba5a285fee34469197377eeea39d1104": "265870/2187", "e1ae67ce595048189f95b3486ba4c470": "23", "5d801123896041bcabcaaee33e792e05": "25", "83c1ca6973604e4fbab71126f03ae4df": "4.0", "1d6f9a17ea8f4227af53032db2af6109": "199", "b62ef2c0381448008fd340e917d37e20": "136.0", "ff80808149608948014969f1e54b0f86": "-8.00000000000000", "6122396f10c8434da24f4af99509d43e": "Error in executing code: list index out of range", "7cea5718199845e9a4af83c9852d419c": "9.0", "ef6f6aef1ea24462a7fc2d22e5edec04": "42", "162103ebf7674cc4ac048fd3da1cde5d": "1007", "0c2f7023e7e846018e778872c51d7f5e": "72", "a59a353eb15d41b8adbcf0cc54b4494b": "20", "749e58aa0a414b77a755d6bf6ff31219": "-5000 - 500*sqrt(280/3 - 304/sqrt(140/3 + 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) - 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3) - 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3))) + 500*sqrt(140/3 + 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 3000*(1000 - 250*sqrt(280/3 - 304/sqrt(140/3 + 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) - 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3) - 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3))) + 250*sqrt(140/3 + 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3)))/(-1000 - 250*sqrt(280/3 - 304/sqrt(140/3 + 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) - 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3) - 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3))) + 250*sqrt(140/3 + 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3))) + 5000*(4000 - 250*sqrt(140/3 + 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 250*sqrt(280/3 - 304/sqrt(140/3 + 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) - 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3) - 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3))))/(1000 - 250*sqrt(280/3 - 304/sqrt(140/3 + 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) - 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3) - 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3))) + 250*sqrt(140/3 + 1058/(9*(-76967/27 + 40*sqrt(44567)/3)**(1/3)) + 2*(-76967/27 + 40*sqrt(44567)/3)**(1/3)))", "f87c5bc809794690a556aa94562a3bc9": "679", "05de5fa272834c0d91b4a9e60d3b9068": "73", "9faaf45bfd0240b48162ee6c7e4942e8": "1338", "868efd99d4e3478e93f06f23d74c9afb": "401", "ff808081451d64f90145254d774109a6": "('W', 0)", "1e0d15107ce443a9b889f1612046b94c": "250", "d40d556753b9489baa1e5eba23b1ccbb": "630", "a0f4279ff05246088d8fe0b8d3ebdc4f": "8", "03f1ba7748bf40e8a37a4accafd0fa0f": "237", "647d429dea48484ab56fe208179d9577": "0.0", "7ff01063dddd4818bbfe69de534b08cc": "204680", "179c8e71f9814880aad7bb8a746be433": "30", "f6382e31327a4e6f99a544b6e5a561c9": "44", "eb43485324f14684a571d824db30d6f3": "202", "878a08e268b04abb888341dd6bb897c5": "10.0", "af171750e28e4e9e8a4f1e1c9c248fdc": "63", "8827eea64d3e418aab8562fbf154138b": "5.00000000000000", "03a4a5465ba6472e8ac49cd49d70e473": "6", "37d1313ad1ec432e850fec635605329a": "Error in executing code: can only solve for one symbol at a time", "fa35f06f3d3847a180ef4dae87cb15d5": "2", "a4d5f6e37cd14c17a29e1832457e6fb1": "12", "dc79caf7e9614ff2a5c0a1e2f561faa5": "46620", "4ccddc933a3b4ec18d89830ca9558b9a": "2021", "65bc27d49eb14ec19931084da999a3c6": "7018", "3f594b09e59d465ab7cb0a041b7d54b1": "522", "6aa9d7957db04579a12d852e7ef93075": "174.54545454545453", "6b5ee468ec10449a94c07dfba659b46c": "3000.00000000000", "15cfc1c7c52441618cca374ecc508af2": "0", "97d330cd192f4c6d9af3288ef4d7a3c6": "None", "95349a64ae004854b958b3c5e9d95b8b": "97", "df948aea8f014d15ba0df0e107196d06": "3", "ae8465e9bed04671a2b9e448cb32d1e2": "1.4", "538ffc3e1a4e45d1974819722a8aaf16": "24", "ab2688f53e614c2da3d1857e6d8503b2": "144", "303cd12c6fb14b82bf3abcaf6b65f3a2": "(206, 104)", "ac8d7ec4137c4e01b944d846716b8bf4": "30.0", "4c7320ee73ad4272811abe19a0cfd007": "None", "eed778fd24cc4b4e9808d944640d80b3": "138", "4ac5d8526e8d4bc2b8372452471ffb28": "60.0000000000000", "956a30c59d2740648044694e76fcd49d": "22", "898516e9372344548512abce5456d52b": "15", "3b1d33154a734822967933dcbd38ff46": "520", "0c7de258693a4f748f05fbd0118b5a60": "Execution time exceeded the limit", "21fcf247d4d3423e8ca0481381c9a627": "10", "cea5a38033ae4fa58c3f43cdb54ab7b9": "91", "6192b5296f004156a1b3f6571ae4b60f": "168", "997988bdf96e4a228ad71a33f5f5da8e": "30", "76011a8fd0234619b5da66820ae92753": "4", "95abfe5b8046406fbd4106ce8834040a": "9.0", "689bccda58a44f4a891ac26ec4260286": "32.5", "ba34260cb5c24f71a6f204db941e6183": "81.0", "96d88bbc668845c797ae7028ebfeccf2": "320.0", "5c04a70f8a2d464e9cb7bd6013ab268f": "136", "823865ab4e9841a7b1bbdc720564cd1a": "153.84615384615384", "ff8080814502fa2401450bc8ed761655": "124.7", "952758abc13b41f3853980b74ca1dec1": "30", "77df5e446abe43c6a35ef1aa40128626": "1724.9999999999998", "28de6516e9814cc985e3ad6f8655d9f2": "21", "80493517a7934d818587f0edeabc2492": "Execution time exceeded the limit", "1d21cffdc8244e25a9c450f2ec776ab0": "15625", "fd17181f75a24e0fa90acae977270a3a": "70950", "db76b98e224c4fe390911572c27b39fb": "2", "9b13a1da7120473488ebedb2039b571f": "1", "a7d8837f92104b0297c7e421cf9f9723": "180", "5e9dcae680b64b1b8702e14031deb138": "252", "1683b913438c4a81b7e264a2ce1ff297": "222", "8aac50a74e724b3f014e76e2f51e19b9": "251.0", "5169ec31415f4fdbb5a60a6af41c083d": "28/15", "0f24f039e2484940ae94a481bb02ea9d": "3465", "139c6772efd54fbb96c1c2a7894dee0b": "30", "aabebd9aa46b4732b6c8edf6bc99a565": "1080", "9c324504d99649ae8673edce574e7f01": "180", "9b1aba6d6fac4ef69778a4f72f2329f0": "866", "db92895e4064461983dde0562ecaf7f2": "300", "7e2ed2aaeae442fc812b247e086e148e": "475/3", "e4a7400da0da46a88f555c5339da28d6": "10", "f07c0a1135354989a037606513a6fbf9": "288", "83dbe4ed56ac4673a870809a6b4759c5": "60", "e06ab07cbe7e43da8d7d86ebe1cb561f": "561", "ff808081488801c601488c224aad0dba": "16.0", "ff80808148880257014888abebe50783": "26", "1e3413fd239541d197d62369fa8297ad": "1041", "d828f96355f94013b8b9c363ab6e49da": "12.0", "f243e1ed4c3846b28e80e723590d6d2c": "66", "9fd2038c659b417289d580b86df92542": "3", "1d35b96dd5e24f91bbdb76f35ffdd79f": "Error in executing code: list index out of range", "4151858f065a4994a3baf4bd6ba3e5ce": "84.21052631578948", "296753153f754933946f714b2ee29d82": "124.0", "b792b3a27f9f4de2a81fb9b25fd223fa": "Error in executing code: name 'symbols' is not defined", "67d44473ae1548279dfdf2bbf8fe21d5": "19", "dcfa6591af7943109c3e437184d319b2": "25.0", "99a0e463ccbc4709a21ec0b3d99e1179": "168", "4db075013f9949aeaa78a8cb0e54919c": "-120.0", "b7bb0d3c55c64af4aaed616688563ebd": "21", "2a9e9004a4844a298b011c3cd8bb2834": "Error in executing code: solving Abs(2*x - 5) when the argument is not real or imaginary.", "d8d8ddae7ec04006b420b3b0674e8dfe": "372.000000000000", "02a46ef89ee54a189f41143a67640405": "26.9999999998661", "f4cebd17646741eea1c709b945f25963": "1275", "cea946a42d684d899f995f3efb3a3b5d": "76.2000000000000", "b2a003e522c44e03a9f21b43be56a4ab": "Error in executing code: list indices must be integers or slices, not Symbol", "67bce58df5ed4e02ab60d6a982d24bca": "25", "67a66e57adbb4b9e961e2d36d6bd5383": "168", "ff808081488801c601488c2653ac0eed": "107", "ca8a3e698a89424c8c77e0aea62347c0": "36", "ea306b4e9bcc45edab7b754f421f6f27": "9", "fb7cc7e78fdc42ecb83a2603eb7dee50": "65", "d49459dc971f4f4cab6586a8b6db9e90": "34", "4c4431ece3784bec935f8f2e6f017dbf": "300", "126f45daa6934b9384b545cc4c13d668": "224.400000000000", "1828749267c8479d8102253c87b60ec1": "167", "d51695bad97343e4a96d3cb377409daa": "72", "2ceeadbed9824812a4235e26d6923f04": "3", "d0d79e0a3a0e49df89b082e2c4544f3a": "13", "fd03d2e0477145e99f13f90150b381a6": "2142.0", "18b795fb5fdf491db5438efb31a2e02a": "45.0", "5ecbc42ca824406c86f2abcfafa2bb5d": "432", "74697728d2a7412aa3b49af0828afdca": "200", "135e56e08b1e4ee49df28abc36e632a6": "12100", "ce4514fd81704586bdea9d07f693d6cf": "-1265227/7207200", "28e2a02e15414bd2945342703724f94b": "62", "ce8c1afce5104b7eb2c4202cdd915cd6": "8", "0e175ec536414c6f9fbd3b31ba4becf6": "337.5", "8cecddae87c64947bd0ede9f6895cec1": "3", "25dcab065b4f49a48f416b900f790611": "65", "20a0f131391b42a4acd37d505f7cf983": "92", "7e558598adfb4af189fc7d88eaaca0bd": "50", "9757b61bcc71491dad759f0936d622cf": "0", "b3a6a85432a14e5881e0ee03240b4192": "38", "c70f44a98fb249e29807f2d182442ff8": "24.0", "765e4ef6e41d4b5bafd1240c615a8d56": "21120", "e43fca3ef8c84dbca045de79cdada3d1": "Execution time exceeded the limit", "ff8080814559f57d01455f1c1f2c0460": "18000.0000000000", "1fa89b9ef1024d60a8e9cdb359511f5f": "132", "6f555992a99346de95513f7b7d024327": "-11.25", "a963022f9d6640cdba5875b9cee2763d": "13", "b42678cef55e4998ba40c7efe9787f92": "1049", "8d4c5331efdc4a5cbd76409ddfd7490c": "8989", "df628974fabe455d92ca7d33495deb13": "37", "8bc96ac2284343449fa14d46171b23b0": "1740.0", "7498865c1beb4bbfa2c7617eb8205c47": "8.333333333333334", "80e75f71c60c448d9c2e0ce5df3fa1b6": "5", "c008a600476b4a03a1a38a62a30f3c75": "20.571428571428573", "b1a3ca38bc694fafb61f12f545c13ae9": "46", "a1d24ac05297464f970d7c515cbde12e": "Error in executing code: list index out of range", "244509077a8a4d0b90e66cf824cfd888": "1", "d6d150c0dc444e458c49a6542fb7aa46": "51.5000000000000", "0c8b0b97da9e41f48865d48080fec158": "e", "dac6b22dda5843c080549beb3f1ae902": "2", "fc84d06850024e998f56a989e89f5a7d": "30", "956105747e0e4106b3e3ac8af07a5b56": "Error in executing code: unsupported operand type(s) for /: 'int' and 'str'", "2907024210a648e6b571621013b5baa6": "0", "a3b3139350004856abb8917c32c1a5d6": "10", "137c6c26e7db40aea1ed0b523c8ff1ef": "51", "2b0e7c78510a4b94931d0ffe14349f0b": "Error in executing code: list indices must be integers or slices, not Symbol", "fdc2a7fb50b944b586b39367dd17eb61": "15", "27cd149e7c1b436ea933c17b292fcf5d": "67.20000000000002", "945a10b4f1aa4a09abfdd365c8ea66f4": "34", "10b747e589a44be4883ae6d2158bc9ec": "428.0", "f7b35c4d81ba4efc8615b273097c48aa": "120", "bb19081ccd254f979bed6708c41c74b3": "750", "f26d53207b8c47ffa27f33949ea625c0": "0", "2641257866544e9bbd5672f56fb8c324": "Execution time exceeded the limit", "7cf13fd74db54562b32de72041d2d475": "4.4799999999999995", "1aabea1817ce472895c3baff0ca010e0": "1110.00000000000", "40cff0f049c74e579b4dbd8a62b8d6bb": "[14]", "0a2639ab1cbb49c49187651b9a18b633": "0", "7861068dba8f4f5e9e85881b25061870": "16", "344b93d6e75f426db0ead953bf185e6c": "4", "ff808081488801c601488c2194520d43": "100.0", "72ac7e5d4b6b464683d3824b144e5207": "-40.0", "18720b18df264299a20fc316e28d1568": "12", "f49e1c5cdfb24ac186fc4d3de4c42d0c": "72", "3df1c9b338094c75876bfe0c13531715": "99.25", "8a017cdb37624d648fa7fdbecb4754a8": "-50.0000000000000", "fcfc63554c404a3e88e0bd22f80209ce": "16", "b7baf69b78824a4595fce4a0170c6361": "22.0", "a7166edd0cbd4d1cbd67583853dbd25f": "10", "3b4d6876dace4203b95ab0d5efc21388": "1.0*c**2/((1.01210887052698e-6*a**2*b**2 - c**4)**0.5*(0.00100603621730382*b*c*(b/c - 994.0*c/b)/(-1.01210887052698e-6*b**4 + 0.00201308454347817*b**2*c**2 - c**4)**0.5 + 0.000503018108651912*(a**2 - b**2 + c**2)/(1.01210887052698e-6*a**2*b**2 - c**4)**0.5))", "2eb87d5bddb24616a3cb8475583dac64": "60", "7897c46934f447ae880e909faeba420a": "3", "994c24c4d2b54efc8b919e68d4deb2d0": "36.0000000000000", "9fc328468a0c47d181b355196fc591ee": "{0, 1}", "f48148ee3555444b8d47fe7dce26ca35": "144.0", "6c7c89d994a44293ad37e97ebddb4f74": "5.4", "982498b5865548b79d6deeedf2bcd154": "18", "370243ae3391425ba8a2c9941f08b499": "None", "5e746cf717724ba18b7428eaee078527": "534", "b4152ce14f7a485294b92c4d38295cb6": "720.0", "a2623fdc8fe54d4ca5a8ab8e39166a94": "22", "29cf919b5d2a465798389565d8429d71": "39.0", "86416f696f954f9191744dae7e1a5141": "223", "576da853a65e4cb5b0bedaadf635dfa2": "757", "f9c047fc4b4b4a2a9e3e46929e42d32d": "-12.0000000000000", "53c1ab42495e4623a70807241d7e2822": "13", "ebb08b9bc4a444fb812d71ff63014fbc": "320", "43c2706f84c94e84b8e84d7b43c78cae": "140.000000000000", "9ee9c8007bfa4014bc2745a4b2f56dff": "2", "eeca66c5f14e415bbc1cc117e01ee1d7": "Error in executing code: not enough values to unpack (expected 9, got 8)", "2c33b9144d074a0388833f3afcf4b1a2": "None", "22ed295754af41a6b9797d24f249c995": "450.000000000000", "a924cd17de3b483f89ff829a592afae4": "30", "439d5753997f4b8fade2d816c2dd0615": "12.0", "2722a9e660244e548513d3e5df58a114": "2296", "a63f725de1ea44868336b00827ec566b": "0", "8e600c2014c244d69cfbe07536796152": "Error in executing code: complex() first argument must be a string or a number, not 'tuple'", "57f95d0d82784f7fb9d68ad169046b82": "604", "05d2355b433f46c398bd6cbc320018a9": "(3, 0)", "f1fa36da643441f98c040e642bd74d96": "83", "4d8ce6599ad54db1add82556075f5dbf": "7", "5350c2353d1a481181a04cc25cf633c6": "43", "276f7b787c6147edb6325d620af9114a": "25", "ac8c9fe6e8094a3e8fa8ceb032da8391": "7.00000000000000", "a8b0594a405a43e889748173bf1dbeea": "None", "a1e316c0206a4fae8b0fbc7ab6e86cf4": "1", "dc527cbab19a418a905d2b0ca58b7c28": "0.5669999999999997", "d1e67f8f89e14c389f9be351f859ac41": "23.0", "ff80808145cc51010145da45a2b80dbb": "1120", "50dec226a1234986a9272d41c76eb32f": "0", "2407faa4b627492b8cee9077edcf3e03": "10", "dd17b16de0ed42eaa0c5b9335f5e16b2": "0", "79f8cfe80af34871b7bbc94a621376c6": "Execution time exceeded the limit", "d038e24471e5411cbbc856fa488364d2": "7", "9ae637ac52c844aeb47c96d8171004ad": "8.333333333333334", "fe9aadba9ae54775b988c7c62e5a0d01": "3900", "dfd1ef0e733a478ebf87071acb8f314c": "30", "cf715490fdb54722ad03e4a0b0923bdf": "29", "7f26e8339b11415aaa95f66b02aca759": "49", "44675ada2f1e4032aa15e17265836b7f": "1006", "1934f5ee850e48659099166094ad3207": "1200", "b6904c2e7f92486ebb0f2aefa81b2f8b": "34.0", "9ee6acf1851f433e978243e78cfde6c0": "Error in executing code: No module named 'scipy'", "01807e4d693543c9a262b702c53cdd2f": "-48", "62a8fb5c3fa04f3d8cb29ee7dc8847c2": "8.0", "c75944fd5ecb4125a58acf84de4d50f4": "50", "6af918a67d254953b804afa77ef7a718": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "a004ed3818474701bb580ce3084effe5": "0.5669999999999997", "ce53f933558a40f0a4237100aeb22781": "45360", "bcaebe373c64489eb32dc27c05b93115": "53", "ff808081477bd88b0147af0875ff61f0": "7", "b56c76f24a1549a3b12575392c356b92": "141.0", "753e918b9e9944f49db681403fdf513f": "1200.0000000000007", "af91e271c1b54a26905eaa65eb03d4a4": "2.85", "b573a749743d4a17a873e95c8d41a212": "135", "2715b58c67514fcea4f05851f42b0c21": "Execution time exceeded the limit", "9bb5f9edf600423e9a6f245f74899c5a": "300", "ff808081481c1eb501481ef70f6b00dc": "0.127895", "b162368ec56f4adf877e39c99111bbeb": "523", "eea93f7c57bc47c289c1137224593865": "Error in executing code: object of type 'Complement' has no len()", "865a6513801f4dd0905633582a7af9d1": "4.0", "ff80808148880257014888cce5640f69": "None", "538dd5edc0634581810b9b06135dd05b": "3538", "34e45d5f4c124475816355e7af8052a3": "1", "84a1d7246d964d84862340ca3c81542c": "380", "2ab531141d1b4c2da85c5b390428d186": "inf", "1853bc9b48b946b6ad7edcb58914ed27": "16777215", "09f041cd281e4cc4909fbb922764fd3b": "728", "b3d30b33f5e8496aaf4f0ca4a632dac5": "333", "c846b94bb39f40dfbeb0918d51edcafe": "1024", "9075fbd551514606aa5fb09011682c22": "1440", "37779204f98847ce843318d0c152854a": "1200", "829efe5269d94c8da92e208c64c98d10": "54", "3be46fbf920f4ecca8510035b88a07e5": "-3600 + 100*(10*vb - sqrt(676*vb**2 - 156*vb + 441) + 21)/(vb - 1)", "ff80808147e705d80147f0f405711529": "10.142857142857142", "8119ea724e1140b98f70d0e025d8d6bf": "195.0", "ff808081488801c601488c21797b0d24": "7", "646ae6080ca841b687129916261fca37": "19.0", "cbf2152a1e7841c081065f969ae6ef79": "0", "a39cc0c968aa4e59b8e91de490b339ff": "2016.0", "f77c7a73320747d0aaa4d6e78ba1a81a": "15", "f2b81b67ba9e45ff8fe85b163ba7d45d": "35", "7c2a8080964d4e709dde2c09b86d2db5": "1826825", "2be723edabf349c09fcdb82eecd9b540": "12", "ff8080814830aa3e01483f855cf01a2b": "3.5", "939fb815d8294c06a755cb98e74cdef5": "2013", "eee2e45b97844306b6f4d2c9aff3700b": "None", "7efb9e9f6e004b55a532e94968d43470": "199", "fc19f4ef13d146f4b4e0a2593f1b7abd": "3003", "3436b24b5b4440ac805b1802c3c18fb6": "0", "82f479d927214958a8111383ab0c69d7": "50", "1abe474ed9764aaf9c14a42b722e40d5": "-5050", "1db88486902947858fe3f02f5ca5c12d": "-s/14400 - 1/3", "fe8f7114d16840c1b65042707f27eebd": "8", "9239439b0e6c40409de0d591c4ce6297": "28", "346ef5bb560747569528f005889adaf7": "89", "5d67cb37bdac4b238737a850ebe3f942": "6705", "9a917b1006654fe3ab53d83b8e36dff2": "50", "8dc4f0c0d198429b842d17846b5b33c9": "Error in executing code: cannot unpack non-iterable Symbol object", "f2491ba56abd4f6cb93664500042b713": "2", "9824212cb4544ad2a46fe0282b5483e9": "2016", "16d891224c064064ace61bc0fb71f98e": "1", "952dd2a9557d488784d83e38534f1b73": "Execution time exceeded the limit", "0d4a8f1cc5ca4812bf7c02f479ec9526": "1008000", "57b53309b4cc460c9e799f989b5a29bf": "960", "01e8887d28694e75b0fcd2cb6152e5de": "39", "0c9655dbf9494b48838a5a90e11f6409": "330", "164c1f5b1ae8468495a526a20c30a40c": "2250.0", "dfb9d3f0c6524626aed1594fe62e7675": "16.0", "68c305ef6f7b4d2481d819c4fa1f23a9": "4", "2d83d1c9be4f4b58b144862b2faef393": "651.0000000000001", "32c3a0d302f34e3c8afc1385e5c35c20": "1998", "e30bbd9b7e7a4b8398d972fe56f0971f": "1998", "1c294d8470144783a787c04dd5060760": "9", "e5830a2f02f84b1597b8b06cc777e360": "28.0000000000000", "29b8f3e4b0d64a42b0b43e7b7787d013": "6", "16b77dc77b6e42638a9888ba6819d4b6": "1", "1245db5230f544b8b3af124e4d224b07": "480", "aceb0a8776ee48ff97e454986e10bcb3": "Execution time exceeded the limit", "16bf3f40bb90458d8377ad2aec9c3137": "45.0", "afeec19db5ca40aaa4a3b39e5443e10c": "Error in executing code: list index out of range", "28b76f4544fb421aa413e4bcca826565": "Error in executing code: 'StrictGreaterThan' object is not subscriptable", "28c0584c2830499eb5c6c904fca0db80": "9000.0", "1ba6d0ad5de44fddb5abe76b3c15c324": "10", "9e6026043ed14313850195c7abe3baba": "10", "c3e4bff4be154d678ad18e78f1c1e6c2": "23", "42ae91f98add454284b4228485001c57": "Error in executing code: list index out of range", "ea01d9ae39ec4c618a8570d44e58ee13": "4", "0bc96d6d8b314da58cd975c231c2e5e3": "16", "2136e5b722df4c309cf00dd2955d8bb7": "('Person A', 'March 14, 2014')", "01f279c8c69e486a87296280e942dd05": "150", "ad64ca90edd84eedbeea112d06dba1d3": "89", "a4d02a7aaa844b7f99aeea35fc07e58b": "53", "00c1d372ec7a422081e22cee4dbb487f": "22", "8d394de09d9b4fda95af9869abeeab9d": "100.000000000000", "ee6d076bdd124aba8c7a368eeda45daa": "333000", "91cf19492b654cc3818cc5c0fad28ce4": "36", "2f80fd2741234ea6818a996d4d7c7867": "18", "fcfd6e973eb44abdad1ab492cc435abf": "3", "6018d7fa939046c09a313d0606d5e419": "100", "d89a8eb8e82246e7af32b24fa0876dd9": "2186", "2c0401b091cc4d2ea4701e66c0abcc20": "2550", "8e9640af33dd48ca902d2927bafcd391": "Error in executing code: list indices must be integers or slices, not Symbol", "783de88ce5154312b294c09abe7b3013": "40", "41c7dc579e3e4e42ac629af006d96e6f": "10", "5b92a52a3d7447769f53ec0ff041c740": "21", "5a0eff0f563441d4a1f15d91890cfc9f": "30.5", "0cfd5885f8434434a4ee2f44b9840438": "220", "8a0540415b1d4bdc919d941a431fb1a3": "1175", "0d9dfdbb1d204246bd6c35bb3966e9f4": "462", "b7c47dc1f702464ebe0782afb304b262": "5200", "ae0fb6b9df1f429eaa4e7a3b92474733": "55", "a1ab0b64576a4f36972ce892195d2564": "5.0", "363f5a8018814bfeb1e1309a5d26645b": "0", "f9768ffd9a4c4199b896c0663d7bcc3c": "7.0", "eea06aab559a418e9526bbe6173ab8ae": "456.000000000000", "700d2f2171464028a374413fff6b3d0a": "Execution time exceeded the limit", "1ed83d124b9f4124a6caee35121d5fd1": "22.0", "babb511794d04b3fbd500b95a3dd9669": "9", "3cea67505f2a44f98beba448137b82c3": "Error in executing code: list index out of range", "0b9fef8e2c2247aebfa2db280acf4368": "0.300000000000000", "ff80808145933e8e0145983fde44089e": "6", "588621ef3c824f1f84af9a9c909ffe84": "15", "90c89f7a64dc40118ee3f22957d5cd85": "44.0000000000000", "403091397e0947399a1639baa1c439c1": "1009", "78bfe94045574180b91b7c4aa8a1bc88": "18.0", "48ace7fc92fa48a792f9f545ed5f5ad1": "30", "9a5b0d6c95064bd29bebac3c8c054113": "0.26", "d31f9268afdc494292566c351ed060af": "720.000000000000", "83dd58e752614c659e086abaa616af25": "12", "f26e87d5ad4e453e9a29a3903bbfc44a": "160", "0be07186c316467bbfeaf30422c79d99": "3.0", "ef0be1f72c7c4c4bb26f688841083bd2": "24", "daca1ae7eaf44fea8c80f745c9938f05": "63.75", "037fefa41e2e44fb83ea809e2cbd9089": "420.1", "dcefd5696b02453b8c9bf758aaab25e9": "5", "9d7b40c78fc741938942416789c304a2": "Error in executing code: \nNo algorithms are implemented to solve equation floor(7*floor(13*x/10)/10) - 21", "ff8080814694a7d30146b83117f33c1e": "3480", "28275eca671048a28c8ec1f21f27c9b3": "Error in executing code: 'NoneType' object has no attribute 'strftime'", "d2b12ada559e442088f0405b3ef534b2": "77", "f0db8c7da8fc4293bc5c06620ee25842": "Error in executing code: invalid character 'ï¼Œ' (U+FF0C) (<string>, line 1)", "9b0edc043e244a74b7a6fd6928972649": "292", "6259a342696a4c21a1c5d0b364643774": "5.999999999999998", "faa1005e50a84843b390c8620a5dba70": "2519", "dd75cef0ca894b1a8acf51f2e24ccf84": "439/13", "547b94a6f3074478967d27d9d47874de": "1", "7e3b19d932704ffc954328fc44f620ef": "523", "a01a644bde3a4c95bda7a02594816685": "10", "ff8080814518d524014526a65a261929": "4", "be59849749ba40919f053a8ae0212aa1": "3121", "ba6dcff89fc149ad80a4e69361a16f38": "11", "a4aadb8bbb224eeeabe2ce8da3891927": "1352078", "dbe9e1a170e9479491f2ec65c7162f9d": "17", "ff80808146233fe1014627551a2a041b": "315.0", "defb3fb5bc924dc2aa4dab2720020daa": "-24", "c923b8185bf844b4ae5c9cf8f3b273c7": "3552000", "1ccf372624a342edaafcda483342eb70": "33480", "ad85e55112e646e9866c627abf3d2474": "5400.0", "f925e895956a490b8acd0ad7c2aff1ed": "7", "d1399400d0444713a2b31ee3fa64842e": "60", "d2bd57af4c7b4324adaccf2f1ffa4ea8": "None", "c602dc08b4c447c1b726225f431fa817": "7", "ff80808145cc51010145da4377910d9c": "25.0", "2fc4a3228c96410fa564d33075c70587": "48", "ff808081488801c601488c2701210f0c": "Error in executing code: No module named 'scipy'", "d44d42e04b1d4c789769eb0934fe37ee": "0.125", "ff80808146cd510f0146db3a20290c7b": "16.3750000000000", "0f39271fe23a4d48bc464903c4a49771": "2004", "6909107262424874bd1a9f4919561e78": "21", "527572bba71d494982a7b15f8acb58b8": "48", "1888c72d43f54544b06b2e9cfb0c1ae7": "323", "cdd5cd58220e4fa49f1219c1c9d0437a": "Error in executing code: tuple indices must be integers or slices, not Symbol", "72ed55883f7b49ca9da9bb5115a87043": "30", "f1ac21fac0be42f58441215a34867cb4": "0", "a131e7403ac2456b9cfa7b7fef31f534": "1", "8a66934946e64fb19faeedc01a09cd40": "2500", "30a2fb65b3c04fc08eac376cb394fd20": "63", "b19db507aac04da0984ed0b909c944d2": "6", "9158b15e242046bab1a8519b3ab1f537": "0", "798d2dc5db6040219db96111910ef960": "30", "4e95779fa24345f189f252e60032a3a6": "6", "98df1185f46a4f3584abffb279a8c4aa": "22.0", "3127262b976149619c8d69eb4973414f": "Error in executing code: name 'symbols' is not defined", "a77f2d32d62042b8b63009d2787e0774": "None", "cd78ecfa66584a7ab3d0f528c875a850": "1", "8963091c6ac3413d8cfaec3e653a5bbe": "10.0", "faac0b19c78f461cb5ae97875529c2da": "Error in executing code: name 'symbols' is not defined", "948e221219dd4ba3b13bef3d143471ba": "10", "d0426988a41440c88b47954c7ee34703": "2857", "393ff9681e304f54935cfbb4d7efbc52": "None", "8db6c470d9844dba855dd67d821adb80": "67895", "ff8080814623402701462cc8287b0cdb": "1941", "a3c3d557c7a94e6295dd741fd19f3fe0": "158", "7951983e00f14f80841f37e3cb1b1d83": "-142", "b2f39830fb9142b48796afb696fba84a": "0.5", "398ede46c62c4a66835693ad728db807": "4.311779448621554", "ff8080814694a4fc0146af653732270e": "21", "792d7c9950a84dca922f17b146eeae0b": "9.000000000000002", "d1936afac1674d20af1d1a74d1296a88": "274", "9333a5345fe347bd822a3e9e62001ef8": "3600.0000000000014", "4e3c390c7a294916abed0ef47bcae2a9": "36", "16eaa2e1fa6048cea2cd657506c10cb9": "2500.0", "a91049fe55eb4a6e9eef9aa7d986e5a1": "29", "e5e059c2e2024164bc5585df88eb0df1": "50.0", "faf1880259634a9db9c99250b62e6c33": "19", "df0d4a589aa240b790b99ef34f66c27b": "26467", "61f6b970b1a74a269e847e07b6391d68": "24", "bfb1928f63ca4e1d8b446cf8a8a03c44": "869", "91e3eb7061aa4c56ab5304cff405685d": "60.0", "032cfa3cf11045cfb29ad85bb246baa2": "4171", "67622c07f5dc4080aa1586a735594588": "989998", "8fd649b9875e495191a5562ca8fd1709": "7", "fb2154c04ffc496fbb04a50f60fca9ca": "45", "1858bcfad94d45cd8624d9f78f55d659": "87203", "85860921bc7f4d4784b0c865e8215ec9": "10", "2e02c41469c6465ea0614c1072e5ff8c": "The relationship does not hold.", "bd324b37bdf64dccbd11af6e7bb89132": "Error in executing code: list index out of range", "6f97120101c84899a9f4e891e2e10675": "89", "b0eb047e05c94b69ae767ee5b3e64a0b": "25.0", "2ed3ad349184427ca572eb7a64ad274d": "97", "00fdba0ed73d4609b13fca25f2de74c5": "2.9307530753075306", "dcb96029c5f14509ad5a314d2e7dc649": "108", "675bd42709f6441db5cb2bab4d8a31b8": "35.99999999999999", "72c58f887ab8436196c32cd9ee337dbf": "Error in executing code: name 'symbols' is not defined", "ff808081454b256501454e789d2303c1": "20.0", "ffac8401d6d4427cb84bfcfbf5a88ab3": "60.0", "80ae475a78404296b78e2d0f7996c88c": "142.0", "9d3cde1292104adab9555b150532e692": "30.0000000000000", "08460ef588934939ab337990ec6ffea7": "-40", "62628a5e0f3f43d9bd0634278b5aa759": "8400", "802a98382c54403dafea6d52e0dbc61b": "27", "21446d39998249ff83759e28f17de11f": "8000.0", "0e2a8566b7f145109bc6b25657dafc3d": "Error in executing code: max() arg is an empty sequence", "940e1c14239745158a2cc5bf2411ae39": "0.46", "262b978aa79343c494c36859f02f958c": "576", "81cd59f8a048464b86b24c05da5eded1": "Error in executing code: list index out of range", "403adeb9c435492aa6100115489ced00": "250.0", "df4d44baf50c42c5b223eaa389684c9e": "17", "612afd9fac4e4108a026fa2ada9b8361": "30", "ae574c24086c4fcbba6de1fd28c79cee": "82", "6c33b984a5d14fdca9b004bf9406156a": "18", "54e1434668a84f03a0b78339682300a0": "14", "3227fede486b4d8d9d7e5a28dda7b410": "2020", "b90f4ab201144fcb8177c27ace7531bc": "150", "897409e12817481f8fbf61ab6f19dfba": "14", "b00df83080b9479b968eb01b125487e2": "401", "2019acc97c784a4b9102d287cfd3fb09": "500", "15047c0a26574c3fb4d7cc1c5cb5521c": "71945.57500000001", "136a476404814d1a81921012f5eb1118": "6", "c987d5df54ea470ca0b843b7dc48ff19": "-50.0000000000000", "5cc3773845fd4a748ae97a6988607a16": "9", "56c06a9228bd42dc90439d839c38cf11": "65537", "52f8874107e14e8a85d6cef9c9e40bc3": "119.000000000000", "ddb391f909754c7b953a14c27810569b": "60000.0", "e5dc39fd1cc744ae87c9288bb3c1ce8b": "417", "e9780e651c054a4f9489a3a89914d33f": "102.0", "ff8080814b6d1c9a014b724f50d30d7b": "5.0", "af9435a7356148cdbb8d35c82e0f09e1": "21.818181818181817", "ff8080814670afea0146770029b40c25": "10", "dcd30cdb9d844acf8d23bcdca77fd255": "50", "ee879b9b2c284e7d82fb3bcf8c06c2c5": "inf", "12fe867903294e29babc13f431fb7e5d": "Error in executing code: name 'symbols' is not defined", "ec5aede489de4cc895d1fed7ab75b2bd": "5", "256f866a5cde4bb287e8070c747b85fd": "9.0", "b6350f2d2a104dc48a13914d711fe559": "8.0", "b3e96718f50f4f8fa239254721ff2f61": "28.0", "a5383479ad574cd1ac2bc7a512b11cf6": "0", "47a92b9b45c644309df7136e75f37ead": "36342", "1fe3ca0fa9f84a168157261649ff9c4b": "6", "ff80808147e705d80147f1005bb2162e": "28.0", "b8feffd0809e4b60bd187e114588551d": "3", "0caba6ead0fb4958b9af36de34d5c79f": "1", "192e25c09a3f4b86b9e53b57bba2f478": "4095", "e7667cb3d6ca4b6fb5f80a54541ec002": "6", "c44c8fecb087463b838773a4926062a0": "2085", "0410faf3cf524e079fabb932e1496781": "106", "9db8c2f874754a4f9f3276808a7fd576": "28.0", "bb1ab2ac7e24456ba377b995f6a48dd9": "150", "78e791e9afb948cfa79d65bfcd074958": "Error in executing code: No module named 'scipy'", "8da83021593b47af9219c868cb5b4fe0": "Error in executing code: list index out of range", "682abc60fde54f99ada1be29fce6902c": "81836", "007ddecba3514493b055d4f6d3195a0b": "9", "62d277ea395c4d379dcc0162d4a11ebf": "265", "ff1f3edda8b54e36b3c094e90d0c8f2b": "4.0", "660ee905edb74f7b9729447dcc1ddb65": "8", "e202d19ec4814a2b923d50800725be10": "30240", "9a96eb824030442cb90142b96ad4ec7a": "7", "03773977e5c647b5a7f439f1518d4b92": "0", "dd56be745e134006b97537aea2438e95": "76", "ff8080814638e07e01463de8874d0531": "530", "0a5092a9aa974446957e32ddaf3de811": "1584.0000000000582", "5a3d67c22345429eb06051ac5f116e42": "Error in executing code: tuple indices must be integers or slices, not Symbol", "cb70ff98f5104141ab311f736dbd8b0a": "18", "9703824655034a448a68660c92fbab13": "True", "ec11e87a9b834068b75112d9b1297407": "12", "3cf5c6b3b0e44efeab15759ae6e684ec": "45", "ff8080814a5b296e014a686e07d12598": "300", "b067ca22189d4981a0ebb468a7640f40": "1", "429d8fef8ec348fbab9335b6b060d794": "18", "c0f2977eebd74d34865af9d540345b8b": "130.0", "8bdb138d9ede443c9bc97017aa15a1f4": "1005", "69bed33dfc4f4f80a2b1416c26dd5d9f": "1025", "aa7d7b46a87b4a9dbb43d6b5673e63dc": "5", "5e5949a82eb143278de1af340f9b10f7": "7", "d535905e422e4e3ba20af9ef3ca1e7fc": "4", "8be72f50879c455ba0db8e55440e1f8b": "4", "7a53a8f053e547fa80bce79a5f9c0bd0": "78", "ea61821e8ee949e099b6af68aec3659f": "2013", "ff80808146dc29ee0146e11dd2670aea": "870", "5126284c2ed24f28b53a8e70b0736943": "321", "a6c1a4c6d54c4a77b2310b316754401c": "28", "25d6ea9da45d4cc68cf911bfc12af01d": "6", "536b0c2b6c754e098213fdc67aef1ee2": "Error in executing code: list indices must be integers or slices, not Symbol", "4c5af4a9de3c45e8864272bce53b0ab1": "1920", "d592cc14a2824b7fbcd003a6d1c8dedf": "50", "cc01a00cd37d48b797664c515ea551e9": "Error in executing code: list indices must be integers or slices, not Symbol", "5b1bc0d5d26a4d6b8f4ea13b08b99698": "768", "c33d459eb2154e7e9fd9ca36759bacec": "2", "292f5671fb2c45b29cf6b3d6efdefe49": "16", "e01dff893f0149719e8129631fdda032": "864.0", "ff80808147e705d80147f0f47c231532": "590.000000000000", "f4597fd6c603482ebdbc65eae17e94dd": "10", "1cf3e912102a46658e76f2f20acf7cc4": "10000", "a98625ba4e9240d9a33589606e605ad3": "0", "c7a0959be56a499b93fce06aaf83e4d3": "64", "59afe9b4c004413a8720741b4ff8d39b": "49", "57fce15fd8db4474b9336423f4ffdf35": "Execution time exceeded the limit", "d8ee8a9a33c645a0963b39482b9d803c": "36.0000000000000", "cab8a6c1c0d24ff09a30d7985967620a": "360", "9880f09cfa364458858e8d6791d6c72c": "0", "032d5a5361664365a73827b6be50ebe1": "48", "a76ab9479a1d4c2e89ac362db7fb99fd": "119", "a4a52ed82efe47d4a2c4df98c7888940": "9", "fe3b13e64ded4d4c85534e9a2d900d35": "1.0", "ee3706bbe9a6461cae08ceb4f50648fb": "0", "ab6732bb56374263b2c8aebd54668156": "80", "d2e2b74398684dcf82a1e16aa056b6c1": "8788", "056b68aff9d5406fb5327d342b2ad88b": "660.000000000000", "b98584155d184bd9bbecfac9128075ac": "93", "0cf8cfa01c444c939aabedb1889a15f2": "2", "96b06211078a4c4eb3cdb6638e1a30d7": "17", "c50cb1e64bae4105835e2e30edd03d05": "Error in executing code: list index out of range", "3b77c23ad3f34a818c70816dc3760d5b": "[-8]", "e4c4aa49042244ecbb9c6fbf82ae91eb": "2018", "0d24476fb9444db982e36f4bd12bbcf9": "57", "b39c0993553a486093366c1a017fab15": "20009", "ff8080814a053ea9014a13acf45811a9": "69", "33daa0613e5e4383978b43fcb3f33c30": "40", "39e1658e8355462e93ee05092bb5944c": "6", "529259aa300641ee999cd0023b4fd5a9": "5", "9d1dad6463854cd7a688092c8a8929b4": "35", "8f29fd8edb814073a2845b5dadf40c26": "2341", "c3e18f78921a437b8f6f9b29a7079329": "200", "dc104f31853649d992c114df5d3460d6": "11", "443ba21bbde1438f9775777c53f241b0": "660.000000000000", "32398eaf4e6f45b0997fac996b7f2ab6": "247", "bc39b7b121fe4ba7a6d9b277f055aabf": "24", "1f2a6126eb61420185f1f4426368ced3": "85634.49999999999", "403491eb4dcd4239be5edf943df06fc6": "523", "ff80808146233fe101462754e6010419": "4", "742d08ff1fee417389064cb1f2ee1200": "327", "1f1d53cb21424e2b84c1fb53b5484c20": "212.57142857142858", "68381adc815a4f57a4d2bd02f4bfb150": "9", "ac244b619de44874a570ef1bbe144b8d": "1140", "fd9f399802eb4f35959a6fac058a2b3f": "('Tuesday', -9669)", "504321af4e78453590f2ec7bcf1b1147": "Error in executing code: y", "01b1a812f352442da0f8aa69f173f366": "9", "5462220cf8c6484aac426a7ed23f55ad": "172800", "73a0a3666d344295b186cf36d3b96231": "96", "7fa4662618f042f1a833793746943347": "44.0", "1e0f6d50a5224b7d90f2a81c7807a9ba": "71.2727272727273", "9c4c1b8ed6bf4161aca6292c2b20626c": "2", "cdac6e2448f94519aab3fa798df085e6": "1281", "ab04112a1a6742c294aee2d4a5e4b198": "45.0", "74795dadf6924b3f9a1003fd3d6300ab": "1980", "a3cc49284c0c4460811ea4b2341af0bc": "Execution time exceeded the limit", "c1dc5332f9e24cada6ab6fa1e300387d": "1612", "b8e9ca010a904cfcbb1afb19adfce7d5": "95.0", "8c82b2f62eab4238b56f0231d76f5920": "Error in executing code: list index out of range", "e34396be2648453b94158ce74572bc6c": "None", "187149f46c8f4efcaef4277ae4f76dc9": "80", "2fe2cf2fc03e483c9f019b01f123bfab": "1584.0000000000582", "0d56887a62b54b03b8142fc5fc36f8ef": "2", "78e65e6f187744b2841e021802fcd83c": "8028", "ff808081477bd88b01479415b1a12e58": "1290", "d42efec9f5e8469eb5e49733a62d91ea": "88", "42cd645bf6d44ac8bad6ddf0b0d2ec41": "64", "ecd82537de1a4ea8874e1d9753e71dbf": "4030", "5eb57108cb5a4c18921822d871d137bf": "700", "a0eaa588c52942299335617b0aecf1d1": "100.0", "5a38f3b77f014847b9752dda52ccbee7": "720", "fa8101246e5045dd8683f9543afba61c": "6.0", "d78689b72d414531a12e4d86222af0c0": "100 - 20*sqrt(13)", "44f9886220014887ac1c8953525228ab": "833.3333333333334", "4d61acacc3b34ff8833bdfa9dccc8c78": "None", "ae1642aec11d44d09ac7dc31bdc43834": "Error in executing code: name 'symbols' is not defined", "32c68e706a804f5b8a5330dc43e5cc29": "Execution time exceeded the limit", "7a3f4f288a594e749250a282279e4155": "12", "e015829c117047e4b06dcad96dc2d84a": "32", "90c161c00bbc4b2b803eb8947924bce7": "20160", "6279b38a8d964c9aab45a518b8ecea18": "25.0", "0f3cedf8c4dc4f93967d7a6cbe331888": "3750", "410a9d007ddf48319a7e8f55c1132cb6": "93.75", "e767365760cf40f49c6c1fb84593dd56": "Error in executing code: integer division result too large for a float", "0725780cb3c74cdfbb2c41209b8f51de": "1.0", "da21d841d0884757a5bf9815371a7462": "33330000", "ae419c37da944a01b95b212f627f36a4": "25", "a2b72803a0ea4b58b1e809c0f00ed82b": "398.0", "1338a7f4c52549a39ea6b846e8343d38": "10", "63cb0f2432824f29b624a0e632718764": "Error in executing code: list indices must be integers or slices, not Symbol", "de39395e61f74208a792f395bb9e774f": "Execution time exceeded the limit", "d549154e7d33487bb371bb8eaee85156": "0", "4eb68368eb584a9f85b27866086d6cd4": "100", "82a5dca74d4649d29e20dfddfdd45dc5": "2859", "6af52c0ad3c14c39b6e080509a67f6d4": "22", "492d56691a534330b5b2f46a1aa5bae8": "44", "bc596c953fdf4f63aeb09e7a6a9ea955": "27", "2770383f02044a328e6067034237ac1d": "4076360", "7cad36f5aec9418290c875eddec54264": "45", "d32a8769e4004c43a643eeefa76adb96": "601", "f4bf8e6a1255440c9de1fed82c73c623": "1200", "5258a69d2f0a411c8dd815314e922bbb": "16", "5aed566f8e164522b71b4c4a5294a4e6": "Error in executing code: list indices must be integers or slices, not Symbol", "5eceafec0fa74a56bda25264a242a6ce": "162474", "f4b4af74756642b9aed19070212d975b": "3", "2ea9c571b5e641c182f6138d3c37a9da": "Error in executing code: list indices must be integers or slices, not Symbol", "520c815f9215452fa670640338592f6e": "20", "c99a365e407e43f4bd7b609f14158740": "42", "f34aca53212e407b8bb6cc2d7bc97152": "354", "a708b0485ec4481289bf45fe8a882c9a": "9", "9236eef53b1e4aca951702c628fe2a48": "6", "c9caa027100b4e13a1cdabc568c99aac": "35", "ff80808145644e1a014564b5585a00a2": "8.00000000000000", "a4e9a11b6d1c48198ea68ec7dbb27a52": "396", "dbf025cf375e42e3b46d4e1b4c33ad1f": "1", "3eb5153ed8ff4b6190b7e84d8891807b": "None", "74377a9e3d974762af92dc89eccbf8f9": "23.636363636363633", "280c02729b6c49dbb9b32a0a293083fa": "None", "88348944854b44bbbaa187c1c9bb6e63": "166", "7cba99a4f145446c9a55fef4c6cfcf43": "0", "fac238d9e84244a18f56b0af41e150c6": "84", "3886fad190cc457296556b4783c8894a": "12", "01e21de2cb65433ca091330ce67f3b7e": "64", "4197b7cd23f2461db8d655afc4791c7e": "37", "288ee066bbf445dbbbdee1797941e589": "97", "1fc7062d87fc4a53bf98444ce825aa44": "98", "5773ac2b5a3f44c5a4343c526145cc66": "33.33000000000004", "f207f68b0d254e31a99cba15890b7811": "360 - 263.893782901543/pi", "0e8a2128920c4ede90e1aaa77e2a4e83": "Error in executing code: 'float' object has no attribute 'numerator'", "ff80808145cc51010145d9663e3a0beb": "7.5", "988a7fbdb99b4d5b90b2170a524c83c6": "0.675", "1b251b6297f44daabeafc4db5f5be7fc": "20", "62a4575e58df44c2ae52b22e136c6baa": "None", "ff8080814526d2f40145279435b703de": "5", "16530f13847342ff94b307eda9651a3c": "2000.0", "a1a1adaf02eb4572bcde088adfb05184": "40", "ff8080814670afea014674676b150672": "52", "8835682ebc88466bb355e6574cccf304": "2475.0", "589a9301461543e6a396819da05c2f22": "11", "702ebeb1f0b246ecb4df2c3b9bec9119": "4", "e13c59e54ecf448d901fe11630b60196": "34", "54a25ef00ce341a49a5b6e20b2e12974": "7", "03a61c4e7cad4563b3d37c9e309ee2c4": "53", "8087125d65ec42668c5037046d167266": "112", "ea88884219534391833f9d20b3761532": "20", "07e1ed05b8984669a8fd04589a24d965": "864", "50d1d76dc1904c8d802f63214d232f9e": "291.66666666666663", "5679d950f9ea4e2bbf21a47e582ca7d2": "4", "c1fd95b6c3ee4fe0a1a6cfe6affaa347": "-7", "787303d3cd1d4a1a85fcd06cb38b7f1f": "-2.6999999999999916e+16", "6565eafb512041c587143cfc99d6b88e": "-12", "a4a6dd7dfe7f4b51ad4e736de3c06b74": "9", "e88fec95ebeb40a48ea63b8e51ce05be": "25", "4f5edf9660bd427d958ed19715f10b6e": "206", "9ae9ea43b8024fe88592a83354ba956f": "Error in executing code: string index out of range", "fc06d4f03bfe4fdb9b354f63d0aae7a6": "Error in executing code: list indices must be integers or slices, not Symbol", "53ecb704118c4e2d997fc6bdcd8e7bc5": "1.0", "170107a1c5274dc3ac30f93f57b7e31c": "13", "c1268933295d4e7587adbe3a256cb648": "0.9999999999999991", "5baa8c3bb7b846e2bbfa1a18ec1c4510": "1", "cf8c758a95bd412e93fc6eb4e51678d4": "Error in executing code: (ConditionSet(x, (a*m*x - m*x**2)/(a*m**2*(1 - a)**2 + a) - sqrt(3)/2 >= 0, Reals))._inf", "0aa57f340c174258b97cfdf7d0836b18": "5", "06eab1c4444f4d7e8997950d21b89e81": "1", "131eb74c90d348cab11049e1cf4feb61": "54", "6560b9f301014bbda94893be7d0f5d3c": "None", "344ab16b02714de8a3139d30e7ba7fd2": "9", "d43916540aeb4be8b8c342f46b85eed0": "Error in executing code: 'Symbol' object is not subscriptable", "801524d71aba4ae7a552379cfee16d78": "6032", "877af6817b424452bd9a81e96b140da5": "2.0", "76152e5807a44ee3a6e6306fc4bdea28": "6972", "d1212119b9674169b1ecf6c41a649637": "4", "dad7b1a67fb5492dbee0315374819268": "5.999999999999999", "d281c5745baa4749a079c46a4f4e0bde": "162", "69509864af8b4647a89b436dad0cddbd": "14568", "03f6cd7b6a184129ba2cdac362d66e1a": "Error in executing code: list indices must be integers or slices, not Symbol", "fbb6f4d550474077bc0b7ce4c7da5ba7": "16", "ff8080814526d2f401452794c59b0406": "71", "7216a5c8fc6749cd91e5670c7a812fda": "10", "9a39a0288fa140438c196754a782cbec": "20", "ac76b34e5952444388ed80ee30b6d3a0": "23", "5a150abd587d478d840cabc748d7792e": "731", "24545487fb64405a8237b468cf2f90c2": "499.95000000000005", "9a5e5699e0a0407182f6dfda99890fbd": "Error in executing code: list indices must be integers or slices, not Symbol", "b9c46b7b22d74530a8a16099fbacf789": "7", "31aba646ae514f0c91a5c6b537d8bb09": "3.00000000000000", "caef908d01314ab2994ab5acd5a7aea7": "16", "bd73901dbe974e0c8c22e2c27eff60b1": "Error in executing code: list indices must be integers or slices, not Symbol", "bd506a4b5e3948fbb453a192b7f10649": "Execution time exceeded the limit", "be9e9f7cac524d6bb9f579a7a6799fe1": "50", "f1371983f8314a44b91f15a60d1b4e37": "25.0", "a2896b3f73e7425d964c9a7e858ede76": "32400", "75aaff047d164b09bfbbe933313a1f32": "14.5454545454545", "2386dbba2aba4fafb8347e8083a28f40": "100", "00d3369fecbe48fa94170f1a6f173ca5": "7", "ff808081454b256501454ee344cf048b": "9", "48f60ef0a48047a8aaae29ad310e2a90": "9", "d4984723ca424d2e823a03bea272607f": "660.0", "70744ad98ec548bbb2ed9be5b41edfbd": "-1.2099999999999795", "09848f914171454a8038de2c472fc561": "38", "98898950de4d4d1faff4234a64a5b588": "4850", "ff8080814715301501471ce8116006df": "360.000000000000", "362f10af55a240b9996fae15080cc82c": "2020.0", "2e502dc71797453591a5c3a5e22b4948": "6", "ff80808147c465b80147c68a963e03c0": "1414.2857142857144", "03aefe45efea4f91b7bd76255483d97f": "36", "870012d4905f4a8a86d4a1e5de43c845": "36", "681a56060965431780ac0a046ebb2baf": "15", "b4fdb455a98d47a08a1298ebde6a587b": "2", "58ee1d8119c643c8b65b66925f960f37": "49", "5e1868b9d0f140149f3e219c5731e6a3": "32", "cba058defeb8413fae4c634ee74623de": "63.0", "079eb2a711c14f219b271da210f65858": "45", "e59b68a5c9164f6c87927acf32b43299": "200", "1b08278aa2384a77be3b7f90e62ae176": "118", "158a194c634446aeb311575e19945b29": "54", "e07f96b831534bd2baa4ed1e4ef1013d": "35.7239819004525", "241f08a0a24f425fae5eb96e955addb4": "-30.0000000000000", "bd3994a9e8264d9e838a20564c4942fa": "80", "d53d254588b84cbc9ffce92d2eb83611": "Error in executing code: list indices must be integers or slices, not Symbol", "a042d9e90c5f4a248bbaafd33e054440": "Execution time exceeded the limit", "1d47e95c270c4390a9c290e9bc4d1c26": "Error in executing code: too many values to unpack (expected 1)", "6e00b42547794739846b314a6f8d17d0": "Error in executing code: tuple indices must be integers or slices, not Symbol", "2721600da1a34b35a068ac4224839c13": "32", "55c9476ddb7d4a50b336ca70ca69a797": "Error in executing code: list index out of range", "675481e0e0ff4eea92cae3a58a747cea": "15576", "c043c8f1ac594908b37e3a292f992ca7": "1140/17", "c1e92a1d12584eecae49648e8935a0a6": "296", "7793c540aa034b6b9fa7695868e6fa0d": "16", "4d4588138abb42ed89850c416b39d5a4": "972", "130505b561fe4fa1be239d1e5036bc3a": "Error in executing code: list indices must be integers or slices, not Symbol", "7ed923fb47684145948652932f5e1168": "207", "13a83c2616eb4ea9a396cb03354b04b2": "0.5", "011f7884afd74d9083a2f4c5ccce0705": "162", "0aebb1471a114663aa6ba2a90a316e73": "-5.00000000000000", "8a8dec598f244c03a99bdda749335796": "7", "551e2e8e00a449afb1f3a80ead1a10db": "Error in executing code: module 'cmath' has no attribute 'root'", "7d2fd46557794edda2d18e631f0b19e5": "6", "835ee0840d004345ab76e864490c93c4": "None", "e9a831de86734b58aacf76e1b71a77f6": "8", "ec5c052e672f4c0eb6bcc12f0c5ca941": "252", "57b2799638e74adf8186c898370ba317": "18", "45d176c7851348d193f20db6c3658020": "10.0", "46db7f21c7014697a66799262550e759": "25/2", "32a4df7305ee4d06b7f60b1d66db41e7": "Error in executing code: b", "99601b63f8fb435792a8b7e68b4537dd": "3", "15ab26c96aaf4e78984b19245536f478": "33.0", "2bfa398e90e540e59954c08085b1a7f3": "10", "fb12c746a36540a4a6729383c0a8029e": "40", "74bd98b66e8241cfbf834943529db242": "None", "9974a2e5beca4a409244459b97135ab9": "386", "e6f4e9cf97184eb09bbe66b79c08fecc": "Error in executing code: name 'symbols' is not defined", "2071a8690ca641339172ff07615cdf6a": "1005", "5b816c34bac14ec883d8d37d61efadee": "5", "a436767bd1b140a792ac04064cdc682c": "15", "6199b082dce94b1fb8a70c385070958d": "0.44999999999999996", "fecca2f86f6f46eaa80bdda0299ede1e": "31", "9f62fd3471ee423e9143a7270d744002": "1.0", "9e82bf2acb7e4fef856ac977c4163666": "6", "b8cf0d6f961c49ad951c15b35b3270c1": "45.08888888888889", "74d4b55095794cb98fe9f52eac21a46b": "21.0", "ff808081488801c601488c22abc30e1b": "1650", "dae24de2e5a84a7c917b05f7c9952750": "x - 14", "3f92296b9321454cbacf1a20b16d6054": "76.0000000000000", "83d5c9e1a0374f29af95fdd56a927282": "6", "75dbb189f0b94cbc8d698e0508ee4f49": "Error in executing code: name 'solve' is not defined", "30c2d75a29b941c68925fc0fc0ffefb0": "192000", "c6fa280a9b934e68b95ae2e5b0df3fd2": "8", "f12ad55b616a41a999057335790b0f67": "Time calculation is off, it's already past noon.", "82994e061f6c4f98a0e2cac838f6fe5c": "28", "2df3fa57ef474503ae28da4e2251eade": "36", "b1146fb9797e44778ae54d3f7ddd749e": "Error in executing code: min() arg is an empty sequence", "61714850276a46bea99141a9adc7e539": "36", "08faca680dfa4aadacc67ea3a63a72b0": "-36.333333333333336", "1d4fcfed9ba94385bfb3cdae8af04b15": "11", "a1967fdabf67406dbc6c585d66c95227": "25.0", "7714f67e397447488a74e88ebe9dad2e": "5", "5dbfda50ccad46708f1c51be150f75a1": "96", "c0facb85c35d4e7cafb7edc99e50e851": "4.0", "81c06d883f8346ca9d4ddaaf4ce531fa": "1156", "e89f04f51b0146709b6431d3595e98e0": "5.0", "23ee2654ec294434823100dd7b551dc7": "13", "95ffe86f62ff4d45be2fb7061b39c94d": "22", "2c7dc3f92263415caef55a2a9531282f": "156", "ad9f9d026e974b0ea302ed6faffebdc4": "100.000000000000", "94a1ead85c4a44fb815b3562fe111481": "9840.0", "6d648c7ca6da470fba780e3d0c0745e3": "Error in executing code: list indices must be integers or slices, not Symbol", "93e4d05b4229418a86a95603a709447a": "Execution time exceeded the limit", "ba0ea3302637498a9db973c4d677eab3": "9.0", "544908ef4e694b4da4f7a80f66798754": "Error in executing code: unsupported operand type(s) for /: 'int' and 'NoneType'", "bbf78bbf0843485e8ee05d65f75f0f46": "10", "f75dd1b167864726a778880a54f591e4": "400.000000000001", "e4bd5d1099b64557b7da813a39497649": "9", "aa72ff26cae146b88d44defe14f776a1": "66", "269c76ef062841d6a39ffcff64b7f150": "31", "e85e08efd800459cb901eddade4d9a46": "2017", "8ec78377583e4b61946c7bdd1151593f": "0", "d6ab12cdfe534907bb53fd566ebaa574": "None", "83dc374fcf414fa0930d77d1fb47c5a4": "330", "6dc53a10f3c54d0ab97d07d4f7c243b7": "64", "97fddfb4de95475db40f90e322abaa00": "47", "aaaff5fd2b0c4d3ca6b5a2592fd86687": "80.0", "ff80808145644e1a014564b5461700a0": "140.000000000000", "4a65a784eb7f4cee881fd4fc32d4ee71": "972", "ee5bbea6af3640039b5c4f3c0c42a7d6": "3800.00000000000", "506a6a84c6aa4071b944aa52e4270c02": "26", "57dbb18e23fb48d5b1af7aa72abda1e4": "12", "70601e634d19467897fe954f851351e2": "155.000000000000", "da6bf5d883864fb2a73695c54e2eab79": "10000", "e78fb93909ae401d9ac9dfb3e30700f5": "320", "77041cd0e47f43298c21c79a24b73a73": "5.7", "d9b5b7c5185346ebbcc4b82e9708a518": "0.48", "f56d0f26c8054d5796182943d5949543": "312", "2ebe23801c99464288449c3607b3e168": "45", "d072d92443174b3ebc0761220b0a46f4": "12", "02d2f20bb56b46899fb73242a7d5a383": "16.666666666666664", "55559e8c497a4a6aa32c0b390f507873": "(1.00000000000000, 3.00000000000000)", "5ee035855b9944f3969f515f2f091c10": "2700", "47083e4b546d46e08aee8648faa10e66": "None", "e1d2f9b761cf45728e242db8c60627db": "60", "26ae88b9f5af4990a5af35115d839a58": "1", "be6b118bb3ef462fac514dcf129805bf": "9", "57da6ec6d7304760b22490d0746d34e1": "None", "ccfe7718ed5b4b10aa40131ee6b77220": "4", "3376ba6d0f374b4bbd80bcb7b1a93094": "45.0", "d7ce7732bb7d4f608f6a6aaad7693787": "45", "bf3968e88f6749b3aeeece615aaafc5a": "Error in executing code: 'Float' object cannot be interpreted as an integer", "ca054be79892400d9d2a85b5c918b2da": "21", "ff8080814518d524014526a68c4a192b": "Error in executing code: could not solve Mod(x, 3) - 2", "78d3adf933a644b48be20375ff7de508": "1", "c8c92c6d9ead4d7690d06c8f9e7d3708": "165.00000000000003", "bb4b61f60f134963baddfee36ca2269d": "1048576", "e9a570f4762b4c0db2c814d2f71b0b72": "Error in executing code: list index out of range", "29c5280fb773453daa9129b2e102f2e1": "37", "102506d55d954c3583bcf89147642e1f": "7", "3319f7b852f7421c8172f6cb4654cdb3": "533.6", "1ceb35693f2a4aa8a505258738111bdf": "46", "e0e0ec1803c5419a9685e479188c3811": "420", "abe08203f45a4afe831ea466fc2bf0fa": "1.57142857142857", "bdec0d18d2a849769509a65f4b5bc67b": "45", "ff8080814526d2f40145363197613ef0": "10", "f00289ed533c4490a57e9569bdd3cd53": "None", "4c156375d35d4ce68c85ef71a8022ab6": "6.0", "c2b0dcadbc0748d395705a2e3166d2d9": "32", "02a5061896404f14be4254f4497a73ec": "30150", "6ee9993d66344075be9e49a185739394": "35.99999999999999", "885efae2ab5946d79fcccfefdae7d5af": "Execution time exceeded the limit", "c0422b62a8164d9fbe0c0bf3839283fb": "43300", "7c97116b5c1449a8bb11427e40b20978": "240.0", "29e068622b184d29b3689a89cfb0129c": "506", "be3656a8134c4782813fc4b7dc880f8e": "1230.0", "557ee9596e774703bad2e73bdf72f0fc": "1300", "80876005699940da89cef04d901e9f26": "906", "7161bb623c9e4cb28d721dcde77c336c": "21.0", "7d786d6a5c4e496ca9207573dde86c7a": "Error in executing code: Nonzero coordinates cannot be removed.", "75a9d9ed0aa148ec9a211cb2740267ff": "15", "011cba7d4674432bb922e54e7e07bff0": "362880", "2da7829ed14943b29b8597a8cbec2f19": "Error in executing code: list indices must be integers or slices, not Symbol", "b7c86f3f7d0f42728d82f16f7e3052ee": "Error in executing code: list indices must be integers or slices, not Symbol", "3dc19440c0fb461b95031612d776b083": "4", "ff4f8bdb5f434c13a38808c761170d98": "Error in executing code: unindent does not match any outer indentation level (<string>, line 15)", "7ba3004c21ba4860b34e31b37144966b": "84", "ff80808145644e1a014564b5b1d000b2": "64.0", "9b523c42a97c4ed698bad5c3ae5b5e72": "Error in executing code: unsupported operand type(s) for %: 'complex' and 'int'", "5a1da3d1fcd442e88a98364011f520da": "28", "87bf3380186f4cfa91f42bd77b54a168": "31.4", "ff80808145cc51010145da44dc960da4": "3633.07", "373c23f02a9f48d6a1176660ed5ff364": "49", "17d8b8543fd04fcbb85b0d778ff4a914": "96.00000000000003", "d6f19259f6c64a31bfd38763b468245e": "13", "c6ad62ffdf1d4b6799c8ef35de2cf780": "1107.4468937875752", "54415aba358c4688b4e5a057678bca1e": "8", "fbc96a4d510c4fe4805243bd91eadb66": "601", "8632db4f0f2946e9a0b54fa1a693733d": "1.0", "95517e05447d4b98814e6bd2e5a9cf96": "5800", "43b0671526e14649b29906d640103ef8": "7", "9ef575284ad342c5a5e3a918fe59b5c2": "[-8, 8]", "ff8080814502fa2401450bc8ff92165b": "123450000", "c995bf38afab4604a2e877dd668a3b65": "56", "2da6c779b7964b8ea670f018856e6a6a": "2020.0", "ff808081488801c601488c2299770e01": "50", "6f568231e9ee422095e02cda3678b29a": "600.000000000000", "c0acf52d78da4c1ea46e940680713aa1": "338350", "23e97f4c251d47a693cb5436fb5d2a82": "88/3", "8c14bc186716438098ee2e9fdeee2d4d": "1243.0", "e7275ce9a70441d29ed835657f947180": "8", "b9f90cbcc2e34cba94336c257bee414a": "154/5", "1863d991adb14186a7b1cfd038d8b75c": "1.0", "8eb98c60204343cc9c427e9533c7242c": "180.0", "9ba027085a964a909ab3c4cdb514d3bf": "0", "e7c90c85ad59477cb8f21e2265f08a35": "11", "c1cffb1ba79244ccbb69232398147086": "3000", "59187f055db34bec8fe48f65ac7c032f": "3", "e15e5ca43aef4b4780ca222596bc7190": "3", "ae2f290d327148489f2d30bc34e458fc": "Execution time exceeded the limit", "b52b5904400044ae8e92c4c44f6bc89b": "None", "70d801aa413c4aba9b2756b6c3a83284": "94.0", "8dbc2d83eabe4be5a1ad9bc073ca834d": "300.0", "568bdcd209c54bebbdf9d587495902e1": "18", "c6cf062651c94b1c9eef2af1881512f5": "Error in executing code: 'Tuple' object has no attribute 'as_independent'", "ff60f58e46e34c9bb9659cad2e7e2757": "142857", "b81a2965d1a948359df8085819981589": "0", "f3f2728c9f3d4318bd27f76e7d804f8c": "9.0", "d570df7e17db4dbd853b8200ee3a28f6": "12.0", "0b9fc183571247558434042c55fcd125": "75", "335b78d981c7473191678182092acb26": "12470", "9ccfa48bcdc54a90ba73f73fd9483e32": "15", "948ca8ea0c684660b90daba46e14f4a3": "1694", "b8aab99754864222a494e78e8a21e673": "112", "767d6786dff84497a1c1a88283856f81": "60", "ce9903657ca046469730e15efb21df78": "10", "7ed21a897a054a748aaa1446a36142af": "20.0000000000000", "e11e0ffbd706450197064941843e24ad": "28", "a0980b16b8134d8a81c3a92d2c1a8297": "1", "60f2ce93503744048bb399c821daa289": "1", "ca7e63a2d09c44308e6b5cf886921390": "35", "ad218c33e6ec4c028a446900a10336a6": "69", "fbc433f11a7943098dbb093135ca0177": "0", "37bd13fd13fb4e09929b035bcf21fb08": "1980", "ff80808147c465b80147c68a93ba03b7": "Error in executing code: cannot access local variable 'original_profit_per_kg' where it is not associated with a value", "e5a128eed0b04fd6802cfd6e2fde9a81": "122", "03366ae3f4ed4bdf804243662d409ef7": "26", "c0f6cf12e77b4986bf9fc854f5dcc8b0": "Execution time exceeded the limit", "b40bd99113694bb9bfb06a6ab5c61dd7": "6", "cf7c5eb48f174803afc5488212fe7b3a": "Error in executing code: pow expected 2 arguments, got 3", "6889d9b1a45e4e379340b7ec263a4c96": "2100", "122bfa78395b4579b83f05493e2b3ed7": "500.0", "fdec7e81a0c54ef2b24dc5324c144526": "218", "adb2d1d5c46b4458b0193b0b66d80b16": "64", "d1ffa47c07374e4eb8544977ef8a836a": "Error in executing code: h", "d56cf021d6204e5c8ad150d5cbbfb8ce": "1356802260", "b50dea9af68a4cdca7d9aa84da7f0ad7": "40.0", "e423ab96d8a5403a85f04bc648e2fc33": "No solution for n >= 4", "07b1bcbf6a014d29a2e1e95361cec6c7": "-1000.0", "18981ca821d648ad91da88ac013832d2": "200", "ff8080814a148866014a18b3411f04d8": "4", "939f1079c62a4d15900aaf345a27ed9d": "12504", "c340d3dabfbc4e13bb20cc76901654c7": "80", "ff80808145a7d1300145b12346750767": "0.0600000000000000", "fa2227422b18412b9317b90b1b17dbbb": "486", "ee60f15c2a5a4f708f9e4b990efe29f1": "9", "8250321bc3584296b471693b2398b98a": "30", "c63de833f24e4d7b8bfb6c9270ee92f2": "Error in executing code: list indices must be integers or slices, not Symbol", "e2f6489206a04401bf41b19e7c4f826c": "18", "8d7b3e6fee0c45bc9e86a5029811a83f": "62", "79978e79ffb04400a0c7ebecb49e7bbc": "0.9230769230769231", "5e84ce83f18f406d9175d0f751b2ac35": "-9.318181818181818", "f043a960577a464db3c1e124c6c55a68": "75.0", "7c2920f674f9422b9747029b3463c57a": "41", "406af4de35ac4f4a9cbac7532de223fb": "16", "73a3f764dd264d1d9597485db6b6bafe": "0.33999999999999997", "dedfabb08bec4f3cbdedc3b3df8a3546": "3", "99d06ada7de1493fa111c60d80dc7fe2": "1.0000000000000002", "0bfe125347804fbf97c4aa7f847452d2": "10", "79e0b9b821c1442483c087d4f94131dc": "64", "70b6d7a78d724b979e68cf372b1190e8": "999775", "879a2589cc0e4d2dba88585c12f0b7ba": "6", "a42e8ef9343047afbf6ba78440192143": "750", "e28ee3aee22a422b98e7efe1009e2264": "390", "b4a6495003914cada0f0c0296df4606b": "950.0", "264a5a58cf70423f96dd0e4fd29a652b": "5", "250de39c9b914002802576513d05c44c": "1953", "ec30107bce844c318559b136fe843089": "162", "2531e30c900347378b91cc42b3638da7": "2700", "7ca466e1a15d4c2c9a1b28b5c1c5c0a1": "10000", "f6243fc0f22d4594b6620e12ea3d796b": "36", "6f8989f661f74848bd0c747ea8fe25e3": "Error in executing code: cannot determine truth value of Relational", "292e2ee198b440f8af565c0404a7636c": "24", "dc9f6edfc2f241ed926125f831e11d88": "2041", "500ba40c4d974125bc71b94ce43ebf1f": "2018/223", "9feaf807b4d9489ab4a15653f0ae94f0": "15.0000000000000", "ac114ec3d9354f0ca21af0f4e00bd1bd": "9.5", "a7722084cb2a48078fd5b1ffde911149": "5.50000000000000", "ff80808145ff6bf40145ffc79c8200b5": "48", "2daefc0b4de948fdbd1839267ceb50c9": "147", "4e15b28afd414fd1938ba15673498dbe": "80", "fffd4024ebd24809b9f52c0d41865847": "38", "8d4e941ff58f44b08fde8e4a0b8e8f7b": "2", "4742b6b6c714484c93146d74240614a6": "2000.0", "89dc53d3e82c455582ba2ea55a98af80": "140.000000000000", "7f47f850c97544979baff3fd9f8aae9d": "25.0", "76f81aece8894930a4a1eb2723753efb": "[24, 9, (24, 0)]", "e865f102fa0043fea0374ebfd7d2b89b": "1008", "8cf6959d57d9492ca10b88a094e18a7e": "(900/7, 180)", "e90c08bfa2794df5b412897fd6add187": "(900/7, 180)", "cbbb16e3b139454e82e33e063493d943": "Error in executing code: min() arg is an empty sequence", "9b3c4de7bc96454ba77eac0db5963ccc": "Error in executing code: name 'A' is not defined", "8b07ca882f7f46f48c91a2d3a947ac35": "916", "fdfd92f2e9ea44e5afba2bc21f428d01": "79", "d456a7f92a8845bc9f11a10130e3b38b": "45", "3296121dabd54280852e3766a1ecf617": "-5904", "69acaacd8a9147fa821b2ec3b2de026e": "False", "524b1926085e42ec84244f436c5484bc": "1613", "1469f4bb3a85413b9da3932f91928d0d": "40.0", "818e874cc81d4328b00c7d7c8591a68f": "Error in executing code: cannot access local variable 'sol' where it is not associated with a value", "d059c58a8a7c426082f90d4d586ca8b0": "15", "274713fe88774642a74f9fb74e14e4ab": "70.0000000000000", "88fb6588265e45adaaa6fc02fe632474": "Error in executing code: cannot access local variable 'valid_solution' where it is not associated with a value", "965a7905f43848518785a6e0146f48ae": "30", "bca36327f34e406db4db73c6c82df88c": "1", "3c48e73a579e4552b019f7e6a262f7e2": "1290.0", "0d774953a1d448e3a0f3c29fac9bd0c2": "None", "bbd6be54bc1c4116a4da3311e6673c78": "2021", "6464d3f163fe4f1fac05222ffba2f2e2": "7.1863342894618585", "1b60b7fb4b0d4d98b84727d5f34d8d66": "147", "e7e0ec13b5784bfc993bea9459ac14c6": "Execution time exceeded the limit", "88e7ef06e5454b52bacb98da84c1e220": "33330000", "8ec9385fd2624415a488671a5d14a0a5": "Error in executing code: cannot determine truth value of Relational", "a8ee0a5a880a4fbca5330c1c08925379": "3840.0", "55e4adfcc95642d795c47d00e223815e": "Error in executing code: list index out of range", "16cd647c0768471b89da9438d3c0dc84": "12.000000000000002", "9ce56931509f4665850c64c873f9e7af": "Execution time exceeded the limit", "c601afe9ba1c4a5ead81fc5ff18185c1": "56", "8585982bc1a24e43803abaeb3744aa2a": "129", "8aac4907508d5d3d0150a97442e92e8a": "1997", "712d0ceee0a544e68fa96e24c30b1e6f": "28.0000000000000", "1696a28cacac4859a2ca8c22608e0636": "624", "f9c2f7669d814408adcfe18ccc26850a": "51", "0d67f819171a459ab9da9ce445bb8db4": "Execution time exceeded the limit", "da131bb2715c40d496493914a22e2be1": "None", "28119ad1089b41e8871532892a223c39": "1", "e2aeb512d8644484879277b8ac5f67e0": "Execution time exceeded the limit", "dd5826b09d704c2d945b4db5e11878bb": "39", "13ca0da5968a45a9b0572cad33876540": "315.0", "1f3bc513a6694d4e91f6a5ad740babbe": "111111070", "61d0b51d3f054dce922817424fef534c": "300", "a5218b8312f7431e8a3b2401cabcfd38": "0", "e3655c40fc0e49559c601ed2af09f594": "Error in executing code: No module named 'scipy'", "5c8224c7d2db42258413124d80de9aa8": "91", "78a018fb184e4eab9907781b7677d7c7": "1000.00000000000", "b3accecbc9c24292a8c2664020bfb9dd": "3.0", "e43598b9e2b543f0b6c562ce28357e6f": "1600", "db4fb96ab16f42ea951c4fabdc1c3c25": "76", "6c7cc3a5d65149669edcd51e3c69d356": "150", "9ec43b96a1ec475a850306657b42c333": "Error in executing code: list index out of range", "02232a7e400a42fdb7df0ad385d7e21a": "Error in executing code: pow expected 2 arguments, got 3", "a3b1f04e1284448a8c8de0154da8bf24": "660", "e51637b58c3144258754e0e418098fa4": "333", "6375c8176ff34986bee010aec69664ec": "3200.00000000000", "84e19124f9f84ed69220339e7a2f2f11": "21", "0ace593de26044719d3bf31aee0c18d2": "24", "84b2c5ff401a45d2809af389a9c270ad": "93", "1a0c0c5c8cb14395908245d99c1f6b56": "154.0", "fd520099bdf3421c884121b8cf237fb2": "Error in executing code: ", "29fd09b5673845a68f0db9683622b1a4": "3705", "908ab48f26fe4248a3a4e825ab85450a": "360", "e68728f8cad5463db2091183cfed6fce": "Error in executing code: name 'm' is not defined", "eba504938c6048a9aee7af59d00e8ad9": "-8.0", "0f916341dd6e41a6b8046c7f5f06d5aa": "120", "73cfb0355a04435b80c06e1b5d92c316": "155/12", "73c03b83fba348279262663d9dccc62f": "0", "4e95637a00dd43a0ab9b71862cbc9dd7": "Error in executing code: name 'symbols' is not defined", "c0803fe918494f24956c29c6cc882be2": "Error in executing code: cannot access local variable 'x' where it is not associated with a value", "5da83ab9361643f9b8341529982ba50e": "16", "0842e8792a2b467d84fdfb43570a025c": "340", "b563165b42454d11ad5a21516e84ae01": "48.0000000000000", "89beb0e6d5d342099b112df0fd8b2c25": "31", "ff80808145a7d1300145b122a4c00750": "36.0000000000000", "1f20fc693bee45f5b9f49dd111772c79": "(7, 13)", "730926d5022b4b1b93b888449df29c31": "2619", "ab46e2ddfe734f98913ab095c3011665": "208152", "b23eb642b528442f9be522ed19e0e7f7": "119", "48b2c4ccc2574d649237222ff927164c": "45", "4fff0df6960e49c190dffd8963479737": "41", "67c49cc83c494ac2aa41170df2a368f9": "Error in executing code: list indices must be integers or slices, not Symbol", "f480c8142132446888ece2abe051095a": "29", "4444399f0a8a4fc1bab20a5412633da7": "401", "13877a78f1cc4a18b69d3aa8967c6071": "48", "ac6c8e7598474bc097acfde39bf58142": "2023", "dda2962deee34516a0900d16471df4e5": "18", "ff80808145644e1a014564b5a3a400ae": "100", "c5c5941798cc4139a939b1e29fd3ada3": "30.0000000000000", "47c87948e95246fcaf73c41b2e424481": "9.0", "7e0505c4909d44b3aa20a0ffec5da9c5": "-64.23076923076923", "56d4ccee6943413395f43d78f577340b": "36", "0eb6314f31da4ef1a3becc6effe0432b": "1", "bfe4f38e3f4b4362aca36f92fd6e4cb8": "100", "3214576131564cae9047a1acb0f7dd0a": "521", "7952b9174d78456eb7ea24c406395b9e": "24", "bfb59cdb9ab74c7496480056e0c049ff": "3.0", "d7da69bb9e064660842be8c7484c1c2a": "27", "ec895089dee445c0bdf8cd935aa34e39": "1010", "e5a652c44f824b6381525452cf75ea64": "Error in executing code: invalid syntax (<string>, line 1)", "d525087cd6ff4ef5806dc75243c132c9": "15317", "c2eb002e83644361bd911b2d9bce2a2c": "24.0", "ca0236928c5a471093236a98c0618834": "21", "23fea71627d4486bb95d9c34627c5b26": "250", "b1596ab3dd9a4c7eb56ff8bdef045664": "103.0", "923455f06f1742818b2f11650c4e8206": "234", "77fb110790e94fae8114b09e2a26b29d": "40.8", "d602c389c36c4e21aca5b47e1abde0e5": "9", "77053b76fcd240bc87af28b55fc145dc": "237.857142857143", "7fce913f8d484f22af2c32fce5a3c82e": "160", "b6c6e306f6394fbb8a6ec22cf14b7609": "2", "98b828d62563479c8cd8e1c353fc8d5c": "14", "8bf61280e6fe4dbbbbb264e5bea74f10": "246824682468", "08161f91813b4a18ac4973f60efb9832": "5", "b16d995743e74ddabe824c510f57a62e": "8955", "b4b71b81f47a4947a613ec41d1ac31de": "7853", "e8e27ccb58e44458b81c43a3a9fab889": "46", "01dd5804c2e3498098ef8b33c3d9fa87": "60", "f8268e2502e2472ab6aa5920388605d8": "1", "d2ec025ea21c41e8a98e68ad4011d7bc": "10.0", "dcfa86a79d0a42d7b2b681a926841499": "11", "ff80808146dc2afe0146dc5093070150": "21", "ff6bb71e0cc14653b30b88642153382d": "12.0", "c6b738112bd54e4294b5cb14dc271e64": "Error in executing code: division by zero", "3abd3af12a0e4cd0aa1b18a50d3a43b3": "40.0", "ff80808146dc2afe0146dc5323a702e2": "Error in executing code: 'Symbol' object is not iterable", "cb87c8f0d3714ec789ff2494af31ce67": "20", "8346d33df4be44f4bdf900dd863c8057": "150.0", "f6d60c50b258448c9cf782dd78dea7c9": "Error in executing code: list indices must be integers or slices, not Symbol", "e7f937bbf07643aeb24554ad6d127ad3": "No Solution Found", "40a3d447cd93489db4711a151d1ae765": "Error in executing code: No module named 'scipy'", "36e6d86440f04851937c2c708189587b": "7.0", "48aa5af399fb498290b70d2898141d3c": "8", "66be51ae2b094c4380d3ad76332788cd": "660", "052a424317984989805b1f50b8fba7cb": "7", "8edfa5b77ee845ebaed15538c07c752b": "4", "f782179cc43f403eb3d83f0d749b30fb": "15", "9718ef1fb765490b8a7974b526ca7cb0": "97", "8c90fd08c6f048e69d63077522ddde02": "Error in executing code: list index out of range", "57792babc1dd47f1ac7bf80d6e38b796": "676", "d8c3ba343b48459ba39739942bc4abb4": "38", "1e1ce26d0529447c9dabf5acc447cb25": "513.3333333333334", "2c21e6f41f124a49a2178d70f56d80d7": "82.80000000000001", "67108f0c346c434c9ec6d24f2de5a4df": "476", "544411c9f79041e2be0ba9312de42f76": "7", "2e89f409679b4089b2568478d286ff22": "43", "d179c9861b084d8c9f6baf37ed49626c": "9", "d2f5dc5073154747ae1402f5a5248680": "78", "5a635e2ba4df4ab88a3b049b02c8943e": "-240", "5c8e9cf608ff4557badf273dbee000db": "8", "29a40b373f0c4bc19de8480785eabe05": "252.000000000000", "ed3241ef01ee41c383c751af2f680767": "5.0", "312239df455743149b202bfd642d97f7": "24.0", "b63744a8b32d4e96b8039f81860f9fb8": "119", "71ea326759df4c1c88bc2a3d6bca32c6": "4665", "ffc6c4d4a3d94c6e8ea675bb8cb42090": "64", "ff80808147248448014724de3ba1014a": "199900", "be0639ccfeae4c59a295ab13705ed9b1": "6", "b0d6cba213e540d6b93e371359d2f4ec": "4", "8aa4c59464614d42af25ea31d06c6f48": "45", "dbad65a2161a4e4f8bfcb487ee448dba": "59.999999999999986", "bcd247f1617746eca4d2ce6049486b7c": "298", "08f65a2371fd4f69afb346c9f31853bc": "0.25", "36fe156c8d424c10a78e0a7481d9733b": "888", "b363804caa9a4c9db3ba082b19e020f7": "Error in executing code: cannot access local variable 'sum_first_3' where it is not associated with a value", "3220ff6268e9474f8d80d804b07f0557": "Error in executing code: invalid input: 0.173611111111111*pi**2", "1504929d3e7a468d93b08deacaf4699e": "20.0000000000000", "8aac50a75139269a01519f8b663c60dd": "2", "20dc1ffd509b4446a0c0ad303030574c": "40.0000000000000", "f51f438924f543c28ca808ad242513e5": "9.0", "6a653d712ebf4cd1b07e2396bcb8a333": "14", "7440d28f53ec48148741e22433cd9e10": "1", "ff80808145933e8e0145983ff9bf08a4": "155/12", "3125ddd58bfa40feb9f8f959cba18c5a": "3", "abef8c679a804b8ab6d4011b2871de63": "178", "650560fa0d644ea3ab40ba566b4f65d1": "46", "0c2ca83645824615a4079725ba23e416": "5", "c440a573f3db4708aadec23d8fc80275": "41", "6aea93d4c45245c1a3e6a2299865225c": "6.00000000000000", "9b0275214056495d95876c6a6d3c690e": "19", "e507885c7b1a4ecca9a8b23abd955032": "25", "2bd33414adb44e8fbd58f7cfb209538f": "240", "80f239db4a9c4b40bfab55c08d42a2a9": "1980", "01856aff03064e26b658dac38d8f8853": "5", "fc1e7a2fbf034c1888254c8ebc84d5e5": "55", "170876d7447d48d5b2ffcf1debb1c302": "20", "6df056d31f0d4653b60df5b8cbc0cdd6": "4", "b6259928d2524645ae78d0d313b8020b": "Error in executing code: list indices must be integers or slices, not Symbol", "b4ff49fdd77d4a7097164c8ffe81c173": "Error in executing code: t", "3c556eb24a154f8581dc596e2d75ccc3": "39", "caa11af3ba794e579f3bf58700464b63": "19", "2f15849710364249a276d2c6f15f4215": "50.3", "24f972039a9543bfaa50a834fc04f1c2": "9.0", "97190590a1e74f9b91215c3278a7e37b": "3", "3fa65c02ae434ad1bcb563e8b7ae8909": "81836", "cd02685d1f7c4ae3bc6ece23361b9be0": "13", "9983ba8313d64dae83c94edc7d5af3ef": "[2997]", "39a67c9f43534dc1b2837074a59ad12f": "None", "3293c8dc5bc445ecb02a1c952a5685da": "6", "7ad6316db077418fb7e3104a1b7846f7": "201", "6e5f7755e03a4be2b30199f749db20a0": "10.24390243902439", "b3eb71ca468a4a6faf8d540906344e19": "282000", "355beed478d44ef69938da623277ff91": "16", "83e0689b42b94d5aa8c3a132d45a7b8d": "0.25", "e5670d0aee46498ca231f75f09839f0f": "2.0", "7fe1845078304c07a251c47d89bf1f55": "2226", "4611d68a45494758b7fb8625fefdab9d": "1080", "4774a6d6a7d1455c9d65aeac35603b2a": "100.0", "f32cc85d799440789a220377179961e4": "1325", "531b684f72264400b7855ec893a52fc3": "1200", "1bc52a12453b47c7848c4228a9a691a9": "1", "30236b74ba3a49f49b69eab79e558928": "3", "c1ebc7324c94411487dbd284d23e02a9": "4", "21829b84e44f4c9da533a80848c67079": "5", "0e244fd9c8e5425a97864711cc2106b6": "1", "c8171b7c67cd44ab9b3cdbc9ab9ab2a2": "Error in executing code: c", "098f916668f04714ba92690d9c920b76": "7", "0bb1a996086f4cefad53bd66efd16b4a": "453600", "425bfa5b7beb45dc961d656fcfe890ae": "136.0", "3e45ae15fd5c477c95ec9fcbf953aa6e": "40.0", "771eec45e3734d33ab03e6db2543baaa": "316", "0fe76dcc95b748fbbabbc2129fc1b314": "293", "7f4767cbdbac47238ddb85aef210af6f": "660", "35109f43f96248f7a4f27cf7162bd757": "8999995", "9dd8d0e0327e44969bca27834b6b4a04": "8", "c839b530d360428cb3e10f5b9b58bbc4": "74213", "293af1051e0a4971a092ec70fb64af63": "900", "7196e13d1d0d401c8c356f81d4594698": "1/27571698370", "ff80808148880257014888a80360050b": "Error in executing code: cannot access local variable 'exact_conditions' where it is not associated with a value", "05641f29d7084f02abc71d0d8058616b": "10", "5ac0cd139dd643ccbf79a3b7bd8debca": "600.0", "cb5954cc18314b9da315b3d1e4bfc6c7": "Error in executing code: list index out of range", "fe68a3ea8c6d40d58d593aa5bb2ec9dc": "10.0", "4560a6a0b6ce43cfb10dd9cd7e3c3de4": "0.9615384615384616", "88820154680d4bac9f21ec374df78464": "83", "8faa2d3ddd574557ab8d9ddab50dc03c": "210", "9fd4a6f719e14216bb8352febe2bffe3": "1", "fd73e118f2254333b24c8bf632ad048d": "15225.0", "d6c86a0f244140f5bf492c3f1b5a1a3f": "Error in executing code: 'Fraction' object has no attribute 'simplify'", "ff80808145cb8ada0145cb8e51b40018": "180.000000000000", "9beee1680db84240959d77fb8b9366e5": "21", "d452bd908f50428cb9c8365af26544ee": "28", "fd315674d0754fc4b92ce56d73b4056f": "400.000000000001", "bb4665618f7c434eb41b9aef158b8ad1": "Error in executing code: cannot unpack non-iterable Rational object", "42ef74ea8f7e4807becf9ebfa2bcc9ef": "248", "0923476261164a58aa7fae699d484c1b": "135", "db0e0d8c24174e4084f7b80b6f8aae60": "-6", "a6508066671a4b19912d1dfccc38447c": "180", "dabc14c89660445e97642b77e3b3da7c": "Error in executing code: list indices must be integers or slices, not Symbol", "c5eb066420c64074a8a7cf6703094a3e": "Execution time exceeded the limit", "84145735be0947b99770c05530d84d9e": "11", "e66546f7791e44388d37b98922d2502b": "8", "c575f92d789b4b2883eb4e4ad95abc97": "0", "0d0bcf70c4784095b4e5ee59a4b472fc": "6", "4856d44b6f544ce9a51c96b99719fdd9": "111105", "e812581d255145bfa1d81397426a5c94": "20.0", "b7c3f236e4bf42818624a98de3384ae1": "34", "51c23c6c8a714dccb54d903e1d9a871e": "9", "1b067afc7885436dbec237a486d541ef": "-7275", "ff808081488801c601488c2192540d3d": "72.0", "d15dda9178c4407a8aa15df21de6e5b0": "50.0", "9b1cbd6830314153a246b87c087ad221": "18", "9bda7d95b29447af88baee424cb19e8e": "46", "d6e159542fd442479ebf7c0ae36c4865": "500", "7350bc496bd64ed69ea287d388420caf": "3", "e074062ea5544d74beed4af4b9ce3cd3": "Error in executing code: list indices must be integers or slices, not Symbol", "6a9078650467461c960766809ab9725f": "2", "191126c8b3004dc58577a1009eb609c8": "55", "6cd5066a19ec42f1b930c212e2fd8303": "Error in executing code: pow expected 2 arguments, got 3", "37ad0979e8ba40489e8b4c4ea224231a": "150.0", "546941d6a8944547b82ab955c33fa634": "47", "2f8336a7e54c4942b7b1d2b7593635d3": "5", "de910ce8e70748ddafba7939f15efd28": "Error in executing code: list indices must be integers or slices, not Symbol", "2b429153d0fe471cbf3e19cb0af9be96": "8.05", "a1dd9b7f7a3f4762a4f4da8aa2bddda8": "720719", "12a3640d28324150be8bd453deae5aa9": "1225.0", "cebaac268d6c44668436951a1f582a36": "10", "2445bd8889e44aa880bda0052bcccf31": "7.000000000000002", "0aa2bdde1df64405b48379bb5e52c4ff": "14851", "47115e69f85841f4af577822fbb9a28c": "40", "ff80808145f521570145f9304e990353": "1", "5e9c7628e31246a8b32b444a23b11640": "59", "d85bb8499dc74a10aa76e5685a8f8f81": "0", "7fc594477bed4943b392999c41ddae0d": "34", "fba324fb9ee9435a84b9a18f7e24291b": "672822", "778f740f4d8648cea1dcf1a4aa385258": "2", "084cdb1d80614e9693cc800b61ef2b6c": "24", "23c43d91654d49f68dee9eae412096bd": "(81*r - 1)/(6*r)", "42f25c3e4f9541d1bdd267b7fe62ad01": "115", "e5fba079ca964d9a9f9356d7103e1c7f": "1006", "7b0124fab78a48608ca700a49a1c8d17": "5.714285714285714", "6a62d3a14813497ba2cb405eedd7ae87": "Error in executing code: tuple indices must be integers or slices, not Symbol", "cb8437d265114e3b8f3f6e4013bb93ae": "232", "3547a175d04c4e07989ef9e12479fc6d": "897", "267366af76174cc4ab3030f2e14709c7": "26", "ba8849a205f543eb808e968648d5d34e": "969", "f5e55c798ba448a8aae5c1e822479487": "1", "ff841bca21bf4f669acc4f3d07f76b63": "330.000000000000", "24465f7fe7984092af9fdfefafc6d069": "2", "541910319c034dac9e76f4d2f7886df5": "64", "32a8767fe3e94db98b907c7807c25161": "Execution time exceeded the limit", "f570dca62c404ae1a87339889d947a08": "1771561", "9f3a6dc4fce749a5a9677a2981eca31f": "4025039", "98d9feb19c3a45d495d028744b535c48": "12", "33639d163769474c8bdc8b3f9eaf2fb6": "4.333333333333333", "51ca7ae7933749848cf9a7ebdb93f08b": "4608", "d8d6fc87f8b148d594c7cca6a7b72932": "100", "02af3d95b065427d8a3aeaad031e61cf": "6", "e6c54e7d9fe145b99772a0fa576f7160": "60", "fa2df6b1e2544614a50f5835c15ed17e": "0", "f0651b35f4b848bbb20b00e84d0a1b73": "Error in executing code: D", "79f7cd75496c41849c5cdf0703bb7d95": "400", "11c326c7c3754e5f8aeea34cff4b6ee6": "7500", "fff19a9f9abc4425b41d8e4f467e5b81": "1902", "ff80808146cd510f0146db5dd2e70c9c": "80.0000000000000", "57ce523e69d84ec8a1fb3365a0cbd186": "15", "514f430d944e49a18c86e883b1655b1c": "33", "ab7d1ab34f8e4b6493f787ff2986c758": "-12.6666666666667", "7603c50ba6e041689c495c50213d5442": "0.9899999999999997", "87c3ce7a2caf4c769f5b2076f944d3d9": "Error in executing code: cannot determine truth value of Relational", "6d0ea9caf2c84c98a65e4fcc66430db1": "15.428571428571427", "1ba7b1d4ebc24e8a9d4dc0b73978b37b": "0", "bdc5ff905f2f4cfc9996bc9f34b46305": "30", "c98ae3729b47419b9941832e558ef2af": "1", "99e116f728734c8da04f8d995a32857a": "3", "5a0936412a444c2b8073e6a9f8c8074b": "1", "57bb253343f44760996f1de6e693b8b2": "0", "e5a2859654ee4c51950d4c0b1d054a56": "9.999999999999998", "21ca991e3316418c8253417b4408a163": "703", "c8e056ca394d420abd7cf72568e3859e": "Error in executing code: list indices must be integers or slices, not Symbol", "463014eb7b1245f29b28f28a71677828": "1009", "1c55cd1650ac4ba186c6f64854d85d1c": "54.0", "79628522101d45f79a155c6a726c92af": "30", "4eef226894614b1f969216e1e366ca8c": "0", "1446516604414456be0c24ae65d59476": "59895", "4a9d0e841647495aaf90e9facf4e1517": "19:00", "b8c1e19fd51e4c63ac35ad55fd0ac5f1": "153090", "f23fdb1de10a4c69aa25c00894225e90": "25", "091ebffd06f0430fbe05ad2fe4d38da0": "18135", "090e2d233ae840b69efe7ad61d3214db": "48.0", "5194cae89527461e80d62a41f2ea2aac": "1.30434782608696", "4463933b4b18413fb04c0555f153fbf5": "1", "c71c3c57bda8450fb6bf78e0b7c977e1": "1200.0", "f1027964e8de410b9aa6e024484f45b6": "1512", "a3bc99e088f94b0787ffe83c9903c13a": "8", "503f7feffca14e19b8d5d008637185da": "864", "709cc39e58ef4b97b2937519c32de5c0": "800.0", "6544c9fad6e74530823e7de7b75cc02c": "None", "a339e14c097c44838f6ce8e5921cfafd": "71", "0c7f9e559e3d4290bc663083b2a44a6f": "5936", "8dea1555e7e24d029638c4ae04e0d342": "2.0", "e433a4f945064139802604abc41b4be1": "6.0", "8586d52298884114a245c8e06b36f692": "1.0000000000000027", "ff8080814638e07e01463de881b6052e": "[14]", "37559391e30f43db961d737ed60bd1b8": "13", "8b0234211d3643578eab3588f4482bf4": "11", "c7aa1ba60fc04e609393bc9f4ce42fa6": "24", "92e7964f96454f7fbb260ace5985ceaf": "20", "a87aa001dfc844cd8ffe7146556165a5": "59", "9a5f30a326294d5493b34721e79b017a": "64", "26eeeb72107546f4b23d4aa1f7f130dc": "11", "9ba623ab4e5c4e6db91ec9019cb6fd74": "1100.5714285714287", "ffa47050c0e94eaa948b63ab1f71be6f": "6", "f918592f36de44b2b737d14df847cca4": "40", "0b318e6a073a44dcaa1092c837066f42": "8.50000000000000", "eb1a4de9bd38472191baecae412b411d": "5.7", "e69998528bff4bd18a4d3773570e9f0d": "10.0", "20447634b7454c8696ca98f7b9ea0597": "85.0", "8e87a2c40c024c67917a12f81c2e2ddd": "0.54", "1787740dad4244c08fdc721b1dc0afd7": "1", "8aac49074e023206014e43b7439472fc": "810", "ef298a5e3f0e4665ac3b0cb4c245fe1a": "35", "2eb7ec0d08de456a84288f23c092b101": "5", "a5ebb9a0175a43f587175786bc1d865a": "2800.00000000000", "606d49317dba420f9a3817055f5a278e": "1969", "d370462e7f2c4dcea305460eae4c9e1d": "16.0000000000000", "168d395089d44cc9af07a9da6bbee6a6": "3", "224936f7ef2947ba9020262115168643": "33", "dd4361aafa1c43d1b549f2c2bec1ca31": "Error in executing code: Set changed size during iteration", "0728e263b9fd49269178d273ff588700": "11", "1f3e67ae945b493cb01925f7b9f69632": "2346", "1b91de5c54ac43dfa9a4ddbccc18b110": "12", "0647d26400cb43b6917ea42724fb8302": "704", "2a6afb7877df4df989ec6a6c0e6ea424": "1309.090909090909", "a36dc4b601bf48329ed55f8f1e215bde": "261", "b256e270bf0a482ba57cbaaf06118f76": "19900", "6dbbdec08c5d4abf922b2d7394501da9": "10.0000000000000", "34e0af376d2d4b3c84bf8cb1eccc554b": "7.00000000000000", "0b5bb4474cb248e1a76075300d08a911": "45.0000000000000", "f6141cfe0d794dc0a8caae476519ac22": "-48.0", "2846ccf99bae41928737b470d907a20b": "792.0", "02fb32b7d33040b3a7b2b0b6117bb8e6": "40", "dd45123bf832452d9a6d8db9f1f52035": "27", "eb2c68c86d044acdadac22803ae1d2fb": "3", "6511a9c9a39249f0bf9b6b99dff4b710": "8267.99999999999", "5f39a1961f2e486aa654b79222a58f7f": "16", "100bc0e39f654a4180a87136be031e66": "1", "be79cb267dc8432cad1b0cab29da47cf": "170", "2a57fcf959144947ab1d551fa2ab48f1": "160.0", "654fc4620ae44ac594264b8c7ff3457f": "140.000000000000", "0a9f818c5d884aedad9c49cea04288a6": "6", "832c2431178a4e9e970ce362ce93e1a4": "25", "16991caeb432415d8c874448b15781d9": "60.0", "2f7b94148869424f8754d8d1562436bf": "6", "e37bcd2da2594cc0b28e0c6d6aa1102c": "18.0000000000000", "4bf2b9a844454315a0a981c8fdadf913": "16", "e27489b388b84f6397f4046a24734c3f": "(2, 97)", "b8a903bd04f443baa083167e1b1abbab": "115", "5d655f61d56942719a9b9497efe4eb89": "75.0", "3258ec0af8f3413796043f1fc40dd1a9": "144", "ffe9c9654f554373b80aaf72faee5441": "22", "6191cf9854014186b18fbac52c9838c8": "39/2", "f57fbe2a7b304102bb7499b83404703a": "30", "c80ca413f5f04ce08c4276b58cf003b1": "180", "bd3ffaffe65c46409db1e27b41f278da": "Error in executing code: name 'symbols' is not defined", "339f9bd7ec204359ab2f69196388ad42": "380", "3becd17589ff4fd48039c786cb10b03c": "137143", "5fd3cdf947234ec1aef324abe6010d27": "23.999999999999996", "d83f6bbcf0a643d7b7862ff5582c964d": "Error in executing code: list index out of range", "4b3a599e477d464583ea098f7f19c7f3": "256", "ffcb49dc397848448dec256f4cf6cfc4": "64", "e4226d4153c64e24abebbbafcd108013": "36", "ac4f21aba98b4d06af8cee35f47e2ae9": "418", "2b51b5102c99457aba59503778b97050": "18", "ce6db059afc4416db4371309b441cb6f": "200.000000000000", "58a2ea19984040f08ada7a1db8f800f0": "Error in executing code: Cannot convert expression to float", "987a9466b11549ad85380d65bbbd2480": "400", "abb882ad2f8941af8eac51c284810cd0": "False", "6c75f0c0a20e49ca8cfbe7bf1febba01": "88", "a2b2791284184d439566f5129d3d4936": "202", "ff80808149990d5e0149d2f4ceb3771c": "10", "e38dfb6d0c8e459d99d2f5966cbeb384": "Error in executing code: list indices must be integers or slices, not Symbol", "9d9054f14ed649bcbe60926f4ff54503": "8", "d913f8d5145049608d614b9286b67bbc": "1426", "2c596c2788ab4cdfb80dc37aff0503e4": "9.99999999998999", "664853dfacd44aedbf437d18a22e2c8e": "10626", "8a0d0303d4bd487ebf7af0db2566ca38": "56", "44d528b1050440f7bb77e39cbac82504": "8", "1029e69e239041959a9477b1d3e72067": "404", "3abe8d794e0d45a69b1fe0bb325fc12a": "None", "47a1fecb2db24b53863548e65e302713": "18", "ff80808147248448014724de517a015b": "2010", "8e49df0c1a614d35a42c0a438b73ccf8": "10", "8aac50a74ebadfde014ecd2884ee3517": "81", "8317badeaf5840a886788679a87141c4": "1", "8b3d5e2cc2314dac908c035a099154fa": "68", "b83c11318a064d8c9a504886ea51d904": "12", "234d02e619fc4d56b6e6d4547443046f": "200", "4b43865b89254caa96fc85154a53d1ee": "59", "ff8080814a053ea9014a13b6a30311c3": "104", "717bf98ddbe848d294b5425ab17855be": "36.0000000000000", "e322ff6724f24950af4f8603f1857533": "150", "cada74bfae664bd391daa46ed1f53c7d": "33", "8fe4ee0c6b2f4d46a9e0cce77555ec37": "20.0000000000000", "2774dc5babd54a23be17c14e75566a0f": "4", "b15a5582bb90495b8e8c3b8286b233d0": "(137, 274)", "91291d225d2a483fbadc92289a2d1f2b": "1434", "995416319ea24dcdaf01973e012675b1": "5.0", "a35091afdf3f4e3c8b206ad47e6f66af": "2017", "a3c21460f03445e7b591726facef6f57": "30", "17d2397d26f44b1d93852610b53ef81f": "8", "9b7af6e76a0547408a517fcdae5ef300": "9", "ea2dc86b1b16490bbbeaf10082c75bf3": "250", "ffbd4db396fc4e7c96fb7bd6f05dd499": "7", "5d27942af6e9471b9cda0332d0d894bf": "300.000000000000", "da1559f686af40afab6dfbff79cce588": "Error in executing code: The matrices have incompatible number of rows (3 and 2)", "78e1ff677e9c489d88df2f83d06cb59e": "55", "db1bee658c5f4456a2009945740b653f": "26", "f8b61c7cdb9548279d4197fbfbc9ddf1": "20.0", "7eff91e096aa4068b5588676aea7b65a": "45", "db99583fc4254a5b80d769a6a481bf59": "-142", "211641ac366a4c80800cdd43c30908ce": "4", "c4b8f37d5be14c139561b9302591061b": "22500", "ae5e0d6c82b244e4bc646f7d2d7ad215": "383.999999999999", "99ad74811a57472fa37243e0dd4200e5": "108", "bda07f23c45c4b72a36b52ad44a883a1": "264", "08d5920f306f4edeb69cadc1f42c46dd": "1", "0769614cc27142f19023d67b0075cba1": "550.0", "d9d75f0c0b534a98bcf65df9a99392fb": "3660", "72a824a1774840c3a70cca524c83f749": "20", "4fc3aea38840487194cc815d44942419": "Error in executing code: equal function with more than 1 argument", "5a725e973d464e5d906b31d981eb516c": "500", "1d2c224bedcc4a8a952d55c51a55e9bd": "50", "ad48ae2f0d08422693017165fbebd13d": "32", "c4f4814891e240879a4add1cfb18a26e": "168.000000000000", "2d97cc7dd3f849ae8212436a1589d32f": "None", "e529b3620a7b450cb80969a902ff5eeb": "5.0", "607428c11afa449d9282e9acff70d47b": "Error in executing code: list index out of range", "af40b92aeb9e48b195b9dbd45cac3689": "3000.0", "be21c69462b5416888d12d4052831e2d": "Error in executing code: name 'n' is not defined", "214529e0048f4b679a7ea5b2b4e79de7": "9", "3ea786cd56cc4503bd4ec6457756475a": "6", "3ab9a77473274657871274058807d8b4": "100.0", "a070e458fb7b44b1920ffd83054e523e": "10", "6fb0449324fc44539009b1dfb9e7ba13": "12", "2acca4f6b7bb4c09ba0047c095f35d24": "600.0", "894a6bd244794bc6952b0f9a0441f9fb": "14", "7fc22cb010b34742928915c14dbda4cc": "2200", "d08ead43d26e4dd495294f7787823bb8": "80.0", "ac137bc0527d4d4db07f16871b9f334a": "395.8333333333333", "2d3fae9c061248ef9afba195ed028f7f": "Error in executing code: float division by zero", "610636d3a5814a8d98e2f710ae7cded8": "Error in executing code: name 'solve' is not defined", "a268c25acc294e1ba151ec6c7cb3dd1d": "60.0", "879adf947f4643d18dd89b1318dd22df": "2012", "78dfa28fdc054150b088de74849f302f": "-0.854861270550576", "089175e8ceb64bfca19ad20a7f65e4c3": "400", "605795d83e5143d6ba73f3f2d5431bc8": "12.9722313757914/log(2)**2", "b64718c1a2ae4991bc5e2c08ba329c19": "None", "e00ae9a2af5a444da602f85164355b5a": "2001.00000000000", "f6f1862d19a44142b000e310faeb6f5f": "-30", "530746b8ba584b7a9249b6b5cbddeaa3": "0.375", "861c43951d7d48d9a743afd5ae9c93b8": "Error in executing code: name 'B' is not defined", "e063339aabe0433da29fb28fc95279c0": "1.2099999999999795", "11902d98263e4aebb030e68f52b14894": "Error in executing code: 'And' object is not subscriptable", "071f6b80c57c4c1aaad80ae834f8f7a4": "240", "31a84df77b9e46caba05507c9bd8a81b": "642", "0c8eef8fe9f14697bbdd559c9f220c60": "0", "c2485fa82a25484a81eb2b9064662fff": "660.000000000000", "660ea760c1384a6ab0b58f9cb2458c5c": "27010.0", "1c306ab144a74a87bee66438b05eed1a": "118", "c4eb2ed5502841b0b06094a8da4d9f11": "6", "3941f5a072a145288a00c0c5de4880b3": "13501", "23f286651b404d2b978eefec757a0635": "728", "04e7412b5a784ccb8c37fe1fc5c9e6fa": "Error in executing code: \ninequality has more than one symbol of interest.", "99c51bfe8f0a42deb67fd6d5819d6441": "-1.00000000000000", "f775f57105df4f9aa434b823212730d3": "10", "76971737bd3045779b73a2a57aad432c": "0.0", "9005ef3bb96e4d868c776b9efcc2aebe": "Error in executing code: invalid input: C", "b03aa7f06e9f41219ffe8c9e6bc4b11d": "3542", "46334e456f224f84a511f42b92533dff": "Error in executing code: t", "6b23dd4c73754cd0a5778704a6095e5e": "None", "fff9af3b3b0c4c5d910716cd2438dca9": "16.0", "4e7ec2bba12b4d8a9861877b5e56d2aa": "2396", "da00c91b5a1d496ba276a0b3881e9eab": "Error in executing code: cannot access local variable 'ans' where it is not associated with a value", "cea3b2449fc04bbfa37a8ae90ec85c75": "10", "d9854a92cacf47c5b1599b402d541436": "Error in executing code: cannot determine truth value of Relational", "c9c4155d9500463f9d1e37c0ab50d459": "90", "13251f8457464becb07d13ea9f106df6": "1.5", "0dc1ed1897174847a89bbd4391e44b83": "log(6)/log(335) + 1.0", "105beec3f54848d296af5a2931233d62": "275", "8aac49074e442d81014e4d36784826fd": "Error in executing code: name 'sa' is not defined", "da8c815fc65d4cc5987c6e839e5688f4": "17", "39c95b710bf94607894b94124bef6a2d": "54", "aef5cb465eb144d3b591db7fa0431082": "Execution time exceeded the limit", "5b566e57df394b28a497672bc3d6e139": "8", "01b9a5679aaa44ef99064f78f89b9a13": "29", "29e6a66aef864e6ca0e86c43fd90d34d": "256", "34106672192c4660aba03d406844e55c": "0.0004943153732081067", "7493191deb154de6b4666c8c38b368dc": "4", "2df79d5cf941466787b97e52f73a79da": "3.4999999999999996", "6a3028e17150468b8fd82e70f712b301": "4", "f52222e2d82c4a9b8aac2b6f0be17af0": "7", "3278f383218d441e89c5b43392095d85": "1902", "d31141bfc41942e9bf8ea881786a7771": "Error in executing code: name 'Eq' is not defined", "4e86e07a71ba4a62afbe318cbf95c0c3": "-5500", "f31d055503694f6e9c78a5280fbb9067": "0", "fd7e9de986654a74bd5c4c3ee2dd22e2": "550", "400eba2b346c438e8ffc2b4332a514f8": "Error in executing code: Equality.__new__() missing 1 required positional argument: 'rhs'", "be1362b05046462d871fcb78cbf4103c": "140.000000000000", "62a1d83069634a4fb4fff6f7667b58b5": "15", "4235bc2bca25486a8d34054b6db45131": "Error in executing code: name 'combinations' is not defined", "10d604e58ed34b578dde1add973ada3d": "84.0000000000000", "4364bddaf3f84118a8c427c422972019": "102.0", "2e6505a4f0cb45a2b7c477f26bc5066f": "80", "8aa3d94ccea545c8a0c67822e1b98710": "691", "3e93844222314a4f98f694e1a0e3f25b": "12.0", "d7fae7e84588413aa27a16835c8492c0": "6", "f4c9e9b3189c4b899140492d110b3a8b": "40.0", "2f64d272e49444a1b2394f6af734eeec": "16", "f6b2757852d04774a988c3fcd366e0de": "8.0", "aac81f699b38420ea95717e62736bd03": "9.8", "c3d08c841a474164a396c9a8aa8b0d85": "269", "4bc07cf2de6c4f9483710f9e9ee18957": "7", "370f2923618343fa8c99891a25eb1909": "4980", "7f4fe065f4924eea83357e923ee5d382": "751078", "40079524d93d476c9d972381527fe7e3": "0", "eac51b1acd7348318973f35bb6076a58": "21", "6329b81143df4ef2a9a0e66da6b584a3": "-150.0", "5f815c5509b746aab7ac75b13569f6d9": "12", "da377cdc042245059e68333c55ea16d7": "1814400.0", "dea3708d05ce4787a3a3f7ac3b18c4ad": "Error in executing code: list indices must be integers or slices, not Symbol", "ff80808145cc51010145da451cec0db0": "240756.0", "b52c6fccdb6842f59b70e2fb90f34496": "315.0", "fa8df1a10fd54383a6c8b354cea58e5e": "53", "d93bad2717074d6babc4582b503ea329": "Error in executing code: Equality.__new__() missing 1 required positional argument: 'rhs'", "aa8686bc18b74fd3b399d7d1a551b006": "20", "2e84c23c65794d4da60efc44aa6537e9": "1.0", "3f51f665a6604e6aba8dad92332affae": "9", "60583371c96d4204a3fb484225fb78ab": "14.4", "ffeb41ad435640d39a66fcb36e6d0414": "999", "444b33fba6c54172a34945089a7fb663": "22", "c8f6ac2ee15c438ab20ff7e0f3100fdd": "58.0", "72b2799f0f124046ba189e7ab49dac6f": "40.0", "0e1cd9d056ff433e8d5ca4d2d891a29a": "68", "f0f35430fce4439ba40e782b157d3dd7": "12", "86b651e0ea61449f96d552df9d0e358a": "None", "8374521141a94e9e88602df9fa42e574": "4", "0a334425543f497b8dff1d86aeeeeef9": "None", "05e7e12c7ec245cd860404720d02b318": "15", "b5854664875a431cb0203ae9e77fc375": "nan", "ff8080814638e133014656ac67cf3264": "Error in executing code: ", "3e4a9833098d4324bb1074ae2628d8d0": "25", "0cd9f35a72ed425abc2e5876aa37f29b": "Error in executing code: list index out of range", "a632084f23f04ec8a679b06f6f20394e": "30", "821ccb1757894e9db88a6df21fe37607": "38", "6c8b4cce4871482d89c6aecda44ef61a": "28", "78730eacf4bf4a9e9db942f72f55a576": "37", "dbc045b93bbb4826bb868a5bd6d8fe58": "11", "f159507300434e1ea2c9b496d5e1c592": "0", "a29003c13e5d4bfebe4434fa5234f0c3": "2021", "ff8080814502fa2401450bc75ae115d8": "10", "9236354cbf45446dbffc5d9f5d29bba0": "8788", "934ab6ad77c0404495fd3e2e3c79587c": "12", "6db67a376da44153b8f697ce87d7e554": "80", "ff8080814518d524014526a6523e1927": "1", "29e3f0916caa4b04a2c9516fc98197cf": "171", "3c561bb4efd048c0b3a9999b9d9e0324": "1", "b1ab796f71a14d26b3d97d42922efc47": "1", "1cfc17fe8fa34a40805092e37812c0e9": "-29897", "d629913739874ff095fdf9bf799c5b74": "5", "77537179bfbf49858a4b461200e610a5": "Error in executing code: invalid character 'ï¼Œ' (U+FF0C) (<string>, line 1)", "e404fa3caa7246c6bdb61771cdc06651": "15", "87f88a32e6cc4f479183b3fa93c3a951": "0", "d4fab23ceebe4a3faccb239db88ffbaa": "46", "8fb785194e8f44a3b98dd0a716be62a6": "40294029", "d08650d9d69a43c0ad88157f39fedced": "30", "63bd6ff5a60b4a93823119a3871e2838": "24", "022fbd08f3b8464cb3ff196bb75daed9": "2009", "40be66524f4140ea8db0f3112d306d7e": "7.777777777777779", "6b0672b8d2aa44fdb6b642311ff28904": "1771561", "44699706b55e4142a3bc8ca7467c5e4f": "33/2", "fd2627cdb55c440296096ae4addd7c10": "56", "02e8cc99a8f3467ebb8a031b2671675f": "23.0", "398801df6787476698ba53778b9bdf06": "21", "d251a1fb34c249bfb53542edcb11dda9": "407/6", "c0cd0215028543d1bbbfac6313815cd1": "4", "60f8d8fbfd854b1b8146dde6d72cf4b3": "180.000000000000", "2351a098f1bf487fb7a49a248d3a9a2a": "2.00000000000000", "19d7933576c046e0912e43b4749d9d72": "3.00000000000000", "0e237cef18b64c76b0f7b9b09e784a7b": "7", "5a8aa17c78a943d485150bb7c6c1ba77": "4040", "e82613d684204fa6be98a5f5edd92e65": "Error in executing code: unsupported operand type(s) for -: 'int' and 'str'", "898a56d5bbb24d6e8989e3a0a3983e0d": "3", "d0f82e64075f4cc6b46b577b9f2d486e": "{x: 20 - y}", "efe1ed04a2604bc290e73a254aa76fc8": "Error in executing code: list index out of range", "7c1002053f3a4db5a8bdc7383f813dba": "Error in executing code: invalid literal for int() with base 10: ''", "ac07db3dc9a64165a3ec161cbc753d18": "52", "4ac2f84e36bb46d2a1e369e2cb8d6907": "154", "134668eb250a4426a86e8a2a1c534513": "-2113", "bf45d883cc9746558fabf1812159a567": "0", "b7721b0e2863433b8dc18f1ec1cc285f": "2", "e094928a73c94057a0db41652ffce6bd": "6.4", "ee771bc0673e4067b4192a6793d97193": "5", "c89a56a58b4543a8820356fe6c52d287": "(-1.00000000000000, \"The shop owner doesn't want to sell the item for a loss.\")", "66a2cd9766c440baa86fec778effbd09": "4.0", "de9738beef074950a3ef5ec4301acc2b": "235", "432add3dc28143dfb0e5ea638c26001b": "18", "ffd84bed1c674f78b9f0a1fe536ebf6f": "28.0", "ff808081488801c601488c223b010db1": "60.0", "339c2570749e4bdfae106901893962aa": "0.42999999999999994", "89e0bd04ad834b2fbb1093a7929c0abc": "1160", "04d888fc7a4a4856a763612a3086e45c": "Error in executing code: list indices must be integers or slices, not Symbol", "8c3ad9ed3bd44d2097c50b55a6582195": "Error in executing code: invalid syntax (<string>, line 5)", "f8b6b35785ff4f1dbde662c5e848b190": "-1997 + (-1/2 + sqrt(5)/2)**3 + 2*(-1/2 + sqrt(5)/2)**2", "06f79a96a62847369cb84b8066489f7f": "403", "bfca4da90ff24dca8dc5dc43951df126": "5.0", "4a62bb9cd4ea4b69ad92e898874f9c19": "Execution time exceeded the limit", "73893595d1fa4e9c8bfc02c9aac595a9": "11", "e7e412875f854bd59548904a0ec31b28": "300", "475d791176954699adbe05c907010501": "-2.220446049250313e-16", "c006b5699c8d4f4182f68c87017eb440": "4.0", "44dcfef701454d6cab992abfad961c07": "0", "3c1b41bc04ef43f9af5f06827ec73214": "-39.3823529411765", "3222507bc41e408a80db86bdcf54c1a4": "1", "956e6a7a2b10435daecfbaf0e44de7e6": "4", "9470932e839d4e7a935f07dc74bacc4e": "840", "ceae6c7b881f49d1b67081b4ab0305c9": "560", "92ceea4448034aac9db4db43c2b2102f": "612.5", "f8040e69f3a2418385b7154635d830dd": "Error in executing code: solving Abs(q**(7/2)) when the argument is not real or imaginary.", "2a896d2ea0cb4dcdb6c7a9816b5af089": "660.000000000000", "333fedf230ce45349b5814fb0ccd525b": "42", "08db0f6ecd794f4a943a11bbf86c04a1": "98.16666666666667", "a78c08c759f543c09db8b968bcf30b5c": "12", "d0c8422053384e2189b160721a8cbc4e": "9", "ff80808147c465b80147c6859e880373": "40", "4f634fcef03f4ccca55f72b2ed352364": "1200", "726a9a5f19a14d8b8ab9a8eb79dcb7e7": "19", "b319807202874480ac632e8116b8eeac": "65", "e102de46f1fc4b52b12cc7a04e02fa8e": "Error in executing code: No module named 'scipy'", "6b3cf87b5830472f87d348f1ed12511b": "2019", "1530e33e63114741b0da432d39d5190d": "2019", "01921cb33cd74a27b410dd8e2da0bc68": "44", "bef7304d18624c7b8e0c3f1d5b6cda2f": "9362/265", "d5a5237e28ee4ec58b8a8aab724a8a8f": "48", "556bdf476b174f0c9fbfe01ed8ff53c2": "16.0", "04c68b7e42c542838d25917f5d3d92f1": "13.0", "549baf4063aa4f71888367ec4c6ad2b3": "None", "5a767aed59634e36a7a266842f0d46b5": "25.0", "d304e576c861453195457caa25647775": "4000", "0a6fb7dff9f64994b33e59005628cdec": "Execution time exceeded the limit", "524f89de67f1441489016f137cab07c2": "10.0", "a36d93ded92c42f0ac80f1540d8ce43f": "6150.00000000000", "22fe8d81e465418fa1d69a9e16189ef4": "8", "e448cbbf75ed45f4857ec2b2308fb249": "5.0", "e7e01dca7b8846ee8932f42bb174a8f6": "67.20000000000002", "f549a42f0c334121835505fe52ce4bda": "5", "54bdce4afd93405fb788bc078fac3500": "4", "577a86a8e3314319b17f52d7aa8d10c7": "73", "8cf9b14564c84d599bca827e151c6589": "2", "f359f07035474999b78b659019e9355c": "61", "12830e3cfba24c5c809a86180dd4c71d": "1", "00b017fe38e34d97af0cbcb995c0f169": "-12.8", "253bfafe9db64bb48824e75e7dd42786": "40.833333333333336", "ff8080814526d2f40145309113a92cc2": "75", "1f89dbe1b00e4cb4b8bf78992f087ffd": "[]", "c7952202a3f246c9b93bd96f3d5e6479": "Error in executing code: list indices must be integers or slices, not Symbol", "587db988f4914e348e0b8e8571e6410e": "54.0", "0c1269d9d7534c368ca438cd79975f5b": "40.0", "be5dd5e67baa4d01970aee182cc7ceaa": "0", "7c1aed0aa7f64a1ea496eb080da6a54e": "1", "999e726cc7cc4b6888521ef33e67bffa": "23", "ff808081454b3100014555e680131853": "3192.996782999999", "b292d3b079504b2998cf1176b97e9339": "153", "903cddc1b62f4139b2a3fdaa0c2169f4": "Error in executing code: list indices must be integers or slices, not Symbol", "bc4b698858464d39b488fff52e13903c": "0", "a6dc4323204345f8b0ba31b6b7ac3639": "39", "6cd04a89ec6c443b89e2211bdb01646e": "6", "abac1d382ccb4d44ae5d2422b761a2ea": "5329", "37ae4258d5e24b5cb6d1ddd742c1284d": "48", "23df4cadc0e64aafba4da503fde99b88": "4", "65496a9e716f4bf397844c934fe46f28": "0.25", "e33aade71bd9419f8627e7c348c91564": "900", "fe6d2f725eb549189a254a536bc71bea": "205.0", "83bee51f3bec4a47b26b48a94eacbae5": "[3, 4, 5, 6, 7, 8, 9]", "818b441356104a998553c4b9421ece6f": "91", "78947e507c7b4d1ebc453540b1b4628e": "50/3", "c0bbb094151f4a569a14f46365f3d5ea": "10", "e032ef8ef8ad4eb7b433f1a9ff46c31f": "49.3333333333333", "5f3a6e38e5a342c8bd9b980048f80e92": "66", "1cb7cd3bf8eb4018b78c0474a44117a6": "129", "4feb25f227224b8dbd59978a237ef189": "2^4 * 3^1", "6d1fb3318dc74cd380c1afa7d95b6a9e": "743", "d1593906efce48afb8aa1de9093acf69": "1817", "9dcac13519ad4089bb83ee4398023ea1": "100", "b7bbdb074def4a0a922f08f16e7a03f4": "5", "f4afe146dd914bfbb43ecf86b5ef5d81": "15300", "4d4b862f8832493699e693884d565ce2": "Execution time exceeded the limit", "cfeabb28aa4c472696d4397f8276b053": "89.0", "83b6eb324faa454da89b53ef1756c0cf": "Error in executing code: maximum recursion depth exceeded", "d497adef1d7646ee8067e62952fcdaa4": "Error in executing code: 'Symbol' object is not iterable", "f9301464c19445798e1634dd469757c4": "29", "ea62057d9fc842f7a024731e7fa20ac4": "50.0", "73bdbe9bc798411ca137fa78564724ee": "Error in executing code: SympifyError: \"from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()from sympy import symbols, Eq, solve\\n\\ndef solution():\\n    # Denominations of the vouchers\\n    denominations = [10, 15, 25, 40]\\n    \\n    # Variables for the vouchers\\n    a, b, c, d = symbols('a b c d')\\n    \\n    # Equations based on the problem\\n    total_vouchers_eq = Eq(a + b + c + d, 30)  # 30 vouchers in total\\n    total_amount_eq = Eq(5*a + 10*b + 5*c + 10*d, 100 * x)  # Total cost is covered by x pieces of $100 bills\\n    \\n    # Solve the equations\\n    solutions = solve((total_vouchers_eq, total_amount_eq), (a, b, c, d, x))\\n    \\n    # Since we know there are 5 vouchers from two kinds and 10 from the other two, we look for the solution that satisfies this condition\\n    for solution in solutions:\\n        voucher_counts = [solution[a], solution[b], solution[c], solution[d]]\\n        if sorted(voucher_counts) == [5, 5, 10, 10]:\\n            total_amount = 5*denominations[0] + 10*denominations[1] + 5*denominations[2] + 10*denominations[3]\\n            x_value = solution[x]\\n            break\\n    \\n    return total_amount // 100\\n\\nans = solution()\"", "8fac45dea62b474aa5e2cb0d020eb77f": "2160", "d98cc7e09db7494bbbc13b093cd18a77": "16", "f1c54e71401d4656b381334d6b7d74b2": "4", "9db2e0eebb714473b9a666b4da931d50": "12", "0f845ef0809c48418eb4b0d40cb875d7": "18", "3dbebd8a76234d58b16f14ae37b1cc1a": "1102", "270cc454a7d94236adfc987b0b30cf6a": "Execution time exceeded the limit", "baa5ba53165343c3b94ccc5e54547dfd": "20", "0dfe5fb23eda42939886692fe4074d44": "6", "09d34a7725e04ebbaa7ad3ebcf09267b": "94", "0f3c2456c0cc491da1a924774194bbdb": "1.5", "1c69f19b28ca4735a73c59d935ae30e4": "None", "a0476eed10d04351800fc962e07db9f1": "20.0000000000000", "091a12ba5d894deba0cdda15a1265d6f": "Error in executing code: Equality.__new__() missing 1 required positional argument: 'rhs'", "aa1c792c8d3c4e018d16660b166cde51": "1008000", "b87f78646f7e4073b32456b5184e4b96": "12", "ff8080814638e133014656ad23433271": "None", "9ebd2282430b4efab24769bd13ad1a60": "422.5", "677eb92b6409485d95e62481736e34c8": "981", "1effa4fcb87a4f7d8b85b27f55b1d924": "14", "c65200ffa3b148649c052fc15962fb09": "20.0000000000000", "379827f1a5a14c779421140e48279afd": "945/2", "039fc881fb944f7696557926f9a2dd91": "14.285714285714286", "9bac178f5b164e869d423f64563e5150": "256", "34c2c9c5817c4b77824d45ca067664f8": "1", "667d9bc554b34f5e9c8026e53ad6d664": "924", "bf1b6c2b963c4b9280348d3a5918d9b0": "0", "7cc0b8e32bd5493591b898d16f6b54dc": "Error in executing code: name 'symbols' is not defined", "b60be1fddef4472a8d3c76f24db419fa": "1200", "f07ddf4f2d0c4120beecd50a907a3670": "[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]", "b5b4f1aec81c4ed0a88197312c7b655a": "4", "6ada139bd64d41539023e657c5548d44": "32.0", "a707cbcbda4744d4b04e10ab17b32a82": "35", "ad7c8ecb74f246d580ba0d6009f1e3de": "3121", "2e76c012f593452a8fc4dd52a06c1e7f": "21", "da29bca9d62d431da0fd2d881650c2f4": "649.3", "a37e5c4fa21445f1b3d6b32f858767e8": "53.99999999999999", "0683e0972a744b05aa7a57cdbc0ea455": "None", "a80d684d939f44d0b359d58fd525cb3a": "-inf", "ff80808145a7d1300145b12468290776": "35.0", "15fa5709dc2b45fb8d9068b7029fc755": "10", "bb40177835d047d2bc3f318e40837ae7": "330", "c3d2fe543d154435ab1e43fe6aff86be": "25.0", "3006a5baf8d24c01a502051436b620aa": "216", "3b2f377d8ca24827b2795d0dede84b02": "73", "b72bdd1f41bb454f809dc3ca205c0a12": "55", "590ac962318c467e941489d8d6354f44": "10", "fb663400881f4834a16a29d24c2b2272": "233", "278be29facd14ab3bd919cb5fb454920": "480.0", "5923db314a6e4bd5bcb5a197ab9aea18": "3.0", "b7f0974392204040b40987d54dd62c52": "33.0000000000000", "54de3b72dc894ee0955820630bfebb29": "19", "a5e83e95c37047deb03ffff559eef4cb": "18", "729f0d6d015347208880f887fff6d583": "0.200000000000000", "63690b8f63a84b46aa04124ee53226c9": "None", "d15d039b8e4d4982865deb0fee612671": "1", "cc5c4b9d7bcf4814a6534d799f8a06eb": "81", "328dc65f6c134e7882f5e36b3febaf70": "545", "6b6892c6c7594a6099539778113cbcc6": "8", "8e0289f98e2c49d9a8c9ebc9991a4ea7": "44", "54e662f222244f47af89b820a63a44a0": "Error in executing code: pow expected 2 arguments, got 3", "d7155a14883248a9bb35a441b9c398dd": "85400.0", "762e6ccc95734c3baac13668074c1ec8": "1", "4f38e43a415c442f8f40bd3fcd831b4b": "5", "06d74ca5bbcb486aaa274cca8e2393de": "11", "0575040c71fa4527867ec925de36a361": "900.0", "956d05a984c94f02b0973351298d6117": "No solution", "ee64ea2aefe94c1e950e51b97c3f6d0d": "1089055468875", "e7fc29b9c64e4d89b0bbc7e464101abb": "45.0", "6b7ddf76c782497691fb0eaa86eb0722": "60.0", "a7340064971a4cdaa6005af889e11ef2": "42.0", "f470a3135f1542ef94e534ebc3a6162a": "1", "f57935ce70984f0d81dda9323c891fed": "92", "5b071ede47c847e4b214bf3aa920ec84": "13", "7fdf834b71a444e0940c22bfaae0a9e7": "264", "6b78b059c01f42638891c7c310695a21": "200", "f6429d2ea3304f01b32d92aa89195caf": "25128", "5eafe6395fa34c4b9e7c17306898469c": "3", "111e488e22de48f6be16f43d418c7ec0": "756", "57502270bcb74bf8b6e958f7ccc9b56e": "2151", "d081355fc79a4bcd8e2ca5a4cbdb3404": "Error in executing code: No module named 'scipy'", "799c73fd634144419959354f344b3303": "11/6", "91e660f6cdc743a9bac580ce99a81d77": "Error in executing code: cannot access local variable 'a' where it is not associated with a value", "e0e6c4df3c77442cb9eab24e93a0e49e": "7", "aefa952603a1433aa377cb902af1ff96": "10100", "6f7b2c54528d431a9a2a3086c5435a81": "17", "5e8118cb5be94bb086c8706fbf9a00c0": "7", "f0e79492bd684855b8add398acc221ec": "1500.00000000000", "8add476f3c3944a991c82810c181cec3": "201", "41b1e04a9a9e41de80983ab576a55b75": "5", "abf34d178e224d039c66ab155838a23c": "408.0", "f8ff2b08de2c4670a4e967fa81bb403e": "Error in executing code: 'bool' object has no attribute 'subs'", "6b4f05b8e97b434e926d6561567e982b": "17431", "6938e1ed04c341da9cd53c00b1505a19": "94", "179b2ac24e874de182b2e0960981a13b": "87", "55655023466c449388b1a969558c037b": "24.599999999999994", "a7a024fdf61744448cd1abd399bbc81b": "Execution time exceeded the limit", "d86aa1b86e9345978571fd324d35d71a": "12", "b7295e2b44c443279fe3ac9f98ce3c5a": "Error in executing code: list indices must be integers or slices, not Symbol", "c94cfea8bfb3453caf8ab1bd0f6e0bff": "10", "dd6172a8eb874e989dd54ce7d2f5d349": "480", "ed758d2730c14a3b8c5c590072624866": "127", "f1daa47fefe24d24b2bb70df11c22918": "No possible solution", "4a926a6173e84f2b8da51883ba7892c2": "35", "c506e4b7fa384c6d81773719368422b7": "Error in executing code: list index out of range", "a19c4f80208f4d368f3a5e27a5f9d79d": "None", "cf64976783e34df5bc35ddb8e14be8c8": "26", "9b56d47bbfcb4361b9a2e54c53e96be1": "1854.0", "02af6baa129d4512b26b182100c6a199": "178.33333333333331", "7c6da691679948bcbde5f219a9e8358c": "None", "e590ed567b0e4f0eae2f67075d459806": "58", "8b62efb5081d4445b4b8110bd1595e3c": "44", "b16a7231ae39409e8a5349b82ae8d4d8": "8", "8cfcf3c0d09b4a94b82117632edb7ff2": "10", "e6caddde83cb403cbf226fdf5434534a": "1.0", "562f26739bbc41c99bca0c05dd1b032d": "1", "117cd99b083f4c99b0ca89dda2ace685": "40", "7daa91b588e648548be8fa29a9d71056": "98.0", "754ee4ecf42246f5a5ac9503966d7161": "10.0", "ac8d023a98eb43bd829453b8c1622283": "0.5", "516e6b86add1468bbea2b420827bc8d9": "Error in executing code: Exceeds the limit (4300 digits) for integer string conversion: value has 4936 digits; use sys.set_int_max_str_digits() to increase the limit", "acab80d5a71b414191231841620143ae": "5", "f0dd05cad9bf437d87607b4f7668638e": "42", "d488a9386da642549d4797c45aa0ed15": "300.0", "41fa62ffe4384940bf051fb2c4d6d9d7": "69", "bd90a1dded0e4e3a8124665b462f36ca": "60", "07ee700953b54ffa8ce8b05cdcbd9b04": "41.65", "a7ee54adacc84e659066389b36795030": "15.0", "ff8080814638e13301464240fb9b0df0": "3344", "637cffb2112b4fa1a87863f1b9f27146": "7", "a36a1d6db0474f10823d3943af5494fb": "None", "ab11a02d5ad04e63936b33820bd0a644": "1020100", "d7f4027b9c4e46a8aabe938057b33a77": "15", "56d6acd05e2b43f7b9c2872e4d0087c7": "1342", "b3e1dd4187a14d80b009dcafe597890c": "0", "7542e27b29b442428f4b1143dc24340f": "-76.0", "246faec2d83d4b97bcdf5230cc87ca57": "Error in executing code: invalid input: x", "828905ebe9744382a9b12ad0cd5bed10": "6972.0", "b1196f7972034db6bbdc5d2bf0c28d02": "7", "edd257568b354672850c2c1ac41b5d43": "131", "5a8c9f54104f4bb79462fe3eb16e4fb9": "62", "001ebb68b1664dc8ac73b216bf670746": "54.0", "4c8196db99a64be08f4f893b5dd7ea08": "10", "90cfa862efac42b9aacfa8dffe25629c": "985", "0cfe1625cef942cb92733bd014dbb699": "200", "c58e8164596d4a89964b023734fcfa7a": "207.5", "4d3004027a134e8d929c582d9550f4f8": "97", "dc983cd7f62b41ce83936957d7423d47": "402", "64b3066be36c48bba9814272844e5274": "115.0", "81465b85b2674b4f8919588e31fc38f8": "Error in executing code: list index out of range", "a810c6e119784b5aae9fe4e0b4ab8eba": "21", "d56e18c50d8f4f629ab614da43627e40": "2021", "286340c228d448ba8cbc399e085c4a41": "None", "53fb0419f58b45bdb320ef367390438a": "16105", "7851a03ead7847faada0adce9060f1d3": "9", "aef843e3023e4d2898c722ae9c348e8a": "5", "c8029505f2d844f296879faa84d18df2": "143.0", "ef754ed729704ea3ae1f82d9b1b11939": "10", "9c1515af5b544e578c38c0d8bdc094aa": "Error in executing code: list indices must be integers or slices, not Symbol", "072c539bc0e04bfba87a473b0f2a86ea": "Error in executing code: could not solve Mod(pears, 4)", "1dd42cb088c844e19186c59fd66041cd": "12", "f35a1a2dd3a64a82b7f549104e5c0a98": "Error in executing code: name 'symbols' is not defined", "33f84e6a9c7141fea5214cd12fe56466": "75", "f723b5a42143447496130f4d805bec94": "7", "44fcc0986d1a4171b03ead5c03fbadcb": "46", "631d2d86c1cd4820b1c09029daa2321e": "72.0", "ff8080814638e07e014646a4512b10c5": "Error in executing code: 0", "f6560016dbc74c5ba1c5ad687e6e3e01": "52", "c6b32318739b49b0bc47703cba6b0a66": "90", "5ef68fdaaef14f90ba8a5ccf206872d9": "-1525.0", "048413aa59ba4d598dfd35ef39e95443": "0.0", "770de59a9e734393b0232d49548ce165": "15.25", "830333211aa14db78d5ff6ce71f30d6d": "Error in executing code: list indices must be integers or slices, not Symbol", "b85b324651be44ecaf58c78c410c4fb5": "262", "3f5d8ad53d0242e3afda753fe4e6873b": "88.0", "f6122b28dc984c018413e392d69469f6": "248", "b6d56ce0ced245f0aa9b46c9bbe3056d": "-3", "23360a35c4d143a988a83bbfa6ba5039": "1468", "641e32a256c442d3953a43ad46f12496": "103.0", "de9e3780d6ff44fc99da92085ff98596": "102", "5e3bb051878b4d6796a22729389b7aa6": "6046", "20e656081b98400abbae729ab4775503": "5", "2eddfb66d5d5407ca368faa9538e5f4d": "62.0", "e04ac257c98c4cabbfe1a59552cb7514": "5280.00000000000", "7c5e91d540fd41c1946cf0081e86d33d": "Error in executing code: list indices must be integers or slices, not Symbol", "037a1d3cd0ad4fb8b8b2b5e02a4fadef": "15", "cb4039a449384edb81007f3101177849": "63.96820665673125", "f1de43027c7447519ec0314bc75bdcae": "None", "cc63b0dfff834bbe9c43bfffa2d6b1bf": "('Xiao Su', 48.0)", "8389033e79cf400487eb3ab2d2509dff": "22", "6d8f6c8e94c643ea87e15160419a64c2": "16", "76b171217641431ea204ca2dbf3dc4d6": "18.0", "fcf3350df9d54e5ca770410f2a740e4e": "1953", "f2e871e8e08e465fb922a4e5d79f03ea": "Error in executing code: name 'Eq' is not defined", "940f36b1821046e2be5aae1d9bb756fd": "51", "70335638f8e9483691780db366fb646e": "13", "fe08ccb0389b4bdaa36d0f38f21d6374": "1.2842108210529262", "e347a867408e45a68df563cc661baf97": "87", "c04656b3c6d4416099edd0530577205b": "None", "4dc1f69934804acd8b92f4bc434d4622": "10.0", "490ce5c2d2364af7a54b9be4827895c5": "700", "674d0090f3a948e0bc5946455ea48684": "90", "31cda1ef1f4548138313aa565ee71583": "10.000000000000004", "4a7fde0b37a342b9abaaa16f8b764671": "0", "06e907aca0a24d0092c923e116c64027": "Error in executing code: ", "c11c7918504a4b7eb2a4382155833300": "6", "1663ed948e4a4775b57e879906a19737": "22.400000000000002", "4e78232b2b08495aa0d0d38ce6f1336a": "96", "c9b84df7ed374bd2b7bbba1edae2acfe": "3", "9f5ff08d287b4b4c98133ba65e243932": "84", "2d783ebddd9441fe8177274d90c28be8": "4", "c17f6e4fa6ba401ab31194b0e6e8a718": "60.0", "f34bef520c6244e3b8184b89fd1196d1": "808", "175748a05f854e448dbc55478d4f13f5": "5", "7660481b0370447296540ffc4011461c": "14", "d87f38dbf88c44d4a38114250c4b6a6e": "3", "4215c931ca5f49669c30b52e264e7c51": "350.000000000000", "73901e97382d4f90927f0dbea81a37e9": "15", "ca85ce50ee104499b9b0cd9c52375b0a": "8092", "3e46fd622bf34c6c9acdfca2c89a3965": "56", "72e586104f1543a2820d5c98d63b296f": "28", "35ffd5d3a9534408a2bdf03b6e1610f1": "1800", "e8d88c3985e04c00a60393ac9285abc4": "Error in executing code: Exceeds the limit (4300 digits) for integer string conversion: value has 8072 digits; use sys.set_int_max_str_digits() to increase the limit", "c94442a13775488ea7802e6a6ce8c2fd": "Error in executing code: name 'symbols' is not defined", "b95880963a9f4319bc4e456848849553": "1187.9999999999998", "00e4ed0f9fa94259b3695e31928bfa33": "625.0", "51c7abad8c944283afaddc6bcedcc403": "0", "ff8080814638e13301464240e7500deb": "7", "84ab3be798384d91bb6f183dcda04836": "120.0", "a69e125815324898bb9688ec3694a490": "77.0", "befb3ad2cea240cfba0cfc5dea013248": "34", "14bb9ace6b29473ab042e6902c0b11b8": "499.95000000000005", "412971aaa85a40858b61d8110104fce8": "32", "eafeac710091491da10c4ce2f362a18f": "47", "8e24f63b819d49b1b78cdca4e0b73202": "45.0000000000000", "ce64cfcb2cec497ab2f9b70ec39c5831": "3", "f9397298b522432eb54f859ec783eb52": "26", "7e3f9120263c4c26939f57fe630fedfa": "170.000000000000", "4840b2eb26d848cf954bdd1f9ad3354b": "Execution time exceeded the limit", "32ded78951dc4b3aa511ce7118971e8f": "28.0", "3caa24160d57416dabd631c345d7dc4e": "0.0448318804483187", "7dde56362efd46ae926c2094793de8dc": "Error in executing code: list indices must be integers or slices, not Symbol", "9c362681ebe54cedbf8b095156ca8bc6": "Error in executing code: name 'symbols' is not defined", "8ea1be910e144aa3b67a58319d04626f": "1030.0", "5da69d82ffa94d51825bf5466c8e43c4": "1", "ba2eb2f4d3894f6a853d2abb22362f52": "0.64", "0632b585da0640788d25129c91b27516": "408", "6d741642644d439c9260fd6e7af2b703": "6.00000000000000", "b801cbba3ea94a3f828d11d1d1d07483": "3", "85aa6a037bff47baa388a2ce264208b3": "34", "1dcff63e19464507ae11bb639070f745": "1244", "46ab5612b39b482099da944b9854fdaa": "Error in executing code: division by zero", "593276e0071f4cba9e0ca1910beaf7ce": "330.0", "a2d6ebd5e097488386acbebba769eb14": "27", "3bca47266b984dd0a7cf6f30d05f311f": "252", "617e569cdc1f4ee6935cc12b9ffebc0c": "750", "adac8f79e8fe4ae08155893fc94ca8b0": "11", "3d61641936b8482c8d5841444d761f30": "31", "9e19f930e10144e98e762e9bc2263646": "384.000000000000", "5c50486dcd274c5e90e55048d7dfa274": "1820/23", "89abf4f78075401c8436f90f5dbe851b": "163.33333333333331", "8f946a51853b4096899ede5fba94e7ec": "4", "4a2a63b879004d5fa183c93cca2b7dad": "21", "0324485618af4a83a9ceb74c5d36363c": "115", "c385e78ac3c54c9fa7e895873b4d97ee": "156", "0d69e32b13c04ca7bb44aada0fa98b37": "110", "d061ab25822e47e1a708ca2e0c191d1d": "None", "50038ab62e864513be0db379db62b55b": "4", "c0a3281191614406b01c43635f5e7f96": "46", "ff1d65dfba35466086478ce31df2fd92": "3000", "f926c71dc2ad48e0a7769acaadc8a92f": "4.35", "e81460c01cdf4924804a4f622f925711": "660.000000000000", "5340b619001241ad88eb3eef4b6d0901": "1", "eb0ebe7a18cc42bab9f196bc9fb83d8f": "64.16666666666666", "0abccbb1f560462fbdd88920c635e425": "11.333333333333334", "477e571e0e3c49c69dd063fb00822b41": "1", "3e0331dca1d24bb2b96ee0e8e19f0af7": "4100", "25db0961ed534905a560c67abe2c5503": "2", "048856891701438fb6d3a4cc5eea5925": "2.0", "9d86fd7ef3b54c00a0a380644fb908e0": "22.714285714285715", "2a2f59ff4cfb4cfeb2cbfe3ddd9420b7": "1980", "2a619aaf63df4920b9248a2a9386272b": "3", "4f01b2419ec3434a9f733a68798890f2": "31", "d6313ced46454425bcf725a5434f1ccc": "9", "6d129a4ae14a445891a9e31633ce073d": "33", "35aea7fdb99645879952aab06756671c": "530", "1fd73d193c85494a97e73186ae6c8f9d": "1500.0", "74b6ee638cca454897b532cfe7e4aa8d": "660.000000000000", "f49ba046dd3246f7b91eaf676521fd9e": "96", "cfd6d5cf6e6847948e7b9708bf1782a3": "4", "5180c80bdf5840449634415c80615dc8": "Error in executing code: sorting of these roots is not supported", "17ac864582c542c69c67633e649aade6": "321", "9aac401277c04a6bb322ee88c64382ee": "61", "d0f63e92feb14ae185e4d886b11b4034": "125.000000000000", "80b07af86362449b8b8056a88ccadf74": "2", "ff4880143bf5480a8b19e49eb2548d24": "1", "5319294b6afd452e955ace889b9bdf7f": "4.000000000000016", "4f9f49c565144071a2ed57c3f5012417": "194", "ff80808145933e8e014598407c0108c0": "8.0", "d628f4c8834c49f6bba18deca75c28d5": "480", "8580e2cd91da4d00bc19e32f8d71b550": "1.1109999999999998", "2df47e416f6744808efdd892ea2bdd8e": "7000.000000000001", "2ff233ad7c5949658db13f73dfba064f": "53", "5f8f6a0af1ff47da8b1c0a76d76e8162": "Error in executing code: no valid subset found", "4236b7135ae64be6b0c7973748dfa7be": "9", "cc1bae5c79f343479f2e1e3bc6eeca47": "17171", "8aac49074e023206014e4398feb670fa": "52", "a2eb43b3fb87433f86542d1ca6728950": "27", "39d004dba14846a99c77c547543d59fc": "240", "f32cda73fed94c3380bdd41eb4cb4137": "6", "62781dbea9174198a569e98f8425e93a": "48.0", "91d26e988fab4e07b1329c099a9f00b3": "Error in executing code: b", "a00fa7dcd6b846e4874bba5d542d5025": "Error in executing code: list indices must be integers or slices, not Symbol", "e6b5d04d356845d1b712064e00f9f0f0": "4.0", "9d7cfa6f18b24db6a669c80978439eed": "2", "66301a6e751b4f428f099f6d0975d47d": "38", "d7fe629b9dbd4657823d7e7621e477ec": "192", "f0f2bda920014053827d7ed347de9184": "10", "14650d1a23a046db96a6d713e2d31094": "92", "9ed8a3b47b8a42ebaf434276a20748a5": "27", "d66061f89cdf46c4b67c4a58e14b3d8d": "Error in executing code: Equality.__new__() missing 1 required positional argument: 'rhs'", "af6424e5ef4642b988ed64b63b37352a": "23", "a3d94d7c62394c9da92f602fa340d307": "10003400289", "63c610a303494922a40bf9a30f1d3f0f": "5", "b54fe1ca241048a98971d39187c8ebb8": "7", "005a229175cc44eba7049f0e2d9fb9ce": "3", "51b40cbf4a05441989ecbf57cff7ada6": "18", "18e5e8b0eac045e997f6340be6564b4f": "3421", "1cc1f5870853443b965d26f013a90e6f": "30.0000000000000", "8c7d99d63a2b48a0a4201fe2c1120d91": "40", "421dec41694647b0b37751ee8663a6cd": "352/3", "9656c8908f744657b6f68777a80e59c2": "130.0", "9ed364ea68e049cd8d250b01defb3731": "0", "2e97dc94b1284d418a158542e05a2ebb": "28", "81f80c6595884b07bc82827ff941ce22": "Error in executing code: Exceeds the limit (4300 digits) for integer string conversion: value has 4301 digits; use sys.set_int_max_str_digits() to increase the limit", "0735e7c596494d48866a1afdf93a90ce": "8.900000000000006", "0fa207cf1b074e8e9bf7c911e24793e4": "31", "97ee466b0b96437da273add7209bfc81": "-200.0", "1c20ec0d1d0e48259574250f81dd6627": "6", "d59acc85cf274574b9471328167db5d4": "Execution time exceeded the limit", "844c3a9f5aec4cf49390294921dda4d9": "31", "54354de5a87a43ac97315890025d96f6": "31", "093fd8ae09104290881255d120a96b08": "Error in executing code: list index out of range", "40d4ac5213f94ce78711d2edc3cdfd22": "4", "14d6da808ec14dcdac289fdf654af4c2": "254", "754b190504ab4ef69aa84fe0fec3dea2": "3", "9405c662c85c4304bc014a086962edb9": "64.75", "c1395d720f0848dc82a40bcda675c21d": "-1.2099999999999795", "808a46d5823a4eb2b1902588887580fd": "552", "e5938c4b0a0647b384986bd0cabb0844": "14", "798094cbb19d4f8c92d2b889cf576c7a": "10001", "de72d899b483421b8fec61eb1f71b805": "1.02", "4667b6afd242485483063173bc4cccfd": "Error in executing code: list indices must be integers or slices, not Symbol", "d2fb2e34f2ec4b0b99a586477bffd066": "11.999999999999995", "fcaba1fa7b644fc2a1e1d4e33a75f7bd": "8030.0", "eb99ee9394ef47a5ac6f8abe7411ba02": "1118", "97b602b55b8340b2b8671c1324669169": "35.0000000000000", "36475ae4b0aa45e699e943ba431c1ba4": "528", "abaeec78bcb74a0688036f8eb42beb27": "25", "fd7b28357997485f820e45bbab929d93": "305", "76230f3cb7a645b083f5628a46daeec7": "72", "08bf1df1e37f4cf38d3fad0c3ecb28f4": "Execution time exceeded the limit", "3e7572cf68094de58acd763a624c3231": "25128", "c8845428fae14844889c4ba14fef5763": "88", "35e30f0e9e24445393c833018797bdc0": "6000", "fcdeebe32294472db58cb18d1f28548b": "2", "cafbee8e4bc44707b0a21bf9783fa04a": "1518", "fbfcc94f85c047348cd384358031ab8f": "46.0", "c3114b61bbd5497fab07681cfad5e599": "74.9999999999999", "7f9dfdb7b53f4f79bcd511ccda3017c2": "62.5", "89a9d45ce00f4e5d81a202b87ff45df7": "63", "1180fff7e30d4e7a94d884516673773d": "57", "f231e2c1406a4487bbecc0b809833c37": "1458", "34e2e87059144b099149d5c7f08380fc": "577", "854618e06bf04a1bbbd8a13dc35b80b6": "300", "347c065445a24ef3ad455e2fb50df153": "15", "8c757950a2b542558e4fbe6c1137afbb": "1440.0", "878b2729b7864bc987c122929c69ef73": "248", "d4f3a301c66c4070aeaaee3bbe0fe095": "53", "464e91c9913e4f39b080eaf882ac03b9": "90", "57bd439eec644a57b96f92d396b92fcf": "8788", "9b7f7d5979f94cf0bb0ce935299de82c": "24", "3587859dec794026a6128d6077720007": "7872", "7360fcc396034fec9a4edd8ad88480d2": "20", "6fb4d9e6be7e4fa0a22cced7cd4b193c": "889", "63bc17a0bd2b45f8b4edc32e8a63c605": "57", "2feb646226f04487b1718095303c71bf": "-7", "ae324b41993e44508ac604bc66ebffe3": "6", "a3fd9578edb1435291212aa905b6e816": "150", "2b2fde2dffa14f759903e77b360e1b04": "13", "d3100281a658441baf54b0666c6b7d5f": "32", "507e7a6863ce452ab398cc1815d0e246": "30", "9f7c4bda918e4062a89436260bae288c": "6", "7feb653c0d144035a676fd194781d767": "11", "eee83af844164b26ac7306db9d37546f": "10", "845dce0baa5c41daa19711ef47af8a1b": "337", "63dfc3be5d2e421397c4d61c7ac7ecdc": "36.0", "f251d58b2ecf4b42887095f9ea67653b": "280.0", "18d23a2d4305404dbfe7f4e61e307b4c": "11", "a51bbd13044b49ac8f5fb2ef52aac036": "85", "f423f1c297a540a4838af8685289f430": "975", "af10bc3ff6534f1fbdcfee099b50464f": "71", "33553f56c8b44dc5af33f6d6dfb95911": "9", "4fcfeae045db419b9df9f670d5ca9d24": "6083", "02f9666785454318ae285576c09235ee": "540", "ea2077d157194117aacfe16e1256af62": "2", "6d81efa21e9149178b7f273d789b1e62": "100", "ebb50bca60fe424abddbfe82d32659d8": "12", "4134bb842103410ba1b3d3a728e5ddc7": "0.0", "bc1880ea6b6d4a609305157209f4c21e": "93", "5044b5b2c4724264a48392d3879fbf34": "100.0", "88839995a8414b1db7e3aa6d59bb885a": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140]", "461012a89a374f78a97277a4096b9dd9": "5", "0f7ec24d22834a2e9febf6742bddd6f2": "None", "80e037ef27ab41f099e3b5dd39711c6b": "50", "522f02c3ac1e4606a22ece735e527bf3": "1015", "3f740a9ac1c442e6be1e0d295e0becc4": "120", "0b8e53cfa24f4d039e966bdd1181d17b": "Error in executing code: '<' not supported between instances of 'ellipsis' and 'int'", "dfb33ab567464611aee1075e8a20769a": "70950", "0d019ee98c2a449fb1c297de27d8159f": "15", "ff808081488801c601488c2711d50f20": "('A', 24)", "3810c0f9d65d487e9993d7a091e111e8": "40", "93f63fb1efbf4e698c2d42200bc48014": "-6.0", "98288ce630244fad96a23881c146b772": "5994", "facd59e8f65c407591922bf498fcfeab": "144", "06ce3bdc476a44d4be27b3531bb1fd0a": "2", "6aee7ae36ca04854b2de4298d9af28c7": "132", "7b04cf63f12d43698aab3851d23a0d75": "43", "edb0a6f2198e4cbdbc2ddb649149700f": "3", "c36b176fcd4f4e2784e385b5f8978607": "None", "f0730bcb44d945a3a24f83467a1038dc": "Error in executing code: list index out of range", "98fb0f98beba44e9b05996b76f190d0f": "-819", "50866a7aa0964f5a9f548d9f714f42dd": "4*x/3 + 20/3", "ef1905130fc44e7984b74f43589aca94": "30.0", "ff8080814694a7d30146c8deaf434de6": "Error in executing code: cannot access local variable 'x' where it is not associated with a value", "48aecef22ad54f4393f25cc1285f52da": "6.214285714285714", "1fe9a4da18f84ea3a863aedf60737094": "6.666666666666667", "34143143d65b413c8fe105339ae32b32": "45000.0", "cdc3eb95b76e43dc8b1d5e4f46c1f0e6": "33.0", "98b192e2ca264a7581b89449377f528e": "-74", "08274e0ae7f84def9713b6f98f5296aa": "21.0", "3c090b119667429a962521b99d926242": "Error in executing code: list index out of range", "e132aa1e6d084e099590bf5b2332d27f": "169", "f7f9ea3d07ed4bd889cb4cfeda004dab": "0", "5ff0375bee304ffead89a3be408b04f4": "6425144144225.0", "a12c868b23f44db1b29cee868be19df7": "840", "a699456bb593484f8bd2f49a0655ae04": "10", "cf2f27ec8cb043f7af91b1763fc5f948": "Error in executing code: name 'symbols' is not defined", "df90d4799c364417a908bc91401f5410": "12", "ed22dc7cbb2e409fa741673e70ff2cbe": "68", "de5d3d68f49d4c929d726c80013ae6cd": "50", "44d6c33153e54cda8b6e2a280b565097": "6", "eb1315c934e34803b0f31765d06342dd": "39", "400201b13282449396211febad0564c7": "26", "b184a3891e55448fbdf0cf82300e9335": "62", "1aca9c2ae590454091b94726f5aa3387": "634", "d0775db284f441f3954c96578b31eb90": "110.4987562112089", "2449554ce467404aaa2d55a622a21081": "27", "952e846e33ed4a70a64803bb03444820": "748", "7ec16ea4d0e74e779f6cc49d7a3250d0": "25", "73927aa263264a8db248701f89687053": "35.0", "a80b7f31cb724e748b7b748df8578263": "Error in executing code: list indices must be integers or slices, not Symbol", "8a1c3718e13844589453fd021a2655db": "1000.00000000000", "fb7675b7cc7447f9935c25e95fabd77d": "8", "fe619dd102414cfd941253a613a19468": "770", "9eafec4f80aa4794b100c6361d948191": "Error in executing code: list indices must be integers or slices, not Symbol", "fca88aeb30e0413bb6a0e8eca6768aba": "75", "85c376d9e1b5402db53ff8549387c419": "1000", "23e238d1eab4473fa7d208b3723c4790": "22", "0823e4f4295c4ab4af0fc7b2f92d3578": "25.0", "5d46b80a95a94499b490007ef4a8104f": "10.0", "40f743c8a5a84b1483f1176e6984039f": "1200.00000000000", "12b3f9c519a243a19e04f136f25cff90": "5.0", "3223adcfd1474c98a3a3a63b0d58a264": "25.0", "61909ebfc0184afdab3462ba18699887": "15", "d4fdf9d18b8143ac9fe7164f465d06e9": "1959", "34dfa207d7814fda92931117ee14d5da": "18", "fdea813196c34d22adb40c772c016530": "None", "fc9d35ca13b541f8b51fd02c82b9fe51": "5000.0", "6634caa17bff4f82a0ed1f99adc54d39": "989998", "ff8080814694a4fc0146a3260fe21985": "Error in executing code: list indices must be integers or slices, not Symbol", "8f10e3d084004a7092866c706512676f": "506", "8cebbc46893d42b3b5a725d225a27ec1": "2486.8421052631584", "acb7262a82f241cd88c13d4b955b703c": "550", "3652d84eddc34c569f42b09f274100b9": "None", "8aac49074e023206014e43b903d07313": "15.0", "ff8080814518d524014526a707eb193d": "23", "5b31e94e115e49dda6a5cd2300dd1977": "25.0", "1fb80788b2234ae28079d895f4b38520": "21", "ff808081488801c601488c224ffb0dc7": "120", "cf3e9628ccf744fca252181dd667d838": "1", "6ad1e3bdf29b406d83f6d88f03f8da4a": "0.75", "672654b8430e4ddfbf8366de16b399a5": "32", "ff80808145644e1a014564b5aa9d00b0": "710", "f603e76b618b403e989af322a4213349": "179", "135bd5f2d25a4d21b7b699e98457f6da": "900", "18532103333d481c8695d28d62fd71d6": "3 + 48*sqrt(10)/25", "20ed22bb4d944f03b17b94c5b13175ee": "Error in executing code: tuple index out of range", "cb276b9eb6db44108b705277c61019b7": "59", "017bc002d5cb41b28719f2976b3dd325": "135.0", "4cb14b3ad3874b48a3fb9644c6658f89": "1000", "3e96383e481c4f5e8fc266c2453560ac": "2.4", "283d39dea6324e9995f693b5491e87a3": "Error in executing code: list indices must be integers or slices, not Symbol", "44a9c4e1b23c4310821715228965f3ce": "34", "a87d4478c25e4f03b439d1a77dcbad75": "5.0", "54a751da02ed4c4f9e2807c52721fce2": "Error in executing code: name 'Eq' is not defined", "9e58989afafc47689fb8bc88f69c63cc": "90", "502be74c4b0045248adbc17b54f126e0": "781.416079716080", "10b0b8004ebf4d2682802ced77ead3f5": "30", "6e2dbd6416c941ee8c3b6e5c3e50d979": "5", "f225787f74cf42d7b53c4e2a4334cc60": "1", "e3df33e01759484fa19e03994d8123af": "Error in executing code: solving Abs(2*f2 - 2*m2) when the argument is not real or imaginary.", "ce20da074deb4960b16e5525db63981e": "Error in executing code: \nCan't calculate derivative wrt re(d) + I*im(d).", "05d7c6fc421a48369c399a8f526d435a": "31", "9699ba42f9a14042923438e41e582155": "20", "dd850085fd25400b8e45512e792bfbaa": "140.000000000000", "86b485cf00cd4e72b9d2521cd6b42e8f": "1", "3564ef2a6ff347178e3dcf91e22f7c7b": "3000", "c6aeff179e784bb1939dc60e2072b837": "12345678901234", "1ebb14cb2ff44dbb99f57fc7ddba17ae": "72", "75f96ed8171d471aaada409c1e5fdcd9": "100", "748fce70af224af291a3eed0db9e7dc1": "9", "a1834e51b69048c19c70caae6489ad1c": "37", "a69e6ec519fc49db92109b743aaff133": "21", "b8f442ffd948419cbe1760a7eb67462f": "-442", "a76f932fa7fe4f1c9189aed77e3ad8ab": "Execution time exceeded the limit", "b4b1f81f769a4e68a80e7215ef639af2": "-30", "dee0c25273c44a47a561f05b411e00e4": "68.5", "14bac61836e0420798e5ae2a4b32ff08": "16.0", "0099e8ade4e14ad59aa4651ecd5d3f3a": "6.000000000000001", "dcf0d29891ec41b1b01b3bbd8ba745e0": "[2]", "a7cc1360ed4a4601a0dea28eb865eea7": "0", "0befc443e43244799fa8fcda450ffe33": "157.5", "e612033288944840a1550c419c267fb5": "255", "34ddb956b5f640f988ecf6130ea09bcc": "9984", "06d843fa9cd94da0acb306c42d60f97f": "649", "d9e7cade93734463975b0f01acc067d3": "0", "ab90f543d8564a5d8aa33a368a494c41": "8", "8fe8e6bdc334415d91a5eb92db453968": "1", "d7d47f6be66d48a4bfd2fb900ace9525": "32.0", "d0283282e20543e3a5d18676406057d1": "550", "c75a17241d59426b94828bd9fe4c23fa": "40", "242ed1d2daca43f2a4de59bf36f747ec": "6", "bd530804f9ff44e2bd847be43afe22ea": "17", "1d9f204902d54fd0b512dbd5e7a82154": "25", "431af7c7cf27435f855072ee7c6bc8fd": "54", "39933efb38244caba35fb5fb10c1cab6": "Error in executing code: cannot unpack non-iterable Symbol object", "70441f9bfb0844ea84b3799345d6dc4f": "36", "d170a51776554c7f8b7cf857d4c440d1": "1008000", "5c3e6950f9f44907bc8c8861e1080bf5": "1", "b7f985c5f7ff4292bfef67ae758d8050": "26", "df7c556aa71445a688d1a1df2324985c": "8", "f13198085770435c81be641c9e4bcf52": "28", "8a4d9c8b93fd415185f6b27b6f4e25dc": "144.000000000000", "2b764e14b90a43fcafecef307530678c": "1", "1fe6196428a9451eb87b8aa96c11776e": "44.0", "074a9fb91de445f2a33a836b873bc830": "173316", "e2c8be688cc54dbf83f87146c04fe9c1": "76.66666666666667", "ec7de71a62044bdd93b0fe6311d2a904": "[6, 10, 12, 14, 15, 18, 20, 21, 22, 24, 26, 28, 30, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 228, 230, 231, 232, 234, 235, 236, 237, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 344, 345, 346, 348, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 614, 615, 616, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 645, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 732, 734, 735, 736, 737, 738, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 824, 825, 826, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 882, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 998, 999, 1000]", "0d36c116368e4a4d882293641a00712d": "154", "84ad5a82c4d8453b89311e881635bfa5": "453600", "6bd6814fc62e464ebc23c8dc3a3cbcc7": "9900", "fc7538dbdaa948e38fc4aec3f53f3017": "13", "cf5e69d980aa42b9a153e278cfe55f22": "578", "9f6f8bc1cb434e72b1f87e8de5ba6ded": "7", "9fdfae7cecf14cb6944f72dcc76322a7": "630", "4bce3268d9f644389fe3010b9e6884a7": "8", "58c90c68778e4b46b4fe490a69d62f77": "89", "d74db5d509034bc6b986ea4f43305551": "13", "04b824d801634772946b5659ab6efddd": "4", "6a3a8619067242a0953f9cb86612ce06": "780.0", "38aee4f558864ad4802f4ecf132ef143": "3995", "9853e39b50474cab9c8601530acafa8a": "4", "a06f45bacd3c473e9415349ed9143f66": "7", "5ce2a8e396024a7292cc32a37fb4f825": "46", "405a8c35f9664d239e9df31ae5ed0a91": "53.99999999999999", "d158fe2d3500491c8d2a1a1e9a20ee92": "16", "59e1998d87a44cecba1f87be175f3318": "3", "498b29dca1104877b78ce06b874f6a2d": "738", "eaca823d60ed477282fe286c7b0b740f": "-0.5441176470588234", "c6e9c99303bb40ce81f32277d17261af": "(-2018 < a) & (a < 2018)", "665909d090e64e419d4764f1b738a5d9": "375 + 75*sqrt(85)", "e589a20f488a4c64bb281146a17217fc": "Error in executing code: 'int' object has no attribute 'is_commutative'", "e3628a691a224e5a88ea9a3ee2806513": "20", "1c128bed19374138bfdace0f6e85590b": "8.0", "968a606c355649a5b84d1884e87a8f36": "Error in executing code: 'int' object has no attribute 'is_square'", "61205bc7595b4afab7d16c40bba5ee6d": "48", "d7e9ca00c89d40e8ab1dbe5cb4c27f10": "325.000000000000", "4552c0dddd024938b236acd52c6ef847": "10", "6c8c0742f1014ea1884af0b91acadc95": "None", "718df7734e674e2c9de4c9ecb1146328": "sqrt(-1/(-5/2 + sqrt(21)/2))*(-5/2 - sqrt(21)/2)*sqrt(sqrt(21)/2 + 5/2) + sqrt(-1/(-5/2 - sqrt(21)/2))*(-5/2 + sqrt(21)/2)*sqrt(5/2 - sqrt(21)/2)", "db556142180e441f99e4bd29c8ff213f": "20.0000000000000", "a01a8532c42a45c8b4cf72cc384d5332": "168", "25b345156b5b48ab831ed3157998e9f0": "240", "fbbd1fd282634e33825708a8e18f288d": "None", "48091e165668486ab2e8bb0743dcf865": "20", "3f9955cff4bb411281a0ed89b7296488": "480", "9e14bab51adb42d0813728dedef89ccb": "Error in executing code: No module named 'scipy'", "4a815745a6ac46b381afcea9b372dd38": "852", "adcebb38fbfd4956874910656a200bba": "8", "3d4d3a9ad35443e1b9a4ce1d3e2d9ec1": "168", "17d76cf49b384280808044592f567c77": "240", "9f5fc3728e4348d5927ea7cc7616d530": "3", "3d6b9d0a02e74b7d9c8431828c7bf42a": "140", "0fed5d0b99f94193be5a107cb0f7e0ef": "2", "63cbfb5b4d1641789dbf96b3e2413898": "10.0", "50d5ca5c388a47f08a0fa7c8207f8bc7": "7", "9f7e636321a9453a8f670147900670d7": "0", "af4411f11d9449e8a520d01a10e364e2": "10", "bbca85e5c03d4c82a82ca039a1857cb6": "10", "6d5942e21b31448399ff31b5ee7cfbf1": "42", "e531049ea1cf47048ad9c55766372f3f": "114.0", "da72d036445e42888634ecfdece569d2": "635", "80d696b2e9ca44f68ea5ca1a0d4f34c2": "33", "2a5e3a73a47841c6904e6ede3551d796": "50", "7726e59fc79b467286e40300a2cc2fa6": "10", "fc73ae35c3a84824966b8835c00de0c7": "210.0", "ab1a6170235a425c8280724865333866": "7000.00000000000", "9a99b1c2d60842dca9611f512d51e360": "17.454545454545457", "26e55ba4a8694a9e8f7465aa979b7d0c": "12", "77333b0189b148d388dc0f4fbcaf83c5": "60.99999999999999", "2d2b7e6468764f109d64c847b5e89019": "Error in executing code: list indices must be integers or slices, not Symbol", "ff80808145cb8ada0145cb8e5a65001c": "0.25", "d8ab67561e724f0fb28fc908e2af36ec": "Execution time exceeded the limit", "7d85f7ac6bf249c782bfe09be8caf257": "15.0", "a1b14a6a209a4d869a8796e8c5919610": "0", "a1188500606c4936884974553bb76220": "d", "b903cac611a543f9b33aed91b45ddbd0": "94", "ee2ce07dc4944b999dd1a7c1f464debe": "3.75", "cf319ae8841249e99c17de291bd53bf3": "120.0", "ffbdfc3d280a449592c3ed3c99a831af": "0.13999999999999999", "d28b9c8e8fed41868192931e2b2bc38b": "3", "95268e574b5442d382a87fad464ff846": "12", "00ba277598934803a071c1d82b613d2c": "Error in executing code: cannot access local variable 'linear_factor' where it is not associated with a value", "2b107e1045274db0b65fcfc2ee33c145": "7.7", "89c5897b8c1c41c9ad36419173d4a5b4": "1200.00000000000", "8468eb1631ae4eb99e32f1a00d7d490b": "Error in executing code: 'Infinity' object cannot be interpreted as an integer", "6e26af1ee3dd4644880f76e478aa78cc": "20", "b82c1801da4e492cb1fbd5464b393312": "85.0", "62dee9dfb707422dba89519070ba6db6": "326", "1456844c467c47a7ad856716b893c27e": "180", "88c89e6902244cf89a0a35f6acb4148a": "24", "8c3ce37014074ca7b5350949038d0c5b": "4", "522fc67a066241dea778737b0116d447": "0.24", "c4f85851d8d945979282751c069a508f": "47", "9cb86a70b741441a8db3e3cccffea4e4": "1977", "446190bf302f48788e73619dd6bbd931": "37", "4284e97c4c474f2a8f4e3a2900d655b7": "156", "f5118f583a884e4fa46b681e6073dcfa": "75", "1cfdd939d75a40e5912455a7fc028d14": "27", "ff80808147d924de0147e67f62fd0d5a": "16", "d6255eecf5514e66a0d4ad0f4bdc4825": "128.0", "29d61241b477404d90d3916b70af26db": "27", "d2ac3081a9a847cfbd191c1746f604be": "10.0", "7b6accf4e2fd4c2d9f8d35ffd66c29d9": "1980", "696a83e02a2c4b44905bc078e5ec2bef": "5.0", "e8b1b2af690b4afcbf29b2dabfe0a116": "27", "a7115ee519bf4a80bba0546d9083797a": "Error in executing code: name 'symbols' is not defined", "22353fef29a842ddb639a62421aa5fb5": "24024", "4a409ecd298a4657b2cfdeafcfa84dc1": "73", "09b51f4609fa406e846500619ae4588e": "0", "df18cec6dccb41cc9a007907ca9ea69c": "24.000000000000004", "04f54a3571c745f882734039ada12241": "80", "e0344486d52f4ac3be1667f87d330861": "1", "ff8080814767499401476c97e50b075a": "41", "bf765468bed74a63ae3421efecaf9ac9": "0.988", "7027396910f84a06b1dbb215598303f1": "None", "acba8159225943ce8e4c317d5599fe90": "125.0", "8e910f4b592e4479a103e4d59f2b64b4": "45.0", "006698d9f285488fb2c70adc87022c9c": "Execution time exceeded the limit", "159f6f0a3b944575b8d1aba5fce005a5": "80", "ff80808148c43ff50148c97176550616": "5", "3d0fd0955bc649de8451c2274fcc96fc": "92.5000000000000", "8aac50a74e724b3f014eae1ddfbb4763": "3900", "110408f53df14243963bbcfbcb7d1398": "130.0", "e6c42485942b46dc8b7bb9b935a8bad3": "None", "26719baf75d34567a9cff154122aa1d6": "1609", "36fb3bcc514943c8ace59696b7e228a8": "{ink: 1, pen: 6}", "b3cd5135020d481cb8adb84939a38284": "Error in executing code: cannot determine truth value of Relational", "7be4c547cc3b47ebb7608843ece48bd7": "320.0", "38d16d14889b4742b9be738cee081d3a": "87", "87c9d4f1958e46838e77868e0e3df391": "12", "3a23f61441d142a1a130df6223144707": "Execution time exceeded the limit", "d093a17459144f99ae058e2fd6403701": "6", "bf8a889a829a4965a01a359168bc2aa7": "6761", "6ff3f83006734f40b82edf3297fc5be1": "9", "0a10fd3f61d74df985952d093b19b636": "-45/2", "a02a4ae535b0407e8ddab3ec15ba8791": "2.0", "f018a6c433874873b43bf083ce407510": "Error in executing code: name 'Eq' is not defined", "8348eb4d78a04a0ba05f3c3d7b5e4fc6": "24", "6c76351deaf849068c0d6b8f1c5bab45": "21", "0d549ec88c0c4be2bb9132918daec353": "Error in executing code: cannot determine truth value of Relational", "c06ccd3e6f784d288bff7b4340c76d45": "(-3 - (3 - sqrt(7))**3/9 + (3 - sqrt(7))**2 + 29*sqrt(7)/9)**(-2) + (3 - sqrt(7))**(-2)", "9936d182b54941db8798ee5612d4246b": "1.2", "ff8080814815760201481b09bf0b099c": "4", "50a1e7944a1f445b9cfdc22b7de0f0b6": "126", "d7807f5b9cc64c3583b47ad8189ae661": "60.0", "8d19bb72a0d84ba8ac1ca8976f5e1e88": "24.999999999999996", "8bd32272c08546399aa8ac29b39b419e": "33334445", "076a504a986f4328bf2ef32ff3ff0bb9": "65", "2d09b7f81c5d47c2b728e1bb392c5d3c": "11", "dc63d38a77b44b60b6a1429676790fc8": "200", "6a9de82774d3473c91f70d1a34fd8c94": "39", "46dc2e539bc8403da682e65bd26021c1": "12", "74caff06fa4944ecbaad59dfe4a08214": "1750", "1e9b20a7a39b43e1a6c224ef078e79d5": "7.5", "4c67ad5000e5417fb45d9a863c458519": "36", "383aa2a28f1e40d0ad4f61ba9571ffd0": "6777", "439a2b5ac05a435e8f1f6d03cf605c82": "100", "ac3c6b8effea471da25dc02c9cbd8077": "256", "12889c9051fa4389b1e6ef611777092b": "2184.0", "949f5d40f23f45c5a3f5096bde798396": "1920", "fb03810de5d046898201b96ff264934d": "165", "f3ce2aad071c4451a0a6100df3ed767e": "Abs(2*re(w)**3 - 9*re(w)**2 - 6*re(w)*im(w)**2 - 48.0*re(w)*im(w) - 46.0*re(w) + 9*im(w)**2 + 84.0*im(w) + 134.0)", "16531218bb8e4078a371f693566d8966": "131128140", "92be925176e24acfa807186cba7da326": "26", "b0e0c8062f324c50be8b81d6839981fa": "14", "ccfefb0466714cbc82a6c7daffff812a": "61.1863354037266", "bf3ee55e128e4ee981af333caa16fb80": "888888", "a22d2758555b4551b8e1763d6a0255d4": "111111", "5e9ea8887cb543b08c6f731ddb4399cb": "105", "c1137abd68c547c7a4b40cad3a382568": "Error in executing code: name 'symbols' is not defined", "342cfed9ed564f48a6832bf867bc7ab4": "154", "9d856433b6cb4fbe96865ed472156771": "7", "62b5848863fe4dd7837e2c85787bfb27": "11108879.0", "690706b7f4484ec4aeb444ad45b85228": "69", "754cca27ab224ca29144a25ebab4a276": "52.0", "e35c54d958f644d596d3e3fab67a3418": "13", "9902ab460f02464fa5a6df602f1fc8d0": "Error in executing code: list indices must be integers or slices, not Symbol", "df54b1a6e55a4a16bce66a02bab656e7": "Error in executing code: 'Symbol' object is not iterable", "0a238b5579a94a9f99cc50c24f2185b5": "132465", "db8310dcfe284dac9d76338b668e38b6": "2245.3943407585793", "634046255aad4f099fde5b7941125825": "False", "72cfffca3e4f4e26a39b93778debd6f0": "991", "0d9114f4889e46318088c1e696719f3e": "4", "3e7eeede1c30448094ccb161a90d6452": "Execution time exceeded the limit", "e6b3e74fc97e49d68af6fd7a413fe736": "2.0", "ac63a7b10cb14d0e95aed49124293107": "Error in executing code: No module named 'scipy'", "fb959ff3ae9446a6a69cd3738107ddb4": "1953", "907fee83929748a8bbd05fd0c2fa7a78": "47", "02e4fb4da19046f384cc4100e28d1d4f": "3", "ff808081481177070148126867e1014a": "6934", "4dd995fcb8a449beaa849a74ac276470": "400.0", "14c507d1a94f4c8d85c4a300900c70c4": "1776.0", "014274a0501c4a1e893df0d11aab73e1": "4", "e8bca337ac4844bbb9c37c7bfa8bf3d1": "1000000", "79669a9d39f54ba09e0fa93ff4e42eb5": "140", "09e27df0fb0049eba250f5ebcf484c1c": "16", "c7424e3323a34d93ba1bcc833597fbad": "4800.0", "9d4b1935a2d94f54a641ce6eaea50bf5": "261", "b1d9e7a05c1c4492b82d13fe3c8c779d": "31", "a3000d8073794787a0ed3fad0bb7e6f5": "2.0", "d19c6fa5eba74d5592304a1ccd5681c4": "34200.0", "2a5c0d2d6aa04042a9624f76f3f62523": "21.0000000000000", "b8b8228d66074666abb19fa07af68ef4": "Error in executing code: cannot access local variable 'b' where it is not associated with a value", "ccb866f126c34dfa8e991bdb09b7f20a": "7", "18c60939fecb45d1bd75360d5a9a4339": "200 - 100*x", "e62740be852b4920b96a0fdb1e293464": "8.0", "48fc8ac9977347b7ae8ea6a5ed53f543": "10", "d5b1fa8def33455b8e0f55901b8fa334": "Execution time exceeded the limit", "5f732ce9e4484a3ab670819d5ee82fb7": "33300", "5802add40d4541b096ff290f7a80a480": "5", "58558d6f3fcf43bca8d8f6d17dcea3f4": "Error in executing code: min() arg is an empty sequence", "ea06e860240c41f391195521b23f6afa": "263", "2ad99cc5a9cc467ea07ba4fa98cfbbfa": "35", "5773659f22a946ee81686c896affefee": "16", "b943f68e2fee4fd6bb6a017770ffcd3a": "0", "abbf8bbc1a684a028c69151f8eb6b263": "24", "e765eb0149f9480c8d3532c8fca60871": "210", "f8d3d1d1215041a6878855f4b8960f4d": "15.0", "67c11b721f1e4241bb7311c7f47f9f0b": "('Sue', 40.0)", "9399449c41ec42108e59da777e800388": "660.000000000000", "c55bcc41fdd546f1bce119abc571d956": "15", "07b397cdda074230b7f585af71b89aa3": "Execution time exceeded the limit", "e7612072a67146a78f93aea6a3e75966": "Execution time exceeded the limit", "2e3f82726d074741b8da4945c1d92491": "29", "250ddea4cbd54d3ba3aad8e62171c43c": "9", "ffe863b6acb9483cb5d5d3a21e5ebd80": "70", "bc9b0010bec6475288eaef3fdac2b368": "-629.9999999999993", "0170fc2ed12c4aa4bbb5c9930672a828": "-75.0", "fa5b12abf3fa436d900ed3c14e19cf4a": "136", "0a00e23fc34d41fba15dd5a73b7e533f": "Error in executing code: name 'symbols' is not defined", "f54b4ea6223541e299e4a4abb514002e": "14", "e052b52fba8a4bdca72c54a20c6c4893": "1008", "2f20624003fa4b54b197657274c96e47": "Error in executing code: name 'symbols' is not defined", "df4cb65eff1f4b5da1e96fab6efee224": "1", "bc811428937e479580dbd2263a8e8f2a": "Error in executing code: name 'symbols' is not defined", "d8e28ed2459649ae898fb646a6223b7d": "False", "d47606ad675344aabfb7cff525f706d0": "320", "48a5fa9d21e6458eacc859b0fe7a60a9": "7847940437880647142269107226976831427915725312616519615444051725106104299436861182150274988197990868361691724577093110289752002215281828161453450242979941262497028056846222105029454495472983769433001933783223775798357950717324777580113691763895344832308812660136669956332232817561093502874155817/8712910453317747322959589911968603741582577761796213669281210826959258108306813164978196242330000188874973049584377064921949381783330398947145196527182385773941644563898697118915041355988926784601972923715157937377793898445875291428943518068757165820871669129172720599483998748771302715680000", "dfde21e374824b4b9703e58859bf2aad": "4", "c7c0f7cd5137407f926039f97e5531b0": "0.16", "191128a08ca6418690a8a7cf845f59cb": "6", "b22671cf9e564866a2dd86fe212581a6": "1.3", "e31629e58bf84be7ba6e5e71f50c3438": "7", "a6defd5bb645400a9183580b652ae228": "Error in executing code: name 'symbols' is not defined", "07fefc49dcfd4b8a86411cfbf5a64a31": "134.48275862068965", "91f1c85cb1694a8f8170a81478ca8a9a": "578", "6cd0af5bb2fe498cad903927b66b8137": "80", "ff80808145933b51014598d19e1f08c0": "4356", "948acad538a34d18935befe9c6cc18a0": "2880", "a00a72d6d26b47bf9d716b9a867e99c5": "6", "1d38102eb459421e8be26138806914da": "990", "4ddf862e9509486190649b868514536b": "7200", "88fec0a86b964510b4327734368a6f68": "20.0", "26015a30390e47b1ae0ce195a6837177": "10", "8904688f31714e41a982cf9154bfc260": "Error in executing code: could not solve Mod(cards, 4) - 3", "727f427785b547c6809585c181ba6805": "14.0", "3c2ecc1c027f49658ab49f18f39d0c49": "120.000000000000", "1dd4a2054e5d40b7a2b8d6e00a253a0c": "285", "a07ea87c5330466e9af05f0b711e144d": "15", "e792c6e680d94614b2bccf6f323a23ab": "42", "d5bdbee205d04016983f7ba94be90762": "10.0", "d10588b732be4ef7ad2f6c2d7e5de0b0": "0", "117e5546632f48189613234630db2262": "12", "9877194e69ad4242bbbdd684ebc67191": "620", "e6d3fb484e614996af340508860e9b83": "1240", "9e4945ecdfa544e68570e78ed0e1048b": "224", "277b9475d76e427e9810da04762e1e91": "None", "8efd5577f2ec4c08b3c947cd1082526a": "Error in executing code: name 'symbols' is not defined", "63f989c07e124447b6f8abdd907d8f83": "15", "9de3c0dc0b104e149afa47518558d19d": "-6.0", "9e7d6fa55716471bb5f962d6bd559fbc": "18", "b6de65ba835a46e9a43a111be97947de": "67", "3db6fe43443d44ee9b606be829db9375": "240", "c9df88c8ddd04cc38380dbe8c6f78496": "45", "a2c50aba285144609ec19dc2d7fe924f": "8", "ec01ee6e418e47d0ba721d19c11a5079": "41.0", "0237bd506d104b6eb1b319d2b415586d": "69", "c1122c8925f24f4480690933f91a9846": "3.4999999999999996", "9ea18837b5aa43749beccc00051a4dad": "7.00000000000000", "e91f0400cb5548c7b3a80f9617a0b4bb": "15.0", "bd700761c7a9457c9ccd8fa81f24ea54": "15.0", "8c354cbcc7c84d2ba2519e7f21da48fd": "Error in executing code: cannot access local variable 'm' where it is not associated with a value", "5928e966b4a14038bdb09df46ae28c6c": "-4", "6f7ca2a5bd7545dca5ce35cc75fb27a1": "140", "1a8ab707a8ef41dd8c097dfb73ab1174": "657", "3b8139c3d0874374b9ef4d7e098b8bae": "137.0", "ff8080814526d2f4014536340f743f09": "176851", "045238e4700a4b06872143f127195cc2": "484", "a99499fda58d4a6580ec15b0badc3176": "1.0", "680294eadbab43eb89be367b2d7f4832": "374", "e8e0e0811e7c4335aa34bdc96f926454": "35", "ff80808147e705d80147f10034c315fa": "24.0000000000000", "235a690c81df40fe898e40934374f84b": "600", "4adf42a61f404dc29a49bffe81c5784f": "4", "ff808081488801c601488c21647d0d05": "7.272727272727273", "a4f3b7dbe214485eb7b502bbea8273b8": "9.00000000000000", "43b2d278ae51459b899f9471aae6e47e": "51", "110e2d3592dc4ed381a775ded12bb4f4": "Error in executing code: cannot access local variable 'work_per_facility_per_day' where it is not associated with a value", "d80c1af0f6b84a65a385131832d687ad": "51", "b806eb2bba744935a6dd7982c61d4aac": "Error in executing code: solving Abs(2*x + 5) when the argument is not real or imaginary.", "3304fe5768ed453a832357ac6d2926a5": "15", "b3612404f9f8406fb7fcc6408e97671d": "1200", "3924ffa34d20412594455759cea2f08a": "280", "232171ec7faa45c8b941ef6a5966e06b": "Error in executing code: list index out of range", "58363ed468524298b22f8cb50de4f8b9": "Error in executing code: solving Abs(b - Abs(a - x)) when the argument is not real or imaginary.", "4012392211f1435d99b1ff9f860f3779": "6.666666666666667", "6f0f8f3ebe444f078934de69f03314e3": "9", "24ba509e196a40c39177077d28626722": "35", "bc0a2a49e36247be8b29f02f23f42f05": "70", "295b1936c9e343c383687ab909afe631": "0", "4b1b3d70b454482580e2ac350cb47983": "14762", "9cd5b6c0312b4e10bc25972df0186ff5": "1", "509370b15a1f4ac6b62130f582f51ba2": "96", "6c9d6448f99e4651bc29ef939222e941": "1000", "ff80808148c43ff50148c971d6e6064e": "Error in executing code: no valid subset found", "4c2167c134a14833bf639bdfd9d20034": "22", "3485e3b0c6ad40dea3d27e5f80f88da0": "15", "58138b8ae518482d855b11b268e7f2e2": "36", "0f517a4b71b6419aa32a38d6c67c91c3": "96", "5e917125b0ab4ae2a9ea3429cc2719ed": "968", "12c356be3be54ddcbb45f459eedd24a5": "4", "36510ab695f74af1831eba48cf5286ed": "10.0", "76aafe4b36ab4cf9b83b8782adb54467": "7", "83e05d98971d4c18a737b01f4ffb461f": "9", "b6ab8dad7c40451bba0bd454cc07da33": "Error in executing code: list indices must be integers or slices, not Symbol", "94522d6fb7b54aa096cb0bd5a49f3316": "Execution time exceeded the limit", "d038afd78d4946ad953cdaf4494104a7": "Error in executing code: list index out of range", "945e727840e04021bef865fccc4d9e51": "566", "f75622a611d04e58ad2dc70edee488cb": "3", "74e2d9668b1a41e48d3a5b006335db00": "44", "e943af04b9584b3c8a5083ff457f6563": "10", "c58149b49d084a1ca436af3ad12c2c69": "198", "a3cb2a06110b41dc8c70103dab5a6715": "300.0", "f67a5db09fb04a45b690f369c13f46e2": "1243.0", "9bd31b6131ac4225bb8457373141527b": "56", "2b5cfa9131e1417191520c32b0648e16": "15.0", "13f22739deb64de68a6b44899cc1be24": "23", "94de42d3ed434b169aaa6d8d934d0658": "20", "ff808081488801c601488c227a010de7": "4.0", "cd699f26bdc945cdada7eb013d6026bf": "28", "ad8dbe0969b2439894632d69ded64db0": "1611", "baa93c948ce34ae48c24eaefdf802bab": "42", "46d5ed87485f47c8b057864bd1e90de9": "6", "5d9437972e19487ca0bb525aa78ed6c2": "Error in executing code: could not solve Mod(x, 7) - 1", "fd91a9e2d30a4efd899bb7ba8ae72120": "48", "add620aab10e49218e35de719ba6f6d3": "73416", "515c9745831245699f53fd8c6320671f": "630.0", "24935bb9b0e44e498e58e85318d2205a": "900", "ff80808148880257014888a08962020f": "[314159]", "a6801ebd882442afb802f6a0674fa130": "37", "139f72b5430e4b30ad1b637f0796bce7": "-70.0", "a0080f62c60f4c80ad6b041343577df7": "23760", "ff6cedf902394aa58b7729b6b44a39d9": "38", "20fe66f24102468c8d14ae8c7f7c7df1": "9", "e67e468135e64e70ab0cb4e2a73dbd58": "1025114", "6d3180248ec649b8b4583b66c7f571f2": "705", "4579f81f7e5746ec8261d0dae5befa83": "7", "db607d7d44784438b90f9fc8665d1d87": "18", "88474a58452345119de88643cf371095": "Error in executing code: name 'Eq' is not defined", "ef1c19af67544991bc3305ca9c7803b9": "15.0", "0b5d16919a0c4a5094e2ea57f9c3182a": "47", "68f3c2a821054e57b266dc1a741974aa": "854", "9ac2d7b349474d2294f0eabde6e0848e": "4266.66666666667", "5a1f7e7179e04bdd8d5611768a715805": "1", "8aac4907519fa10a01521662e26d1e72": "Error in executing code: list indices must be integers or slices, not Symbol", "f5a50ec30d55401eb4f718e4ff1978f5": "Error in executing code: name 'symbols' is not defined", "1d267c2a0a7f442dbcd59f28813462ac": "6498", "d9f765fcbd514113b43619eb42835dba": "1008", "4a67c69d44624ce5a5de6a844c004da7": "6", "298e64f1545246ca9dcc31b911156df9": "Error in executing code: list index out of range", "e71737452ac446a78ed946c14b3bfbd5": "('â˜…', 26)", "837188b4ba4d4c17ac0dba0a1c17aa7b": "98", "84eb062417604f529c65fc18ea98983e": "8", "ff8080814db3e92e014e010d078f5b69": "300", "f239d377020e43d9894a58b659b05849": "14", "111afeb4fc8f4a19b5603738cae770b7": "2", "9ff3ddd262074c8aa0ea8763fe5e9294": "336.0", "ed64e1a3fa3d4fdaaec17fc47621236b": "20", "38dec701bf7f4189b6657647248412ab": "180.000000000000", "1c7171a989c8435f8d43c37d975e9da6": "20.0", "bc3d393ce6e046848e9274fb8d05077f": "Error in executing code: could not solve Mod(piglets + 2, 4)", "69a1362886364340b73c3c5553b4568e": "12", "f53ddab552e24a4faf9bd7f9df2b7432": "1", "86da81ed1a9342b2859a296ffb5203ba": "480.0", "03d8df62c6d04eb9bda6b33bc2dc8897": "8.0", "88508aad11e6461dbe0cddc1e7deb083": "10", "f2b66877c8b543d9beba0a301ec6eaaa": "255/2", "8d96234608fb4bfe931503398b9724b8": "13", "1f40252a40d34d03af4f82f3f202395a": "364", "964b98e195814084a917e92bbfe596eb": "22", "3f52ca79bf7a431a83f75b3eddb51698": "[]", "c6beaa50cdfa4846a983535366c2cb40": "10", "f969d468facb44db9f44880e3e005c4a": "84.0000000000000", "613fbb420116404e981621864aab76dd": "657", "0861eb61d9074520bb1eec2e97726f12": "850", "47895125676d4b4985dace272a81310f": "11", "062d79f5c9dd48378ff74b6e0ec020e0": "370", "3d2c9f4fa99642f5bc8cadf15181f04d": "810", "159a8da7a87346a3a8bc050594d9eb7f": "Error in executing code: not enough values to unpack (expected 3, got 2)", "483c90441815440b95bf02cf71ffaedf": "85", "52194c53fed442dcadf5226eaf79bdae": "0", "b3a40f9b6ebc4c4da04ea3f492e4402d": "0.9989999999999999", "4866ef55df3a4e6f9aa3daf65d6ca434": "Error in executing code: list indices must be integers or slices, not Symbol", "7f4c201bc3b9421fb1dd87b38a6ae90b": "10", "cfd560b15fb447b7812b5bedd6e8a88f": "2", "ed3b7bd219164a5285f159e8f4e26c60": "13524", "eb9ff77e2e044a248653393f73ce3e51": "168", "ecc6366aa12e4610b01d026c25af040a": "19.0000000000000", "c957c387165543539a6cc13b243791ec": "181", "5e31a65b29c14c3cbbf9bdd87e3e7cde": "Error in executing code: 'Symbol' object cannot be interpreted as an integer", "0b9ab2d38c814e069255015182d51b4e": "25", "4dd76b0cbc244ecda34e1d261211dbfe": "45.0", "cb1bffe627ab438c8daf8187101d9288": "150", "dc6bd2afcf0d470abb1b928025b7b201": "816", "4f94b429a54d45b8875217c17f95c1b1": "1250", "05e85722fd8d43a2ad0e45f93e937511": "1001", "2a55f18a4f354b64ab37519849b14089": "9", "6fb48f8ba87f43a9a7e86d202de868d0": "145", "48b30b5b23da4fa4a824d9a46f3411df": "32", "3b58490ebdfb4a2aa8915549f6c358e2": "Error in executing code: name 'symbols' is not defined", "b2c6d93114c24d88924a74c3dad40e38": "Error in executing code: list indices must be integers or slices, not Symbol", "5ff4a8fb0f59436aa744515b80f2da91": "Error in executing code: cannot convert float infinity to integer", "2e6c2c70c14f43858aae0e3388670cf5": "464", "51f9005ed2964824ac1c1aed099c2bef": "660", "17ce5ab74ae84b6ca8c4ef2f246ab8fc": "9", "53ccefd6341c41f8a0cdd2c185e5cef4": "0", "ff808081477bd84c014790a042693466": "800", "ca61356a0888411bad87e21a436e0662": "26.0", "ff80808147c465b80147c68a943903b9": "-409.0909090909091", "c97fe969efa34e6dbb264fde09efb34d": "56", "1828966d162143c1b183087e3a8195ef": "0", "9eb36710fdaf48b79142683f39a78d24": "28", "a50edcb24c0a4220a084e99f60bad384": "25.6", "92176fb6fa354d6d89ad9e0ca68f12ff": "22", "35061e7b1f4948ae8cb2d8428517278d": "216/5", "8c3f927278cd4a17b62bd554c62cb2b9": "900.0", "ccb20bfa34da4a69b79e80ada4b47095": "15972", "68b168baddf3475cbf90db5c17d9b000": "286", "bb8a83c9218e42d09beea5d5c2d80356": "0", "1c1f6cacd00546a7b5eb2ab3f525c7f6": "5", "0bd83c6b337146b58d66bd657cb47fd3": "6043", "ad3fcbc818804858bbe41fda3b7ee829": "27", "144625a6910b4a3cae70d8cc0c5c951d": "10", "5539f0eb62d446f9b4b46e768d38ceaa": "21", "acc225ef83b44cd79180a24a9a880944": "Error in executing code: '<' not supported between instances of 'Poly' and 'int'", "49c784c132f7474ebde52ad6485af374": "46.666666666666664", "ea2458e817464091b0c4a2453bb2b4c9": "499", "c5130eabd0f7452f9af324d42224b7d3": "28", "120bbd692ac64467b19afb1b43ede302": "47", "be82541968df46d6bc607c07cd12ada8": "1 - 0.25*sqrt(2)", "7ffa3ada31e24fae8ab2ecfdf91e36e2": "Execution time exceeded the limit", "4b7807bdc5b840e084267a2639f7a4f5": "45", "ff80808149990d5e0149b3c3a96d3245": "666.6666666666666", "11768e0916e2489e9b63cfb4bf9b965a": "3", "ac5aa34d439a4c5f97fe7037ce9c553e": "70.0", "61715e6fb1f04dd780fcb53f7b0279ee": "36", "4ea96691c0c543d6a4f3e1202a99bf93": "630", "7cb5fad01e63493791f6a920cb4c5e19": "1", "d0ca7153691245f286781a18e45a3677": "10", "ef2956842b65495ea3eb07cd48cafa0a": "88", "7a68d8d403d548ecaa892feabd33705c": "13", "c5aba02e4e6e442b851c9de8054bcd68": "Error in executing code: list index out of range", "8b9fb131d06e47ca95bd5a2440f2c8ae": "inf", "73d00fbf618849c9809c912e9fd27d6f": "108", "77ab5ea78f544e74a33b9913b020abf8": "152.0253164556962", "c57e8e4237d44ed78f85da6667603e7b": "66", "791014ec21a94d27a0a30f896d3cf69f": "34.0", "bb353f0f105b43378708e33d629176b0": "2", "e346d0f14d6b47578c6c9e6657a926b9": "Error in executing code: Invalid NaN comparison", "ff808081488801c601488c235ecb0e7e": "173", "ea177503c8a042ca934e409dc7f132e4": "36.0000000000000", "ade5bdc9806e49e3b5ba061ab44f7aea": "10", "d5390f80c57749a7bf45307ccca0caab": "452.7254785790057", "2989ece6204d4b83b22e2b800f0299f4": "7185", "334f40bdc53548ca9c6efd5acd2f23cd": "0", "be3264db58a04fd29f480292874c03f8": "142.85714285714286", "c102dd7ae171415abaae99a8ada34223": "968", "ff8080814623402701462cc8546a0ce9": "36", "361a472230b8458fa769b7e7d46bb6ed": "Execution time exceeded the limit", "bc4704caa1ed4d708a266b9c3435a3dc": "20", "9325313b0d504ac6b7263587ab5edf8c": "24", "6fc0910a0fa6469fa192d29191e1943b": "2", "1e7f80a2539d4eeaa6c03af862b41c82": "10.0", "6bf504d82f6d4441be928a26d65f9145": "-900.0", "5a835d87e0be4780ba9b64fe43b2d19c": "Error in executing code: list index out of range", "f48525743c61463f99fd5c312d807608": "84.0000000000000", "0a2ab28fb76a4577963bc7f32c405d2e": "6.0", "2743a9fb2b814219a09680ada6af0358": "421639.19999999995", "452baa2292fb46b585555ecc8894eddc": "8.0", "1b389597d505470f9f5185c241784c22": "1", "d92f15b400a142e3bda8e63fde373e37": "30.0", "c47c1b63e848466b922737aa070bf46f": "-6/7", "3518583297e343489a50c3e0681377dc": "697", "f46516bcf1004ceb970f696f2ffa9540": "10.0", "ff80808148880257014888ac0e6b079a": "0.2", "bf3073937be84aea88ba775e24c5b237": "8", "6450f79ca3774cb99c98dfdebc69a734": "31", "9cfd5e9a9beb4f119f1e1cdc7d28addb": "36", "e0e270a3bb8f428c9ab1e7e2a3aee112": "657", "605e78e190a349f8b7c3311556bc5d9d": "6", "7bcd315da9e5499da8c5c77c192f6b9c": "-114", "041d81d5201c4a66a2e3f200c3d95099": "13", "004471dd8a784d01ac35d220ebe0b308": "84.0", "3da3f0cc79ad482b83756d049c6bac90": "None", "9c88cc393c654d8abd9b3a7b9acb6599": "43.0", "3da39129a55249daafdc0b078be3d825": "(sqrt(21)/2 + 5/2)**(-2) + (5/2 - sqrt(21)/2)**2 + (sqrt(21)/2 + 5/2)**2 + (5/2 - sqrt(21)/2)**(-2)", "8d308c0a8c1748a683c18a515f0d817c": "1574", "61b51268b09d4755b41e3e1e493bdb87": "1875.00000000000", "17656854ca0448dab1711d45581b636e": "61", "60b1bffd2afd428fa5d1fbcaf0539f03": "24.0", "4c3e30adbe63484085cb16979c8003b8": "12", "808e53e0454a4e9c839e3b3c671d16ec": "48", "423fe4718d234bccbfe94d6ff7c44f9a": "466560", "6e0182b6687a4e0695b3881b39d41317": "40.0000000000000", "3865263136a14b1493c5352a13f006fb": "96", "f26441d761154412aaa3c9ee2eb727af": "1", "ef8b96ce264a4ae498fae086576981e8": "Error in executing code: can only solve for one symbol at a time", "b3eaf52af33247c1be4818f27fb16093": "-87", "712a80fa78954a2a8080f07b6d9af3cb": "1306.6666666666667", "c6030bf0025d48ae9b448cf295bbdb4a": "Error in executing code: list indices must be integers or slices, not Symbol", "dd7d3daef8aa49e0910a0efab2b9bfb3": "16", "580494eee3b342818f42f75673a03592": "1607", "017cd6a61b0c43f9bde8d5578f163b8b": "16", "2aabb4431d494014a7603bce5c44c7fb": "600.0", "2416ec290ee54ef29d59994c1f18ad0a": "618", "de667006eebe4406a53d0d4bd40d97e7": "0", "a25c5127f46d4707b49ce8faa5fc1566": "21", "155447cf56dd458584c4fd8bdeefbcfe": "11", "e9fde3e4d0844ac49ee92e5e8d87f66b": "57273", "b3a8a78f517841c38200505a69f62f83": "5.833333333333334", "71817b2445544eb78a1785f13487b467": "3.0", "804121b0c67c46abb17376a085ee49f5": "24", "388802bac4584659b1ef8233a80f69bb": "[1764.00000000000]", "4414a22bb5ae45a79da1bc954096bc52": "5.999999999999998", "7f4905aff32843bdb7b26eda52b1279a": "12.0000000000000", "1c2edec62f0647779babcb8c42ec38ed": "Error in executing code: Invalid literal for Fraction: '0.101101...'", "52bacfdd4b3f4d96ae2c964121531e49": "-78", "76c8848291a34ddcb93a50423e7ff8e7": "250.0", "4384e4884a1e4c0887f9078bc29a06f1": "None", "79c7bd3a42794dbc9993c57b470b85c5": "22412", "7d969b00d8f54c9e912ec84d4c48d631": "35", "592cd35dba5b4cddbd4cd8b097ef71ef": "525", "4e26492a94db4e62aede77defbfe76d2": "3", "a01505aea6354bd0b3dba2a9c5fae3f4": "Error in executing code: list indices must be integers or slices, not Symbol", "dbdab00668f54887a8d7e0d50994b80b": "Error in executing code: 'tuple' object has no attribute 'evalf'", "744469d7590c42ff8287a7cc60347bd1": "2", "bede6abd89b84b5bae40de0b8a09b67a": "Execution time exceeded the limit", "ae4bcacabcab450fbf9092770c026bfb": "None", "96b2a6a6b7624260a6bfbcf9ea1c88ec": "2013", "c5763256e5054c89a33aebbd0a3d75cf": "190", "1163983facfd4e0faded15a40530496b": "134.4", "19f9d2360eb843f2a3ebc40534bab9ff": "0", "d0d2a52e01614203968ff6b24d5c111d": "Error in executing code: list index out of range", "64dd5a98984d49b791a2a8611f83b186": "Error in executing code: too many values to unpack (expected 3)", "dabaee74f7c442d19123935804ec678e": "20", "3e86d467ab3f4f6fbc98450b28de0af3": "204", "1dfd4370acae4d2f9176d96ca4b55fb4": "9", "09b851a38cd84ccf8a6b19d69a6aa4b9": "1009", "95b2d6e7343c4fd2beffc0751f8050a4": "-18.0000000000000", "2b324e3cea4f4566bbc437f18289af37": "1926", "6f40fe31490243dc85ea41c566156fdb": "112", "c24a39c6082944719258383caa0980ab": "1965", "3753d6873b8f433eb724e2d6fb50b706": "Execution time exceeded the limit", "ff80808145644e1a014564b48c4b008b": "4433", "38e3ebcfe9b643bd861a7704f31eef50": "60.0", "d5163a5852fc4dbfa181ac4d148b25c2": "43", "ff808081488801c601488c21ee8c0d87": "-189.0", "ff8080814a5b28e5014a70f8c07426cc": "-25/2", "33e7337fa263479984c31df18a3d0e9d": "1875.00000000000", "a050443dfc354c1e9d62cc7bcd1ad2c9": "Error in executing code: 'bool' object is not callable", "1a665f77cb854f7f88eb59cb83d39cdd": "('B', 420)", "0571cbc1f81e465ab6ad25e4860c6c63": "2700.0", "f148573303f045f482ab6ccaf07f93f9": "20", "91848bab3a374a4bbf64be3091b016b2": "(16, 1)", "091b940e119546d99fb9435577367240": "222.0", "8d5b9ce1f68d4e7e8ec52945e9b9b671": "20.5", "af2c295c35f64fc8aef7c87b2ea5338b": "56", "85e353bf8e8541a6ac0c4d10c9cd9802": "72.0", "7f5268c56f8a45359e485d6814795ed6": "5", "9a6a67deeed14fd6a342fb32150c83b9": "320.000000000000", "2316457f6bda483f83b76fae3d951f00": "45", "e5122e88dd11409d81868c3f5d371b84": "12.000000000000028", "722aac560bce4073a6ba658165372194": "12345678901234", "2b5335cb99b442e6ae8456b5f6dba32c": "None", "77bc760653c840588f161da3f035bd53": "47", "e5faf470ef8843869745f56f3a689ba7": "10257", "5a2e9c99bbd44b4781d5abd504e22778": "Execution time exceeded the limit", "99f9d7237b0248db9a4dd1cf24225955": "Error in executing code: The computation had not completed because of the undecidable set membership is found in every candidates.", "35fbb285089e426a9edcba8412a65c46": "15", "dfc8f4949d3b400bb7b114c5ac681838": "11", "3b0e6534bdcb4949838197a78ddd28c5": "90", "f0a436560a884a228d65adefccce4b61": "N = 17, 18, 19, ...", "6d08ece26c5f4212acf200493868a1a9": "10", "5f1a4a8f4ee0458ab55f06193009dfa6": "3200.00000000000", "132867adfdb84fb3a35594c7ecca1d16": "16", "82632bf2d8334037840a0be2d1e4817e": "53.0", "b2740f3a764f4d60bd5ad5cea74ee676": "4", "c292c82347d645ad987c2bffb3b8b2c5": "105", "4bb01898bdd64b46a2348a428d64fda7": "420", "54baf5aa303544839178ddeb3ef7f9c4": "40.0", "d0416d27769b4ec08699fdaf11492c76": "12", "ac5e37ee39424fe4aad7091c26d90c6d": "43", "4638e4562e604688b37bf6732778af39": "28", "ff808081488cdfd40148982aaada3af4": "1440", "9e5a1dfc27254981a84b260a6cebf721": "19", "67dde5b4b4e64f5da7a718f53e3a29f4": "503", "58187f07a98f432895487d8919db0f3f": "1936", "ab0bacba0f6540b0b6f6b4d7b55ef7bf": "Execution time exceeded the limit", "ec15a0b3ff19434bbd8c883206790465": "40", "e3cfd71000f24d47898b1e6f76b678b7": "1200", "9f2bd670b06547c1a761b39893d6f382": "160.0", "afc4e84318444fe8aa1e521fbda040c9": "333000", "bd33ad8185ef42d182175a50955cad1a": "1", "f95318f56e2b4e13a245d2bccb13f8c3": "15", "ee46d38ee7ca4202b234a1248619dad2": "2.0", "3076d7bbabf64be8863bfdac1c60d3c4": "Error in executing code: list indices must be integers or slices, not Symbol", "7dbd9329c65f434fae745a2eff55b9dc": "22.31", "aa14ef73f003425690b63979ca4e882d": "10.0", "8080c266c3c54576835926c6bdbd96a2": "Error in executing code: [Eq(r1*r2, 68), Eq((6 - r1)**2 + (9 - dx1)**2, r1**2), Eq((6 - r2)**2 + (9 - dx2)**2, r2**2), Eq(dy1, r1), Eq(dy2, r2)] is not a valid SymPy expression", "ff808081488cdfd40148982aaa183af2": "60", "56b53f6dc88b4aadbb07e60bd12f0512": "650", "d3b06f37b3fd4bceb4c8030db5b8bf15": "51", "520e6e1600b347a480e37dbf39394d42": "14", "d044663eca3e436489aaab77e4393096": "10", "7a8a313a25d44401ab5e534cf7fcfc8e": "1344", "0b4eb2d307db418abc8154cc4d53613b": "302", "9a99b2bdb4074008af31e8e877945114": "(0.0, 6.0, 6.857142857142861)"}